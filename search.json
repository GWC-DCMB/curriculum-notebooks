[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\nNotebook keys for our curriculum."
  },
  {
    "objectID": "index.html#lessons",
    "href": "index.html#lessons",
    "title": "",
    "section": "Lessons",
    "text": "Lessons\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nLesson02_HelloWorld_Variables\n\n\n\n\nLesson03_Variables_Types\n\n\n\n\nLesson04_Lists_Intro\n\n\n\n\nLesson05_Indexing\n\n\n\n\nLesson06_2D_Lists_Intro\n\n\n\n\nLesson07_2D_Lists_Indexing\n\n\n\n\nLesson08_Logic\n\n\n\n\nLesson09_Conditionals\n\n\n\n\nLesson10_Loops1\n\n\n\n\nLesson11_Loops2\n\n\n\n\nLesson12_Functions_and_Methods\n\n\n\n\nLesson13_Packages\n\n\n\n\nLesson14_Pandas-Intro\n\n\n\n\nLesson15_Pandas-Reading\n\n\n\n\nLesson16_Pandas-Subsetting-I\n\n\n\n\nLesson17_Pandas-Subsetting-II\n\n\n\n\nLesson18_Dictionaries\n\n\n\n\nLesson19_Functions\n\n\n\n\nLesson20_Numpy_Intro\n\n\n\n\nLesson21_Basic_Stats_I_Averages\n\n\n\n\nLesson22_Basic_Stats_II_Percents\n\n\n\n\nLesson23_Basic_Stats_III_Correlations\n\n\n\n\nLesson24_Basic_Stats_IV_Significance\n\n\n\n\nLesson25_LineGraphs\n\n\n\n\nLesson26_Scatterplots\n\n\n\n\nLesson27_BarCharts_Histograms\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#practices",
    "href": "index.html#practices",
    "title": "",
    "section": "Practices",
    "text": "Practices\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nLesson02_HelloWorld_Variables\n\n\n\n\nLesson03_Variables_Types\n\n\n\n\nLesson04_Lists_Intro\n\n\n\n\nLesson05_Indexing\n\n\n\n\nLesson06_2D_Lists_Intro\n\n\n\n\nLesson07_2D_Lists_Indexing\n\n\n\n\nLesson08_Logic\n\n\n\n\nLesson09_Conditionals\n\n\n\n\nLesson10_Loops1\n\n\n\n\nLesson11_Loops2\n\n\n\n\nLesson12_Functions_and_Methods\n\n\n\n\nLesson13_Packages\n\n\n\n\nLesson14_Pandas-Intro\n\n\n\n\nLesson15_Pandas-Reading\n\n\n\n\nLesson16_Pandas-Subsetting-I\n\n\n\n\nLesson17_Pandas-Subsetting-II\n\n\n\n\nLesson18_Dictionaries\n\n\n\n\nLesson19_Functions\n\n\n\n\nLesson20_Numpy_Intro\n\n\n\n\nLesson21_Basic_Stats_I_Averages\n\n\n\n\nLesson22_Basic_Stats_II_Percents\n\n\n\n\nLesson23_Basic_Stats_III_Correlations\n\n\n\n\nLesson24_Basic_Stats_IV_Significance\n\n\n\n\nLesson25_LineGraphs\n\n\n\n\nLesson26_Scatterplots\n\n\n\n\nLesson27_BarCharts_Histograms\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson26_Scatterplots.html",
    "href": "Lessons/_Keys/KEY_Lesson26_Scatterplots.html",
    "title": "Scatterplots",
    "section": "",
    "text": "Scatterplots are used to examine the relationship between two variables.\n\n# import seaborn, matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# set up inline figures\n%matplotlib inline\n\n\n# load iris and preview the data\niris = sns.load_dataset(\"iris\")\niris.head(10)\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n6\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n7\n5.0\n3.4\n1.5\n0.2\nsetosa\n\n\n8\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n9\n4.9\n3.1\n1.5\n0.1\nsetosa\n\n\n\n\n\n\n\nSay we want to look at the relationship between sepal_length and sepal_width within our dataset. We’ll use the sns.scatterplot function to plot this.\n\n# plot sepal_length vs sepal_width\nsns.scatterplot('sepal_length', 'sepal_width', data=iris)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x10ed8a128&gt;\n\n\n\n\n\nCan you remember what method in the statistics lessons we learned about that tells us about the relationship between two variables?\nCorrelation!\nThere is an easy way we can visualize the strength of the correlation on the plot using the lmplot function.\n\n# plot sepal_length vs sepal_width with trendline\nsns.lmplot('sepal_length', 'sepal_width', data=iris)\n\n\n\n\nBased on this plot do you think there is a strong relationship between sepal_length and sepal_width in our data?\nThis gives us a general idea of the trend between sepal_length and sepal_width, but what if we wanted to explore the relationship between these variables on a more granular level? For example - if we wanted to see how this relationship might differ between the different species within our dataset? We can separate our plot similar to the way we did in the line graph using the hue parameter.\n\n# plot sepal_length vs sepal_width colored by species\nsns.scatterplot('sepal_length', 'sepal_width', data=iris, hue = 'species')\n\n# the line below moves the legend outside of the plot borders\n# dont worry about understanding this line of code\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n&lt;matplotlib.legend.Legend at 0x10f1c9ac8&gt;\n\n\n\n\n\nSimilarly, we can use the sns.lmplot function to add a linear trendline for each species separately. We can also change the color palette using the palette parameter\n\n# plot sepal_length vs sepal_width colored by species\nsns.lmplot('sepal_length', 'sepal_width', data=iris, hue = 'species', palette=\"Set2\")\n\n\n\n\nWhat do you notice about the relationship between our two variables when we separate (i.e. stratify) by species?\nInstead of stratifying by species using color, we can do so using the marker shape with the style parameter.\n\n# plot sepal_length vs sepal_width colored by species\nsns.scatterplot('sepal_length', 'sepal_width', data=iris, style='species', palette = 'Set2')\n\n# the line below moves the legend outside of the plot borders\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n&lt;matplotlib.legend.Legend at 0x10f311780&gt;\n\n\n\n\n\nLastly, we can combine hue, style and palette all together:\n\n# plot sepal_length vs sepal_width colored by species\nsns.scatterplot('sepal_length', 'sepal_width', data=iris, hue = 'species', style='species', palette = 'Set2')\n\n# the line below moves the legend outside of the plot borders\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n&lt;matplotlib.legend.Legend at 0x10f656160&gt;\n\n\n\n\n\nIn this lesson we learned: * How to create a scatterplot in seaborn * Stratifying a scatterplot by another variable using color (hue) * Stratifying a scatterplot by another variable using marker shape (style) * Changing the color palette of a stratified plot (palette)"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html",
    "href": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html",
    "title": "Bar Charts and Histograms",
    "section": "",
    "text": "Bar charts are used to display how a categorical variable relates to a continuous variable. In bar charts the categorical varibale is displayed on the x-axis and the continuous variable is displayed on the y-axis.\n\nCategorical variables are variables with different categories or groups.\n\nExamples: gender, city\n\nContinuous variables are numeric variables.\n\nExamples: time, height, length\n\n\n\n# import seaborn, matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# set up inline figures\n%matplotlib inline\n\nWe will be using the titanic dataset in this example. Let’s load and preview it.\n\n# read in titanic data\ntitanic = sns.load_dataset(\"titanic\")\n# preview data\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nsex\nage\nsibsp\nparch\nfare\nembarked\nclass\nwho\nadult_male\ndeck\nembark_town\nalive\nalone\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\n7.2500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nFalse\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\n71.2833\nC\nFirst\nwoman\nFalse\nC\nCherbourg\nyes\nFalse\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\n7.9250\nS\nThird\nwoman\nFalse\nNaN\nSouthampton\nyes\nTrue\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n53.1000\nS\nFirst\nwoman\nFalse\nC\nSouthampton\nyes\nFalse\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n8.0500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nTrue\n\n\n\n\n\n\n\nLet’s say we want to compare the mean fare price across the three classes of tickets for all passengers.\n\n# barplot of class vs fare\nsns.barplot(x=\"class\", y = 'fare', data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x115cb1780&gt;\n\n\n\n\n\nNotice how seaborn magically computes the mean fares and generates the plot exactly as we want without us even specifying!\nWhat if we wanted to look at the data more granularly and further stratify each class bar by the sex variable? Based on what you know about seaborn so far, how do you think we can do that?\n\n# barplot of class vs fare stratified by sex\nsns.barplot(x=\"class\", y = 'fare', hue = \"sex\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1192bbba8&gt;"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#bar-charts",
    "href": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#bar-charts",
    "title": "Bar Charts and Histograms",
    "section": "",
    "text": "Bar charts are used to display how a categorical variable relates to a continuous variable. In bar charts the categorical varibale is displayed on the x-axis and the continuous variable is displayed on the y-axis.\n\nCategorical variables are variables with different categories or groups.\n\nExamples: gender, city\n\nContinuous variables are numeric variables.\n\nExamples: time, height, length\n\n\n\n# import seaborn, matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# set up inline figures\n%matplotlib inline\n\nWe will be using the titanic dataset in this example. Let’s load and preview it.\n\n# read in titanic data\ntitanic = sns.load_dataset(\"titanic\")\n# preview data\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nsex\nage\nsibsp\nparch\nfare\nembarked\nclass\nwho\nadult_male\ndeck\nembark_town\nalive\nalone\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\n7.2500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nFalse\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\n71.2833\nC\nFirst\nwoman\nFalse\nC\nCherbourg\nyes\nFalse\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\n7.9250\nS\nThird\nwoman\nFalse\nNaN\nSouthampton\nyes\nTrue\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n53.1000\nS\nFirst\nwoman\nFalse\nC\nSouthampton\nyes\nFalse\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n8.0500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nTrue\n\n\n\n\n\n\n\nLet’s say we want to compare the mean fare price across the three classes of tickets for all passengers.\n\n# barplot of class vs fare\nsns.barplot(x=\"class\", y = 'fare', data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x115cb1780&gt;\n\n\n\n\n\nNotice how seaborn magically computes the mean fares and generates the plot exactly as we want without us even specifying!\nWhat if we wanted to look at the data more granularly and further stratify each class bar by the sex variable? Based on what you know about seaborn so far, how do you think we can do that?\n\n# barplot of class vs fare stratified by sex\nsns.barplot(x=\"class\", y = 'fare', hue = \"sex\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1192bbba8&gt;"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#histograms",
    "href": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#histograms",
    "title": "Bar Charts and Histograms",
    "section": "Histograms",
    "text": "Histograms\nHistograms are used to visualize the distribution of a continuous variable.\nLet’s say we wanted to see how the age was distributed across all passengers in our dataset. We can use the distplot function to generate our histogram.\n\n# histogram of age\nsns.distplot(titanic['age'].dropna(), kde=False)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x119367198&gt;\n\n\n\n\n\nWe can change the number of bins used to plot our histogram to change the granularity of our distribution plot.\n\n# histogram of age\nsns.distplot(titanic['age'].dropna(), kde=False, bins=10)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x119428080&gt;\n\n\n\n\n\n\n# histogram of age\nsns.distplot(titanic['age'].dropna(), kde=False, bins=80)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1194b5518&gt;\n\n\n\n\n\nUnfortunately we can’t color our histograms by another variable, but we can compare the distributions of certain variables between subsets of our DataFrame by layering them.\n\n# histogram of age for females\nsns.distplot(titanic.query('sex == \"female\"')['age'].dropna(), kde=False, label=\"F\")\nsns.distplot(titanic.query('sex == \"male\"')['age'].dropna(), kde=False, label=\"M\")\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x119436978&gt;"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#count-plots",
    "href": "Lessons/_Keys/KEY_Lesson27_BarCharts_Histograms.html#count-plots",
    "title": "Bar Charts and Histograms",
    "section": "Count Plots",
    "text": "Count Plots\nCount plots can be thought of as histograms for categorical variables.\nLet’s say we wanted to visualize how many passengers there were in each class.\n\n# count plot of class\nsns.countplot(x=\"class\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x119585828&gt;\n\n\n\n\n\nNow, let’s stratify each class by the sex variable using color. By now you’re an expert in this!\n\n# stratify class by sex variable\nsns.countplot(x=\"class\", hue = \"sex\",  data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1198e82e8&gt;\n\n\n\n\n\nAs always we can change the color palette:\n\n# change color palette\nsns.countplot(x=\"class\", hue = \"sex\", palette = \"Set3\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1199a0e80&gt;\n\n\n\n\n\nIn this lesson you learned: * How to create barplots in seaborn * How to stratify barplots by another variable using color (hue) * How to create histograms in seaborn * Changing the granularity of the histograms (bins) * How to create count plots in seaborn * How to stratify count plots by another variable using color (hue)"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson20_Numpy_Intro.html",
    "href": "Lessons/_Keys/KEY_Lesson20_Numpy_Intro.html",
    "title": "Introduction to Numpy",
    "section": "",
    "text": "RECAP: You have previously learned how to manipulate data with the pandas library.\nToday, we will be learning how to perform calculations with another library known as numpy. numpy allows you to do math on entire lists of data, all at the same time!\nLet’s create a list containing the numbers 0 through 5 and assign it to a variable:\n\n# Create a list containing the numbers 0 through 4\ndata = [0, 1, 2, 3, 4]\n\n# or convert the range to a list\ndata = list(range(5))\n\n\n# let's see what it looks like\nprint(data)\n\n[0, 1, 2, 3, 4]\n\n\nUsing lists can be really useful, because you can store any set of data in the list.\nNow, lets add 1 to each of the items in the list. Is there a simple way to do this?\n\ndata + 1\n\nTypeError: ignored\n\n\nhmm … that didn’t work! That is because the + operator acts as a concatenation operator on lists, and we learned previously that we can only concatenate lists with lists, not with integers.\nAnother way we could update our list is to add 1 to each of the items in the list individually. We can do this by indexing to isolate each value in the list one by one.\n\n# Add 1 to each item in the array you created above\ndata[0] = data[0] + 1\ndata[1] = data[1] + 1\ndata[2] = data[2] + 1\ndata[3] = data[3] + 1\ndata[4] = data[4] + 1\n\n# print the list to see how it changed\nprint(data)\n\nThis is very inconvenient with a list. It is more useful with a single number, where you can do something like this to add a number:\n\n# create a single variable and add a number to it\na = 5\na += 1\nprint(a)\n\nToday we will be using numpy, which allows us to quickly and efficiently perform mathematical operations on entire lists (or, as they’re called in numpy, arrays)!\nFirst we will import numpy. Remember when we imported pandas, we gave it the special nickname pd? We’re also going to give numpy a nickname: np:\n\n# Load numpy\nimport numpy as np\n\nNow whenever we type np, python will know we really mean numpy.\nThere is a ton of useful stuff we can do with numpy, so let’s redo the example above using numpy arrays instead of lists.\n\n# create a numpy array containing the numbers 0 through 4\ndata_array = np.array([0, 1, 2, 3, 4])\n\n# you can print arrays just like lists\nprint(data_array)\n\nNumpy arrays act very similarly to regular python lists, we can grab individual items using the same syntax:\n\n# Print any number from the numpy array you just created:\nprint(data_array[0])\n\nNumpy arrays also add a lot of useful features such as the ability to perform commands on all items in a list at the same time.\nWe can demonstrate this by adding a number to all of the items in the Numpy array:\n\n# Add any number to the array we created above\ndata_array += 5\n\n# print the array\nprint(data_array)\n\nSee how much easier that was than manually changing each element of a list? We will be using numpy a lot to perform calculations on arrays of data. In the above example we used addition, but you can also perform any mathematical operation we’ve talked about with numpy arrays.\nIn this lesson you learned how to: * Load numpy into Python. * Create an array with numpy. * Perform math with numpy arrays."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson25_LineGraphs.html",
    "href": "Lessons/_Keys/KEY_Lesson25_LineGraphs.html",
    "title": "Line Graphs",
    "section": "",
    "text": "Line graphs are often used to show the change in a single variable over time. In this lesson we’re going to learn how to make and customize line graphs using a package called seaborn, which we will give the nickname sns.\n\n# import seaborn and nickname it sns\nimport seaborn as sns\n# import numpy and nickname it np\nimport numpy as np\n# set up inline figures\n%matplotlib inline\n\nseaborn is mainly a package for plotting, but we can also load some built-in datasets using the load_dataset function.\n\n# load fmri dataset\nfmri = sns.load_dataset(\"fmri\")\n# preview fmri dataset\nfmri.head()\nfmri.tail()\n\n\n\n\n\n\n\n\nsubject\ntimepoint\nevent\nregion\nsignal\n\n\n\n\n1059\ns0\n8\ncue\nfrontal\n0.018165\n\n\n1060\ns13\n7\ncue\nfrontal\n-0.029130\n\n\n1061\ns12\n7\ncue\nfrontal\n-0.004939\n\n\n1062\ns11\n7\ncue\nfrontal\n-0.025367\n\n\n1063\ns0\n0\ncue\nparietal\n-0.006899\n\n\n\n\n\n\n\n\n# get unique subjects\nnp.unique(fmri['subject'])\n\narray(['s0', 's1', 's10', 's11', 's12', 's13', 's2', 's3', 's4', 's5',\n       's6', 's7', 's8', 's9'], dtype=object)\n\n\nThis data contains fMRI signals in the frontal and parietal regions of the brain over time for 14 subjects (s0 - s13). To illustrate how this signal changes over the timeframe of the fMRI scan, let’s make our first line graph.\n\n# line graph of fmri signal over time\nsns.lineplot(x=\"timepoint\", y=\"signal\", data=fmri)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1125fc6d8&gt;\n\n\n\n\n\nCan you guess why this plot returns both a line and a shaded area?\nIf we look back at our data preview, we can see that the fmri dataset contains data for several subjects, regions and events - meaning each timepoint has not just one, but multiple corresponding signal values. When this happens, seaborn knows to take the mean of the data (shown as the single line), but also report the spread of the data (here, the confidence interval, shown in the shaded band) to give us a sense of how similar/different the signal is across our subjects/regions/events.\nBut what if we wanted to visualize the difference between the signal in the frontal region vs. parietal region? seaborn lets us do this really simply with the hue parameter:\n\n# separate plot by event column\nsns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"region\", data=fmri)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x1126aea58&gt;\n\n\n\n\n\nBased on this plot what can we infer about the two regions in this fMRI scan? By separating the signal in the two regions we can easily see that the spike in signal is not as strong in the frontal region (orange) as it is in the parietal region (blue).\nWhat if we now wanted to separate the plot by the event column to see the differences between the cue and stim conditions? We could change the value of the hue parameter, or we could use another parameter - style.\n\n# separate and style plot by event column\nsns.lineplot(x=\"timepoint\", y=\"signal\", style=\"event\", data=fmri)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x107515fd0&gt;\n\n\n\n\n\nAs you can see the style parameter separates our plot using different line styles, rather than different color lines. Based on this plot we can see the signal has a much higher spike in the stim condition than in the cue condition.\nFinally, we can combine the hue and style parameters to separate our plot even more granularly.\n\n# separate and style plot by event column\nsns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\", data=fmri)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x115b3f668&gt;\n\n\n\n\n\nWhat can you infer based on this plot?\nIn this lesson you learned: * Plotting line graphs the seaborn package * Separating the graph by another variable using colors (hue) * Separating the graph by another variable using line type (style) * Separating the graph by multiple variables (combine hue and style)"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson17_Pandas-Subsetting-II.html",
    "href": "Lessons/_Keys/KEY_Lesson17_Pandas-Subsetting-II.html",
    "title": "Subsetting Pandas DataFrames II",
    "section": "",
    "text": "In the last lesson, you learned how to subset dataframes by entire rows or entire columns. Now we’re going to learn how to do both at the same time!\nLet’s read in the tips dataset again:\n\n# import the pandas package\nimport pandas as pd\n# set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# load tips\ntips = pd.read_csv(path + 'SampleData/tips.csv')\n\nTake a look again at the beginning of the tips DataFrame:\n\n# view the beginning of tips\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\nFirst, let’s recall how you would subset three columns, total_bill, day, and time. Let’s save it to a variable called subset1.\n\n# subset the colums and save it to subset1\ncolumns = ['total_bill', 'day', 'time']\nsubset1 = tips[columns]\n#subset1 = tips[['total_bill', 'day', 'time']] # alternative method\n\nNow, how would you subset the 6th row through the 10th row from the subset1 dataframe? Let’s save it to a variable called subset2.\n\n# subset the 6th row through the 10th row and save it to tips_subset_rows\nsubset2 = subset1.iloc[5:11]\n\nNow the subset2 dataframe has just the rows 5 through 10 and three columns. We can even subset rows and columns in the same line of code, instead of doing it on multiple lines like we did above. Let’s try combining both iloc and square brackets [] on one line:\n\n# subset rows & columns at the same time\nsubset3 = tips.iloc[5:11][['total_bill', 'day', 'time']]\n\nWhat do you notice about subset3? How does it compare to subset2?\n\n# compare subset2 and subset3\nsubset2 == subset3\n\n# every value printed out is True, so they're exactly the same\n\nNow you try! Subset rows 11 and 12 and columns total_bill and tip on one line of code:\n\n# subset rows and columns\ntips.iloc[11:13][['total_bill', 'tip']]\n\nSometimes we don’t know exactly which row(s) we want to subset ahead of time. What if we want to subset rows that have a certain value in the time column? We don’t want to scroll through hundreds of rows to find them. The good news is: we don’t have to! Let’s use the method called query. Inside the parentheses of query we’ll enclose a statement in quotes with the name of the column and an expression.\n\ntips.query('time == \"Lunch\"')\n\nThe above cell showed us all the rows where time is equal to “Lunch”. We had to enclose “Lunch” in quotes above because it’s not the name of a column, but a value within the time column.\nNow you try: subset the rows where the waitress is female and save it to a variable, female:\n\n# subset rows with a female waitress and save it to a variable\nfemale = tips.query('sex == \"Female\"')\n\n# take a look at the beginning\nfemale.head()\n\nNow lets do the same for males. Subset the male waiter data and save it to a variable, male:\n\n# subset the male waiters and save it\nmale = tips.query('sex == \"Male\"')\n\n# look at the beginning\nmale.head()\n\nHow would you determine the number of male waiters in this DataFrame? Think back to the last lesson when we used the len function.\n\n# number of males\nlen(male)\n\nHow about the number of female waitreses?\n\n# number of females\nlen(female)\n\nWe can use query on multiple columns at a time. Let’s find out how many tables were served by a female waitress on a Sunday.\n\ntips.query('sex == \"Female\" and day == \"Sun\"')\n\nWe used the keyword and to chain together two statements inside the query function. Both statements have to be true for a row to be included.\nBesides checking whether values are equal using ==, we can also use greater than, less than, greater than or equal, etc. Try subsetting the rows where the bill is greater than \\(\\$15\\) and the tip is less than \\(\\$2\\):\n\n# subset by bill and tip\ntips.query('total_bill &gt; 15 and tip &lt; 2')\n\nInstead of and we can use the keyword or to represent a query where one of the two conditions must be fulfilled. Try subsetting where the bill is greater than \\(\\$15\\) or the tip is greater than \\(\\$5\\):\n\n# subset by bill or tip\ntips.query('total_bill &gt; 15 or tip &gt; 5')\n\nIn this lesson, you learned:\n\nHow to use iloc and square brackets [] at the same time.\nHow to use query to find rows where the column has a certain value."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson16_Pandas-Subsetting-I.html",
    "href": "Lessons/_Keys/KEY_Lesson16_Pandas-Subsetting-I.html",
    "title": "Subsetting Pandas DataFrames I",
    "section": "",
    "text": "You now know how to read external datasets into pandas. Let’s put those skills to use and read in the tips dataset again:\n\n# import the pandas package\nimport pandas as pd\n# set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# load tips\ntips = pd.read_csv(path + 'SampleData/tips.csv')\n\nTake a look again at the beginning of the tips DataFrame:\n\n# view the beginning of tips\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\nWhat if we decided we didn’t want to keep all of the data recorded in this dataset? To do that, we need to learn how to subset DataFrames. Subsetting means taking a dataset and pulling out a small portion of it that we’re interested in.\nFirst, we’ll look at a single column (you can use head to keep the printed result short):\n\n# subset one column\ntips['day'].head(10)\n\n0    Sun\n1    Sun\n2    Sun\n3    Sun\n4    Sun\n5    Sun\n6    Sun\n7    Sun\n8    Sun\n9    Sun\nName: day, dtype: object\n\n\nWe use the square brackets [ ] after the name of the DataFrame to tell pandas that we want to look at one of the columns. We put the name of the column in quotes to tell pandas exactly which column we want to look at. Try subsetting the total_bill column:\n\n# subset the total_bill column\ntips['total_bill'].head(10)\n\n0    16.99\n1    10.34\n2    21.01\n3    23.68\n4    24.59\n5    25.29\n6     8.77\n7    26.88\n8    15.04\n9    14.78\nName: total_bill, dtype: float64\n\n\npandas simply showed us the result of subsetting the column, but it didn’t save the result anywhere. Try saving the total_bill column to a new variable, bills:\n\n# save the total_bill column to a variable\nbills = tips['total_bill']\n\nWe can also pull out multiple columns at a time to create a new DataFrame. If we were only interested in the total_bill and tip, we can subset them like this:\n\n# subset the columns total_bill and tip\ntips[['total_bill', 'tip']].head(10)\n\n\n\n\n\n\n\n\ntotal_bill\ntip\n\n\n\n\n0\n16.99\n1.01\n\n\n1\n10.34\n1.66\n\n\n2\n21.01\n3.50\n\n\n3\n23.68\n3.31\n\n\n4\n24.59\n3.61\n\n\n5\n25.29\n4.71\n\n\n6\n8.77\n2.00\n\n\n7\n26.88\n3.12\n\n\n8\n15.04\n1.96\n\n\n9\n14.78\n3.23\n\n\n\n\n\n\n\nDoes that look familiar? Instead of putting a single string between the square brackets, we put a whole list of strings – you can tell it’s a list by the second set of square brackets. You can also create the list of columns you’re interested in and subset the dataframe in two separate steps. This code works exactly the same as what we just did above.\n\ncolumns = ['total_bill', 'tip']\ntips[columns].head(10)\n\n\n\n\n\n\n\n\ntotal_bill\ntip\n\n\n\n\n0\n16.99\n1.01\n\n\n1\n10.34\n1.66\n\n\n2\n21.01\n3.50\n\n\n3\n23.68\n3.31\n\n\n4\n24.59\n3.61\n\n\n5\n25.29\n4.71\n\n\n6\n8.77\n2.00\n\n\n7\n26.88\n3.12\n\n\n8\n15.04\n1.96\n\n\n9\n14.78\n3.23\n\n\n\n\n\n\n\nNow you try: subset the columns total_bill, tip, and time and save the result to a variable called tips_subset:\n\n# subset three columns and save to a new variable\ntips_subset = tips[['total_bill', 'tip', 'time']]\n\n# take a look at the beginning of the new DataFrame\ntips_subset.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\ntime\n\n\n\n\n0\n16.99\n1.01\nDinner\n\n\n1\n10.34\n1.66\nDinner\n\n\n2\n21.01\n3.50\nDinner\n\n\n3\n23.68\n3.31\nDinner\n\n\n4\n24.59\n3.61\nDinner\n\n\n\n\n\n\n\nNow we’ve learned how to subset columns. How do we subset rows? We use a method of DataFrame called iloc. When you see iloc, think “index location” – because we want to get the location where the row is a certain index. Let’s try it:\n\n# subset a row\ntips.iloc[1]\n\ntotal_bill     10.34\ntip             1.66\nsex             Male\nsmoker            No\nday              Sun\ntime          Dinner\nsize               3\nName: 1, dtype: object\n\n\nThat showed us the row with an index of 1. Similarly to subsetting columns, we can also subset multiple rows:\n\n# subset the first three rows\ntips.iloc[[0,1,2]]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n\n\n\n\n\nThat gave us a smaller DataFrame where the rows have an index of 0, 1, or 2. We can do the same thing with slicing syntax:\n\n# subset multiple rows\ntips.iloc[0:3]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n\n\n\n\n\nNotice that this does the same thing as calling head with a value of 3:\n\n# use head\ntips.head(3)\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n\n\n\n\n\nWhat if we want to grab some rows in the middle of the DataFrame? Try subsetting the 100th through 105th row. Hint: Don’t forget that counting starts at 0 in Python!\n\n# subset the 100th row through the 105th row\ntips.iloc[99:105]\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n100\n11.35\n2.50\nFemale\nYes\nFri\nDinner\n2\n\n\n101\n15.38\n3.00\nFemale\nYes\nFri\nDinner\n2\n\n\n102\n44.30\n2.50\nFemale\nYes\nSat\nDinner\n3\n\n\n103\n22.42\n3.48\nFemale\nYes\nSat\nDinner\n2\n\n\n104\n20.92\n4.08\nFemale\nNo\nSat\nDinner\n2\n\n\n105\n15.36\n1.64\nMale\nYes\nSat\nDinner\n2\n\n\n\n\n\n\n\nCongrats on making it to the end of this lesson – we learned a lot!\n\nHow to use square brackets [] to subset columns.\nHow to use iloc to subset rows."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson15_Pandas-Reading.html",
    "href": "Lessons/_Keys/KEY_Lesson15_Pandas-Reading.html",
    "title": "Reading Data with Pandas",
    "section": "",
    "text": "In the last lesson, we learned how pandas stores data as rows and columns in DataFrames. We previously used a small dataset that was hard-coded right in the notebook. But in the real world, we want to be able to use large datasets that can’t be easily hard-coded or typed out by hand. One way that we can store large datasets as files is in the CSV format. This is a format which can be opened by many different programs like Excel, Google Sheets, or our Python programs, which allows us to share data easily.\nLet’s start by importing pandas. We can use the pd nickname like before:\n\n# import the pandas package\nimport pandas as pd\n\nNow we’re ready to read our dataset into Python with pandas! We’ll use a function called read_csv. Our dataset is in our GWC GitHub repository, and we need to tell read_csv exactly where to find it. read_csv will create a DataFrame for us. Let’s call it tips:\n\n# load the tips csv\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\ntips = pd.read_csv(path + 'SampleData/tips.csv')\n\nSince we saved the data to a variable, pandas didn’t show us what it looks like. How would you view the beginning of the tips DataFrame without seeing every row? Try it below:\n\n# View just the beginning of the tips DataFrame\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\nLook at the column names of the tips DataFrame. We have total_bill, tip, sex, smoker, day, time, and size. Based on the column names and some of the values in the DataFrame, what do you think the rows each represent?\nThe rows represent: waiters and waitresses in a restaurant\nNow let’s take a look at the end of the DataFrame:\n\n# View the end of the tips DataFrame\ntips.tail()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n\n\n\n\n\n\n\nNotice the numbers on the far left side of the DataFrame. pandas assigned a number to every row. What number did pandas assign to the very first row of the DataFrame? (Scroll up if you need to.) So how many rows do we have in this DataFrame?\nNumber of rows: 244\nThe column of numbers that label the rows is called the index of the DataFrame. The index is an attribute, a special variable which belongs to variables of the DataFrame type. An example of an attribute would be if you had a variable dog with an attribute dog.owner to store the name of the person who owns the dog.\nWe can view the DataFrame’s index like this:\n\n# view the index\ntips.index\n\nRangeIndex(start=0, stop=244, step=1)\n\n\nSo our index starts at 0, ends at 244, and increases by 1 for each row. Another way to count the number of rows is to take the length of the index using the len function:\n\n# get the length of the index\nlen(tips.index)\n\n244\n\n\nLike the index labels the rows of the DataFrame, there is an attribute called columns that refers to the columns of the DataFrame. Let’s take a look:\n\n# view the columns\ntips.columns\n\nIndex(['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size'], dtype='object')\n\n\nWe could count the number of columns – there aren’t too many – but what’s the fun in that? Let’s write a line of code to tell us the number of columns:\n\n# length of the DataFrame's columns\nlen(tips.columns)\n\n7\n\n\nConveniently, we can also call len on the DataFrame itself. Try it here! Is the result equal to the number of rows or the number of columns?\n\n# use len on tips\nlen(tips)\n\n244\n\n\nBased on the number of rows and columns, how many data points are in the tips DataFrame?\n\n# calculate the number of data points in tips\n7 * 244\n\n1708\n\n\nThat’s a lot more data than we’ve handled before. But that’s nothing for pandas – it can handle DataFrames with millions of rows! Data scientists use pandas to handle very large datasets from the real world.\nInstead of typing the number of rows and columns in the DataFrame, we could put both commands with len on the same line. Try it here:\n\n# Multiply the length of rows & columns without typing numbers\nlen(tips) * len(tips.columns)\n\n1708\n\n\nThis way, if the tips data changes, we can quickly re-run the above cell to find the number of values in it, without having to manually type out the number of rows and columns.\nYou just learned:\n\nHow to read datasets into pandas DataFrames.\nThe index and columns attributes of DataFrames.\nHow to find the number of rows, columns, and number of data points in a DataFrame."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson09_Conditionals.html",
    "href": "Lessons/_Keys/KEY_Lesson09_Conditionals.html",
    "title": "Conditional Logic",
    "section": "",
    "text": "In the last lesson, we learned about logic with booleans. Booleans can be used to determine if a certain line of code should be run. How would we do this? This is where we can use something called an if statement.\nIf statements follow the following formula:\nif [condition]:\n    [code]\nThe condition is a boolean, and the code under the condition only runs if the condition is true. These are called if statements\nFor example, say we had a list that we wanted to print out, but we don’t want to print the list if it’s too long. We could run the following:\n\n# create a list called my_list containing the numbers 0 to 7\nmy_list = [0, 1, 2, 3, 4, 5, 6, 7]\n\n# write an if statement that only prints my_list if it has less than 10 items\nif len(my_list) &lt; 10:\n    print(my_list)\n\n[0, 1, 2, 3, 4, 5, 6, 7]\n\n\nLet’s test the conditional statement on its own to see what the result is:\n\n# print the boolean value of the condition in the if statement above\nlen(my_list) &lt; 10\n\nTrue\n\n\nWe see that the condition is True, the code below runs.\nWhat if we changed the condition above? How would this change our code?\n\n# write an if statement that only prints my_list if it has 10 or more items\nif len(my_list) &gt;= 10:\n    print(my_list)\n\nNothing happened! Let’s see why this is.\n\n# print the boolean value of the above if statement\nlen(my_list) &gt;= 10\n\nFalse\n\n\nIn this case, the condition is False, so the code within the conditional did not run.\nWhat if we wanted to run one block of code if the condition is True, and a different line of code if the condition is False? In other words, what if we wanted to run one block of code if our list has less than 10 items, and another block of code if the list has more than 10? This is where we use if/else.\nAn if/else looks like this:\nif [condition]:\n  [command 1]\nelse:\n  [command 2]\nThe first two lines should look familiar; it’s an if statement, which we just used! But after the if statement, we write else: and then some more python code. The code that comes after else: will run if the value of condition is false.\nLet’s see how this works! Let’s write code that prints my_list if it has less than 10 items, and otherwise prints a message letting us know the list is too long to print.\n\n# write an if/else statement that prints my_list if my_list has less than 10 items\n# and if my_list has 10 or more items, prints a message\nif len(my_list) &lt; 10:\n    print(my_list)\nelse:\n    print(\"The list is too long to print!\")\n\n[0, 1, 2, 3, 4, 5, 6, 7]\n\n\nBecause the list has less than 10 items, the list printed. But let’s say we added more items to the list, making it longer than 10 items.\n\n# append the numbers 8, 9, 10, and 11 to my_list\nmy_list.append(8)\nmy_list.append(9)\nmy_list.append(10)\nmy_list.append(11)\n\n\n# print the length of my_list\nlen(my_list)\n\n12\n\n\nNow, the length of my_list is above 10. How would the above line of code run now?\n\n# copy and paste the if/else statement we just wrote\nif len(my_list) &lt; 10:\n    print(my_list)\nelse:\n    print(\"The list is too long to print!\")\n\nThe list is too long to print!\n\n\nWhat if there were more than two different conditions? Using if/elif/else statements, we can command Python to run different code for any number of conditions. An if/elif/else statement looks like this:\nif [condition 1]:\n  [command 1]\nelif [condition 2]:\n  [command 2]\nelse:\n  [command 3]\n  \n[more python code]\nHow does Python run this code? First it checks to see if condition 1 is true. If it is, then it runs command 1, skips command 2 and command 3, then continues running whatever code that comes after the if/elif/else.\nIf condition 1 is false, but condition 2 is true, then Python runs command 2, skips command 3, and continues with the code that comes after the if/elif/else.\nFinally, if condition 1 AND condition 2 are both false, then command 3 runs, and continues with the code that comes after the if/elif/else.\nPython is doing a lot to make these statements work! Here is a diagram of how these statements work: \nWe can do a lot of really powerful things with if/elif/else statements! Let’s start by writing code that does the following: - If my_list has less than 10 items, print a message saying the list is “short” - If my_list has at least 10 items, but fewer than 15 items (so 10, 11, 12, 13, or 14 items), print a message saying the list is “medium” - Otherwise, print a message saying the list is “long”\n\n# use if/elif/else to print the length of my_list\nif len(my_list) &lt; 10:\n    print(\"This list is short\")\nelif len(my_list) &gt;= 10 and len(my_list) &lt; 15:\n    print(\"This list is medium length\")\nelse:\n    print(\"This list is really long!\")\n\nThis list is medium length\n\n\nSo what happened here? my_list is 12 items long. We got to the first if statement, and because the length was not less than 10, we did not execute the line that says This list is short. The next line tests if the length is between 10 and 15. This conditional is true, so it executes the line saying This list is medium length. Because we got to this line, we skip the else statement.\nBut what if our list was longer? Then what would happen?\n\n# append numbers 12, 13, and 14 to my_list\nmy_list.append(12)\nmy_list.append(13)\nmy_list.append(14)\nmy_list.append(15)\n\n\n# print the length of my_list\nlen(my_list)\n\n16\n\n\nLet’s copy and paste our if/elif/else statement from before and see how our code works now that my_list is longer!\n\n# copy and paste if/elif/else from before\nif len(my_list) &lt; 10:\n    print(\"This list is short\")\nelif len(my_list) &gt;= 10 and len(my_list) &lt; 15:\n    print(\"This list is medium length\")\nelse:\n    print(\"This list is really long!\")\n\nThis list is really long!\n\n\nGreat job! You just learned how to use conditionals in Python. You learned: - How to use a boolean to only execute code under certain conditions using if statements - How to further control how code runs using if/else and if/elif/else statements."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html",
    "title": "Writing Functions",
    "section": "",
    "text": "Remember: - You’ve already used lots of built-in functions in python. Examples are print() and sum(). Can you think of others? - Functions take an input (arguments) and return an output.\nGuess what? You can also make your own functions! Why would you want to do this? - Have you ever copied and pasted code because you want to reuse it but with different data or in a slightly different way? If so, you might want to make that code into a function! - Using functions also makes your code much easier to read."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#anatomy-of-a-function",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#anatomy-of-a-function",
    "title": "Writing Functions",
    "section": "Anatomy of a Function",
    "text": "Anatomy of a Function\nFunctions have an input and an output. We provide the input, and then the function does things to generate the output. Another way to put this is functions take arguments (i.e. input) and return an output.\n# Anatomy of a function\ndef my_function(input):\n    # do things to input\n    return(output)\nLet’s take a look at a few different analogies to get a better idea of what functions are."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#function-analogies",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#function-analogies",
    "title": "Writing Functions",
    "section": "Function Analogies",
    "text": "Function Analogies\n\n\n\n\n\n\n\n\n\n“Function” name\nInput: what “function” takes\nUnder the hood: what “function” does\nOutput: what “function” returns\n\n\n\n\nVending machine\nMoney & snack choice\nSome computational/mechanical process\nSnack\n\n\nGoogle maps\nStart & end location\nFinds fastest route\nDirections for fastest route\n\n\n\nNow let’s try a real example."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#writing-and-using-a-simple-function",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#writing-and-using-a-simple-function",
    "title": "Writing Functions",
    "section": "Writing and using a simple function",
    "text": "Writing and using a simple function\nLet’s write a function called power that calculates the power of two numbers (a base and an exponent). It takes two numbers - a base and an exponent - and returns the base raised to the exponent. It’s important to document what your function does so other people can use it.\n\n# write function to find power of two numbers\ndef power(base, exponent):\n    # find power of base raised to exponent\n    # example: power(3,2)\n    p = base ** exponent\n    return p\n\nNow let’s test our function out! You can use any two numbers as the input to the function.\nRemember that each input for a function is called an argument. Each argument is given a variable name which allows us to use that input in our function. If you include the argument names, then you can include the numbers in any order you want:\n\n# using numbers as input\n# explicitly name arguments (order doesn't matter)\nprint(power(exponent = 2, base = 3))\nprint(power(base = 3, exponent = 2))\n\n9\n9\n\n\nHere, you should get the same answer for both.\nIf you decide to just include the numbers and not the names, then you have to make sure the numbers are in the correct order (i.e. the order in which the arguments are defined in the function - base first and exponent second):\n\n# using numbers as input\n# using the order of the arguments (order matters)\nprint(power(3,2))\nprint(power(2,3))\n\n9\n8\n\n\nHere, you should get a different answer for each. What is the base and what is the exponent for each of these examples?\nFor the first example, base is 3 and exponent is 2. For the second example, base is 2 and exponent is 3.\nYou can also use variables as input:\n\n# using variables as input\nb = 3\ne = 2\npower(b,e)\n\n9\n\n\nJust like built-in functions, you can also save the output of the function to a variable:\n\n# saving it to a variable\np = power(b,e)\nprint(p)\n\n9\n\n\nLet’s try other inputs, because that’s the real power of using functions (no pun intended).\n\npower(10,3)\n\n1000\n\n\nFeel free to try out other inputs as well!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#scope-of-argument-variables",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#scope-of-argument-variables",
    "title": "Writing Functions",
    "section": "Scope of argument variables",
    "text": "Scope of argument variables\nThe input arguments in the power function are base and exponent. These variables are defined only within the context of the function, not in the global environment. So we can print out base and exponent within the function, but if we try to print out either of these variables outside of the function, we will get an error (unless it’s defined in your global environment). Let’s try it out. What do you think happens if we try to print out base outside of the function?\n\n# print base outside of function (uncomment this to run)\n#print(base)\n\nIt doesn’t exist! This is called the scope of the variables - they can only be seen in the function, but not in the global environment."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#optional-arguments-with-default-values",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#optional-arguments-with-default-values",
    "title": "Writing Functions",
    "section": "Optional arguments with default values",
    "text": "Optional arguments with default values\nIf you want something to normally happen, but have the option for it to not happen, you can use optional arguments. For instance, you may want the power function to, by default, square the base variable (i.e. have exponent=2), but give the user the option to change it if they want. In this case, if the user doesn’t specify a value for exponent, the function uses the default option, which is defined where you define the argument in the function:\n\n# write function to find power of two numbers\ndef power(base, exponent=2):\n    # find power of base raised to exponent\n    # example: power(3,2)\n    p = base ** exponent\n    return p\n\n# default\nprint(power(2))\n# change exponent\nprint(power(2, 3))\n\n4\n8\n\n\nNote: You have to include arguments that don’t have default values. If not, then you get an error because there is nothing stored in that variable in the function, so the code inside can’t be executed:\n\n# what happens if you run this line? (uncomment it)\n#power(exponent=1)\n\nWhat argument are we missing here?\nWe’re missing the base argument."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#argument-variable-names",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#argument-variable-names",
    "title": "Writing Functions",
    "section": "Argument variable names",
    "text": "Argument variable names\nAnother important note is that it doesn’t matter what we call the input arguments. Right now, the input arguments are base and exponent. Let’s try changing them to something totally random, maybe pizza and pie. Pizza and pie probably doesn’t have anything to do with the input (two numbers), but the computer doesn’t know that!\n\n# use pizza as variable name\n#  function to find power of two numbers\ndef power(pizza, pie):\n    # find power of base raised to exponent\n    # example: power(3,2)\n    return pizza ** pie\n    \n# test it out\npower(3,2)\n\n9\n\n\nAlthough you can name your input arguments anything since the computer doesn’t care, you actually want to name them something useful so that people reading the code (including your future self!) can more easily understand what’s going on. Thinking of good variable names can be hard, but it’s important!\nNice job! You’ve learned so much about writing functions."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson19_Functions.html#summary-of-functions",
    "href": "Lessons/_Keys/KEY_Lesson19_Functions.html#summary-of-functions",
    "title": "Writing Functions",
    "section": "Summary of functions",
    "text": "Summary of functions\n\nFunctions are used to make your code easier to read and reuse.\nFunctions take an input (arguments) and return an output.\nArguments are variables that only exist inside the function.\nYou can have default arguments for your function.\nDocument your function well so other people know how to use it!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson22_Basic_Stats_II_Percents.html",
    "href": "Lessons/_Keys/KEY_Lesson22_Basic_Stats_II_Percents.html",
    "title": "Basic Statistics I: Percents",
    "section": "",
    "text": "A percentage is a number or ratio expressed as a fraction of 100. We’ll do some examples together to learn how to calculate percentages.\nExample 1: For a basket of 18 fruits, there are 5 apples, 3 bananas, 6 peaches, and 4 oranges.\nWhat percentage of fruits are apples?\n\n# Calculate percentage for apples\n5/18*100\n\nWhat percentage of fruits are oranges and peaches?\n\n# Calculate percentage for oranges and peaches\n(4+6)/18*100\n\nExample 2: Let’s learn to calculate percentages by using real world data. We will work with a dataset of Boston housing prices.\n\n# Import the load_boston method \nfrom sklearn.datasets import load_boston\n\n\n# Import pandas, so that we can work with the data frame version of the Boston housing data\nimport pandas as pd\n\n\n# Load the dataset of housing prices in Boston, and convert to\n# a data frame format so it's easier to view and process\nboston = load_boston()\nboston_df = pd.DataFrame(boston['data'], columns = boston['feature_names'])\nboston_df['PRICE'] = boston.target\nboston_df\n\nCHAS is the indicator variable we used last week, where 1 indicates that the property (tract) is on the Charles River and 0 means otherwise.\nWhat percentage of the tracts bound the Charles River? We’ll see how to do this using the query method AND using boolean indexing.\n\n# Determine number of tracts that bound the Charles River two ways:\n# (1) with the query function\nnum_bound_river = len(boston_df.query(\"CHAS == 1\"))\nnum_bound_river\n\n\n# (2) using boolean indexing\nnum_bound_river = sum(boston_df[\"CHAS\"] == 1)\nnum_bound_river\n\nHow do these two methods give the same answer?\n\n# Determine the total number of tracts in the dataset\ntotal_num = len(boston_df)\n\n# Now calculate the percentage of tracts that bounds the Charles River.\nnum_bound_river/total_num*100\n\n\nimport numpy as np\n\nWhat percentage of tracts have a median price less than $10,000?\n\n# Determine number of tracts that cost less than $10,000\nnum_cost_less_10k = sum(boston_df[\"PRICE\"] &lt; 10)\n\n# Calculate the percentage of tracts that cost less than $10k.\nnum_cost_less_10k/total_num*100\n\nWhat percentage of tracts have a median price between $10,000 and $30,000?\n\n# Make an array of booleans with cost greater than $10,000 AND less than $30,000\nbetween_10k_and_30k = (boston_df[\"PRICE\"] &gt; 10) and (boston_df[\"PRICE\"] &lt; 30)\n\n# Determine number of tracts that cost between $10,000 and $30,000\nnum_between_10k_and_30k = sum(between_10k_and_30k)\n\n# Calculate the percentage of tracts between $10,000 and $30,000\nnum_between_10k_and_30k/total_num*100\n\nGood work! You just learned about how to calculate percentages in Python!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson07_2D_Lists_Indexing.html",
    "href": "Lessons/_Keys/KEY_Lesson07_2D_Lists_Indexing.html",
    "title": "2D Lists Indexing",
    "section": "",
    "text": "Remember: - Lists can be used to group different values together - it’s just a collection of things. - You can make a list in Python by putting different things in a box of brackets [] separated by commas - You can make lists of lists, which are called 2D lists\nHere we’re going to learn how to index lists of lists. Let’s recreate our 2D list of food:\n\n# create 2D list\nfood = [['apple', 'banana', 'grape', 'mango'], \n        ['lettuce','carrot','cucumber','beet'], \n        ['chicken', 'beef', 'fish', 'pork']]\n\n# print 2D list along with its length\nprint(food)\nprint(len(food))\n\n[['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet'], ['chicken', 'beef', 'fish', 'pork']]\n3\n\n\nLike we saw in the last lesson, the length of the food list (3) is the number of 1D lists that make up the 2D list. The fruit list is the first element in food. To get this first element from food, we do it the same way we would in a 1D list:\n\n# get the fruit list from the food list\nfood[0]\n\n['apple', 'banana', 'grape', 'mango']\n\n\nIn this way, we can think of the list food as a 1D list, where each element is another list. As we saw in the last command, we can reference the first sublist from food using food[0].\nKnowing this, how can we get the length of the first list within food?\n\n# print length of the first index of food\nlen(food[0])\n\n4\n\n\nThinking back to indexing 1D lists, how do you think we can get the lists fruit and vegetables from the list food?\n\n# get fruit and vegetables from the list\nfood[0:2]\n\n[['apple', 'banana', 'grape', 'mango'],\n ['lettuce', 'carrot', 'cucumber', 'beet']]\n\n\nWhat if we want to get the value 'mango' from our list? We can first save the first element from food to a variable fruit, and then index the fruit list:\n\n# get the fruit list from food and save it in the variable fruit\nfruit = food[0]\n\n# print the fruit list to make sure you got what you wanted\nprint(fruit)\n\n# get mango from the fruit list\nfruit[3]\n\n['apple', 'banana', 'grape', 'mango']\n\n\n'mango'\n\n\nWe can also get the value 'mango' from our list in one line! To do this, we can just index food twice. The first index is to get the fruit list, and the second index is to get 'mango' from the fruit list:\n\n# get mango by indexing the food list twice\nfood[0][3]\n\n'mango'\n\n\nHow can you get 'carrot' from the food 2D list?\n\n# get carrot from the food 2D list\nfood[1][1]\n\n'carrot'\n\n\nNow, try getting 'fish' and 'pork' from the food 2D list:\n\n# get fish and pork from the food 2D list\nfood[2][2:4]\n\n['fish', 'pork']\n\n\nFinally, let’s make a new list called favorites with your favorite food within each list in food. Print it out afterwards to make sure you did what you want!\n\n# make a list of your favorite fruit, vegetable, and meat\nfavorites = [food[0][3], food[0][2], food[2][1]]\n\n# print favorite\nprint(favorites)\n\n['mango', 'grape', 'beef']\n\n\nNice job! You just learned how to index 2D lists in Python!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html",
    "href": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html",
    "title": "Lesson 24: Statistical Significance",
    "section": "",
    "text": "Statistical significance is one of the most important parts of statistics—it’s what allows us to make conclusions about our data.\nBut first, what does statistical significance mean? - Definition: statistical significance is the likelihood that the difference between a given variation and the baseline is not due to random chance. Statistical significance is calculated using different mathematical formulas, which we’ll see later in the lesson.\nWe can determine if our difference is statistically significant by comparing our calculated significance value to the significance level. - Definition: statistical significance level is the level at which one can accept whether an event or difference is statistically significant, or not due to random chance. This term is denoted as \\(\\alpha\\). The customary significance level is 5%. - Definition: confidence level is the opposite of significance level, where the confidence level indicates the degree of confidence that the result did not occur by chance. This term is calculated as \\(1-\\alpha\\). The customary confidence level is 95%. - For example, if you run an A/B testing experiment with a significance level (\\(\\alpha\\)) of 5%, this means that if you determine a winner, you can be 95% confident (\\(1-\\alpha\\)) that the observed results are real and not an error caused by randomness. But there is a 5% chance that you could be wrong.\nNext, when is statistical significance most practically used? - It is used in statistical hypothesis testing. - For example, you want to know whether or not having a healthier diet will result in lower levels of C-Reactive protein, and hence fewer incidents of infection and inflammation.\nWhat is hypothesis testing? - Definition: hypothesis testing is the use of statistic to determine the probability that a given hypothesis is true. - There are two types of statistical hypotheses. - Definition: The null hypothesis, denoted by \\(H_o\\), is usually the hypothesis that sample observations result purely from chance. The most common null hypothesis is that the variable in question is equal to 0, i.e. this indicates that the variable has zero effect on the outcome of interest. - Definition: The alternative hypothesis, denoted by \\(H_1\\) or \\(H_a\\), is the hypothesis that sample observations are influenced by some non-random cause. A common alternative hypothesis is that the variable in question has a non-zero effect on the outcome."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html#an-introduction-to-hypothesis-testing",
    "href": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html#an-introduction-to-hypothesis-testing",
    "title": "Lesson 24: Statistical Significance",
    "section": "",
    "text": "Statistical significance is one of the most important parts of statistics—it’s what allows us to make conclusions about our data.\nBut first, what does statistical significance mean? - Definition: statistical significance is the likelihood that the difference between a given variation and the baseline is not due to random chance. Statistical significance is calculated using different mathematical formulas, which we’ll see later in the lesson.\nWe can determine if our difference is statistically significant by comparing our calculated significance value to the significance level. - Definition: statistical significance level is the level at which one can accept whether an event or difference is statistically significant, or not due to random chance. This term is denoted as \\(\\alpha\\). The customary significance level is 5%. - Definition: confidence level is the opposite of significance level, where the confidence level indicates the degree of confidence that the result did not occur by chance. This term is calculated as \\(1-\\alpha\\). The customary confidence level is 95%. - For example, if you run an A/B testing experiment with a significance level (\\(\\alpha\\)) of 5%, this means that if you determine a winner, you can be 95% confident (\\(1-\\alpha\\)) that the observed results are real and not an error caused by randomness. But there is a 5% chance that you could be wrong.\nNext, when is statistical significance most practically used? - It is used in statistical hypothesis testing. - For example, you want to know whether or not having a healthier diet will result in lower levels of C-Reactive protein, and hence fewer incidents of infection and inflammation.\nWhat is hypothesis testing? - Definition: hypothesis testing is the use of statistic to determine the probability that a given hypothesis is true. - There are two types of statistical hypotheses. - Definition: The null hypothesis, denoted by \\(H_o\\), is usually the hypothesis that sample observations result purely from chance. The most common null hypothesis is that the variable in question is equal to 0, i.e. this indicates that the variable has zero effect on the outcome of interest. - Definition: The alternative hypothesis, denoted by \\(H_1\\) or \\(H_a\\), is the hypothesis that sample observations are influenced by some non-random cause. A common alternative hypothesis is that the variable in question has a non-zero effect on the outcome."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html#now-lets-try-it-ourselves",
    "href": "Lessons/_Keys/KEY_Lesson24_Basic_Stats_IV_Significance.html#now-lets-try-it-ourselves",
    "title": "Lesson 24: Statistical Significance",
    "section": "Now, let’s try it ourselves!",
    "text": "Now, let’s try it ourselves!\nWe will work with the diabetes dataset to learn how to apply the procedure of hypothesis testing to real world data. - This dataset contains 442 diabetes patients with data on age (AGE), sex (SEX), body mass index (BMI), mean arterial blood pressure (MAP), six blood serum measurements (TC, LDL, HDL, TCH, LTG, and GLU), and a quantitative measure of disease progression (Y).\n\n# Import pandas, so that we can import the diabetes dataset and work with the data frame version of this data\nimport pandas as pd\n\n\n# Set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# This is where the file is located\nfilename = path + 'SampleData/diabetes.csv'\n\n\n# Load the diabetes dataset into a DataFrame\ndiabetes_df = pd.read_csv(filename)\ndiabetes_df\n\n\n\n\n\n\n\n\nAGE\nSEX\nBMI\nMAP\nTC\nLDL\nHDL\nTCH\nLTG\nGLU\nY\n\n\n\n\n0\n59\n2\n32.1\n101.00\n157\n93.2\n38.0\n4.00\n4.8598\n87\n151\n\n\n1\n48\n1\n21.6\n87.00\n183\n103.2\n70.0\n3.00\n3.8918\n69\n75\n\n\n2\n72\n2\n30.5\n93.00\n156\n93.6\n41.0\n4.00\n4.6728\n85\n141\n\n\n3\n24\n1\n25.3\n84.00\n198\n131.4\n40.0\n5.00\n4.8903\n89\n206\n\n\n4\n50\n1\n23.0\n101.00\n192\n125.4\n52.0\n4.00\n4.2905\n80\n135\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n437\n60\n2\n28.2\n112.00\n185\n113.8\n42.0\n4.00\n4.9836\n93\n178\n\n\n438\n47\n2\n24.9\n75.00\n225\n166.0\n42.0\n5.00\n4.4427\n102\n104\n\n\n439\n60\n2\n24.9\n99.67\n162\n106.6\n43.0\n3.77\n4.1271\n95\n132\n\n\n440\n36\n1\n30.0\n95.00\n201\n125.2\n42.0\n4.79\n5.1299\n85\n220\n\n\n441\n36\n1\n19.6\n71.00\n250\n133.2\n97.0\n3.00\n4.5951\n92\n57\n\n\n\n\n442 rows × 11 columns\n\n\n\nWe are interested in understanding whether there are differences in diabetes progression by sex, i.e. is the disease progression different for males vs. females?\n1. Formulate the null hypothesis and the alternative hypothesis. - Null hypothesis: There is NO difference in disease progression between male and female. - Alternative hypothesis: There is a difference in disease progression by sex.\n\n# Import numpy \nimport numpy as np\n\n\n# Look at all unique values for sex\nnp.unique(diabetes_df[\"SEX\"])\n\narray([1, 2])\n\n\nMales are indicated by “1” for the variable “SEX”, while females are indicated by “2”.\n\n# Define a vector of the disease progression for males and name it progression_male\ndiabetes_male = diabetes_df.query('SEX == 1')\nprogression_male = diabetes_male['Y']\n\n# Define a vector of the disease progression for females and name it progression_female\ndiabetes_female = diabetes_df.query('SEX == 2')\nprogression_female = diabetes_female['Y']\n\n2. Identify and compute a test statistic that can be used to reject or fail to reject the null hypothesis. - As we are working with two independent samples, we will use the two-sample t-test and use the t-statistic.\n3. Compute the test statistic and p-value.\n\n# Import stats methods to help calculate the t-statistic and p-value\nfrom scipy import stats\n\n\n# Run a Student's t-test with the method ttest_ind \nt_statistic, p_value = stats.ttest_ind(progression_male, progression_female)\n\n# Print out the test statistic and p-value\nprint(\"t-statistic = \" + str(t_statistic))\nprint(\"p-value = \" + str(p_value))\n\nt-statistic = -0.9041147550244715\np-value = 0.3664292946519826\n\n\n4. Compare the p-value to an acceptable significance value, \\(\\alpha\\) and compare the test statistic to acceptable critical value(s). If p-value \\(&lt; \\alpha\\) and the test-statistic \\(\\geq\\) +critical value or test-statistic \\(\\leq\\) -critical value, that the observed effect is statistically significant, the null hypothesis is rejected, and the alternative hypothesis is valid.** - p-value \\(= 0.36 \\gt 0.05\\), so we fail to reject the null hypothesis. - t-statistic \\(= -0.90 \\gt -1.96\\), so this reaffirms that we fail to reject the null hypothesis. - Interpretation: There is no significant difference in diabetes progression between males and females.\nCongratulations! You know how to conduct hypothesis testing with a Student’s t-test!\nMisconceptions about statistical significance: 1. A low p-values implies a large effect. - Proper interpretation: A low p-value indicates that the outcome would be highly unlikely if the null hypothesis were true. A lower p-value does not usually equate to a large effect. There are cases when a low p-value can occur with a small effect. 2. A non-significant outcome (AKA high p-value) means that the null hypothesis is probably true. - Proper interpretation: A non-significant outcome (AKA high p-value) means that the data do not conclusively demonstrate that the null hypothesis is false. This is why we should say, “When the p-value &gt; 0.05, we fail to reject the null hypothesis.” We should not say that we accept the null hypothesis when the p-value &gt; 0.05.\nAwesome work! You just learned about statistical significance! You learned:\n\nImportant definitions such as statistical significance, statistical significance level, null hypothesis, alternative hypothesis, test statistic, p-value, and critical values.\nTo conduct hypothesis testing.\nTo determine critical values to compare with your own test statistic in order to decide whether a variable has an effect on the outcome of interest.\nTo implement a Student’s t-test."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson02_HelloWorld_Variables.html",
    "href": "Lessons/_Keys/KEY_Lesson02_HelloWorld_Variables.html",
    "title": "Hello World",
    "section": "",
    "text": "Python is a general-purpose, versatile and popular programming language. It’s great as a first language because it is concise and easy to read, and it is very valuable because it can be used for everything from web development to software development and scientific applications. In fact, python is the world’s fastest growing and most popular programming language used by software engineers, analysts, data scientists, and machine learning engineers alike!\nBelow we will write our first line of code! We will make Python “come alive” by sending a greeting to the world on the screen. To do this, we will use a command called print. This command tells Python to print the input text to the screen. Let’s begin!\n\n# command Python to print the string \"Hello World\"\nprint(\"Hello World\")\n\nHello World\n\n\nAmazing! You just wrote your first line of Python code. Pretty easy right?\nPython can also be used as a calculator. Let’s use Python to do some simple addition and subtraction below.\n\n# command Python to add 3 + 19\n3 + 19\n\n22\n\n\n\n# command Python to subtract 91 - 28\n91 - 28\n\n63\n\n\nWe can also do multiplication and division with Python. The symbol for multiplication is * and the symbol for division is /. Let’s use Python to do some multiplication and division below!\n\n# command Python to multiply 6 x 13\n6*13\n\n78\n\n\n\n# command Python to divide 98 / 4\n98/4\n\n24.5\n\n\nEasy right?\nNow let’s say we wanted to add the result of 6 x 13 to the result of 98 / 4. Python follows the standard order of operations: PEMDAS, so we could do it this way:\n\n(6*13) + 98/4\n\n102.5\n\n\nBut what if we wanted to save ourselves some time? We already typed those equations earlier, so instead of typing the same equations over and over, we can store the results in variables.\nVariables are words or symbols that are used to represent some value. They’re kind of like boxes that you can store things in. Variables in Python are used very similarly to variables that you have probably seen in math class. For example, if you assign x = 5 and compute 9 + x = _ ?\nExactly - 14! Let’s see some examples of how this works in code.\n\n# assign the value of 6*13 to the variable result1\nresult1 = 6*13\n\n# assign the value of 98/4 to the variable result2\nresult2 = 98/4\n\nYou might notice that after running the above cell, nothing was printed to the screen. This is because our code commanded Python only to assign the values to the variable names, not to print to the screen. This is a good reminder that Python is very literal, and will only do exactly what we command it to do.\nIf we want to see the values assigned to each variable, we can use the print command we learned above to print them out.\n\n# print the value stored in the variable result1\nprint(result1)\n\n# print the value stored in the variable result2\nprint(result2)\n\n78\n24.5\n\n\nCool! Now we’ve seen that the print function in Python can accept different inputs, such as a string (as in \"Hello World\"), or a variable name (as in result1). We see that when we use the variable name result1, it prints the value of that variable, not the variable name itself. We will talk more about how we differentiate strings from variable names in the next lesson.\nNow, let’s revisit our initial objective. We wanted to add the result of 6 x 13 to the result of 98 / 4, but this time let’s use our variables that contain each of our values.\n\n# command Python to add the result of 6 x 13 to the result of 98 / 4 using our variable names\nresult1 + result2\n\n102.5\n\n\nFantastic! You’ve just solved your first set of problems using Python code! You may not realize it, but in just a few minutes, you’ve already learned how to: * Use built-in Python functions (print) * Use mathematical operators to perform calculations (+ - * /) * Assign values to variables * Use variables in mathematical equations\nNow let’s continue to practice these skills with your partners!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html",
    "href": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html",
    "title": "Basic Statistics III: Correlations",
    "section": "",
    "text": "Now that we have learned how to compute basic statistics on single variables, we will look at how to measure the relationship between two variables with correlations."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html#background-on-correlations",
    "href": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html#background-on-correlations",
    "title": "Basic Statistics III: Correlations",
    "section": "Background on Correlations",
    "text": "Background on Correlations\nA correlation is a measure of the statistical relationship between two variables. Correlation values range from -1 to 1, where the magnitude (a.k.a. absolute value) of the correlation indicates the strength of the relationship and the sign of the correlation represents the direction of the relationship. The correlation value is often denoted with the variable r, so that is what we will use here.\nThe figure below shows some examples of perfect, strong and weak correlations between two variables in both the positive and negative directions. As you can notice, perfect correlation between two variables corresponds to |r| = 1. Stronger correlations have r values with magnitude closer to 1, and weaker correlations have r values with magnitude closer to 0. When r = 0, there is no linear relationship between the two variables.\nWhat do you notice about the difference between positive correlations and negative correlations?"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html#computing-correlations",
    "href": "Lessons/_Keys/KEY_Lesson23_Basic_Stats_III_Correlations.html#computing-correlations",
    "title": "Basic Statistics III: Correlations",
    "section": "Computing Correlations",
    "text": "Computing Correlations\nLet’s practice with some test data\n\nimport numpy as np\n\ndata_1 = np.array([1,2,3,4,6,7,8,9])\ndata_2 = np.array([2,4,6,8,10,12,13,15])\ndata_3 = np.array([-1,-2,-2,-3,-4,-6,-7,-8])\n\nBased on how we’ve constructed our variables, what do you expect the correlation values to be?\nVisualizing the relationships may help us understand this better:\nNow, let’s calculate the actual correlatiton values. We will use the corrcoef function from numpy to calculate correlation values.\n\nr = np.corrcoef([data_1,data_2,data_3])\nprint(r)\n\n[[ 1.          0.99535001 -0.9805214 ]\n [ 0.99535001  1.         -0.97172394]\n [-0.9805214  -0.97172394  1.        ]]\n\n\nDoes the output of this function make sense to you?\nThis function returns a correlation matrix, which always has 1’s along the diagonal and is symmetric (i.e. same values above the diagonal as below). This is so you can compute correlations of more than one variable at a time. The correlation values in the matrix above correspond to the following relationships:\nBased on these plots, can you figure out why all correlation matrices have: * 1’s on the diagonal? (Talk about how the diagonal is always the correlation of one variable with itself, which will always be perfect correlation) * symmetric entries? (Talk about how the corr(data1, data2) == corr(data2, data1))\nSo, the output of the corrcoef function from above is a correlation matrix follows the following form:\n\n\n\n_\ndata_1\ndata_2\ndata_3\n\n\n\n\ndata_1\n1\n0.995\n-0.980\n\n\ndata_2\n0.995\n1\n-0.971\n\n\ndata_3\n-0.980\n-0.971\n1\n\n\n\nNow, it should be clear why a correlation matrix always has 1’s along the diagonal - every variable has perfect positive correlation with itself. Furthermore, it is symmetric because the correlation of data_1 & data_2 is the same as the correlation of data_2 & data_1.\nNow that we understand our output, let’s check the correlations between the variables in the iris dataset.\n\n# load and preview iris\nimport pandas as pd\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\niris = pd.read_csv(path + 'SampleData/iris.csv')\niris.head()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n# find correlations between sepal_length, sepal_width, petal_length, petal_width\n# HINT: Think back to how we subset certain columns in pandas\niris_corrs = np.corrcoef(iris.iloc[:,0:4], rowvar=False)\nprint(iris_corrs)\n\n[[ 1.         -0.11756978  0.87175378  0.81794113]\n [-0.11756978  1.         -0.4284401  -0.36612593]\n [ 0.87175378 -0.4284401   1.          0.96286543]\n [ 0.81794113 -0.36612593  0.96286543  1.        ]]\n\n\nYou’ll notice this time we included the rowvar parameter - this is because, by default, the corrcoef function expects that each row represents a variable, with observations in the columns. In our case it is the opposite - each column represents a variable, while the rows contain observations. So here we change the value of rowvar from the default True to False.\nIn this lesson you learned:\n\nHow to measure the relationship between two variables\nThe difference between positive/negative correlations and strong/weak correlations\nHow to compute and interpret correlations for multiple variables\n\nNow, lets continue to practice!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson12_Functions_and_Methods.html",
    "href": "Lessons/_Keys/KEY_Lesson12_Functions_and_Methods.html",
    "title": "Functions and Methods",
    "section": "",
    "text": "Functions and methods are things that take an input, do something with that input, and then spit out an output. You’ve already been using functions and methods!\nExamples of functions: - print: prints the input out to the screen - len: finds the length of the input\nExample of a method: - append: appends elements to a list\nSo what’s the difference between functions and methods?\n\nFunctions can take lots of different object types as input. For example, print can take a variety of inputs including a variable, a string, a list, or numbers.\nMethods are special cases of functions, so everything that is true for functions is also true for methods (i.e. they can take a variety of input). However, methods can only be used on one specific type of variable. For example, append can only be used on lists (and not strings or numbers).\n\nDifferences in syntax (how we write it to use it): - The input to functions goes between parentheses after the name of function - Example: print(print_input)\n\nFor methods, the variable they operate on comes before the name of the method and is followed by a period (.). Then, any other input the method might require goes between the parentheses, similar to functions.\n\nExample: mylist.append(what_to_append)\n\n\nWe’re going to learn a few more functions and methods here!\nLet’s start by learning some functions and methods we can use with lists of numbers!\n\n# make a list of numbers\nnumbers = [10,2.3,-4,20,14,1,2,0,-3,1,-2,2,2,65.4,3,-23,123,43.1,32,57,32]\n\nWhat function can you use to find the length of this list? Use this function to find the length:\n\n# get the length of numbers\nlen(numbers)\n\n21\n\n\nIf you’re not sure how to use a function, you can use the function help to get more information about it. Here’s an example to find more information about length:\n\nhelp(len)\n\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n\n\nIt tells you that len takes an object and returns the number of items in the object.\nTo get the object type of numbers we can use the function type:\n\n# print the type of numbers\ntype(numbers)\n\nlist\n\n\nNice! It’s a list, just like we expected. What do you think the type is of the first element in numbers?\n\n# print the first element of numbers\nprint(numbers[0])\n\n# print the type of the first element of numbers\ntype(numbers[0])\n\n10\n\n\nint\n\n\nIt’s an integer. What about the type of the second element of numbers?\n\n# print the second element of numbers\nprint(numbers[1])\n\n# print the type of the second element of numbers\ntype(numbers[1])\n\n2.3\n\n\nfloat\n\n\nIt’s a float. This means it has a decimal place (so it’s not an integer).\nWe can also find the absolute value of a number. Print the third element and then print the absolute value of this number using the function abs:\n\n# print the third element of numbers\nprint(numbers[2])\n\n# print the type of the third element of numbers\nprint(abs(numbers[2]))\n\n-4\n4\n\n\nNow let’s find the minimum of the numbers list using the function min and the maximum of the numbers list using the function max:\n\n# print the minimum of the numbers list\nprint(min(numbers))\n\n# print the maximum of the numbers list\nprint(max(numbers))\n\n-23\n123\n\n\nWe can also find the sum of all of the numbers in numbers using the function sum:\n\n# print the sum of numbers\nprint(sum(numbers))\n\n377.8\n\n\nWhat if we want to find the mean of this list? If you remember from math class the formula for calculating a list is as follows:\n\nmean = sum_of_all_values/total_number_of_values\n\nHint: We can use the functions sum and len to do this.\n\n# save the mean of the numbers list to the variable avg\navg = sum(numbers)/len(numbers)\n\n# print avg\nprint(avg)\n\n17.99047619047619\n\n\nWhat if we want to round this number so there aren’t so many decimal places? We can use the function round to do this:\n\n# round avg\nprint(round(avg))\n\n18\n\n\nWhat if we want to include 2 decimal places when we round? We can use what’s called an argument to tell the function that we want to do this. First, let’s look at the help description for round:\n\nhelp(round)\n\nHelp on built-in function round in module builtins:\n\nround(...)\n    round(number[, ndigits]) -&gt; number\n    \n    Round a number to a given precision in decimal digits (default 0 digits).\n    This returns an int when called with one argument, otherwise the\n    same type as the number. ndigits may be negative.\n\n\n\nIt says that the default number of digits to round to is zero, but you can also give an argument (i.e. another input to the round function) to specify the number of digits. To add an argument, you put a comma after the input and then the argument. Let’s try it out!\n\n# print avg rounded to 2 decimal places\nprint(round(avg,2))\n\n17.99\n\n\nNice job! You just learned about functions in Python! You learned: - What functions and methods do - The difference between functions and methods - How to learn more about a certain function or method (using the help function) - New functions: max, min, sum, abs, round - Functions can take arguments that modify the output"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson05_Indexing.html",
    "href": "Lessons/_Keys/KEY_Lesson05_Indexing.html",
    "title": "Indexing",
    "section": "",
    "text": "To get values from a list, you use indexing.\nTo index a list, you use square brackets ([]) with a number (or numbers) in the brackets specifying which elements of the list you want.\nLet’s start with a list of fruit:\n\n# command Python to make a list and store it fruit\nfruit = ['apple', 'banana', 'grape', 'mango']\n\n# command Python to get the length of your list\nlen(fruit)\n\n4\n\n\nLet’s try getting the first element in the list:\n\n# command Python to print one element of your list\nprint(fruit[1])\n\nbanana\n\n\nIs this what you expected? If not, you’re not alone. The trick is that Python starts counting at zero!\nHere’s how you actually print the first element of the list:\n\n# command Python to print the first element of your list\nprint(fruit[0])\n\napple\n\n\nHow do you think we can print the element mango in the list?\n\n# command Python to print the element mango (2 ways)\nprint(fruit[3])\nprint(fruit[-1])\n\nmango\nmango\n\n\nWe can also get more than one element of a list:\n\n# command Python to get the first 3 elements of the list and save it to fruit_subset\nfruit_subset = fruit[0:3]\n\n# command Python to print the length of fruit_subset\nprint(len(fruit_subset))\n\n3\n\n\n\n# command Python to print fruit_subset\nprint(fruit_subset)\n\n['apple', 'banana', 'grape']\n\n\nNote that in Python, the first number in indexing is inclusive and the second number is exclusive. In other words, you get the element corresponding to the first number (0), but not the element corresponding to the last number (3). This is like [0,3) in math.\nLet’s print the second and third elements of the list:\n\n# command Python to get the 2nd and 3rd elements of the list\nprint(fruit[1:3])\n\n['banana', 'grape']\n\n\nNow let’s get the second and fourth elment from the list:\n\n# command Python to print the second and fourth elements from the list\nprint([fruit[1],fruit[3]])\n\n['banana', 'mango']\n\n\nYou can also get letters in a string by indexing!\n\n# command Python to store the first element of fruit (apple) in the variable a\na = fruit[0]\n# command Python to print the first 3 letters in apple\nprint(a[0:3])\n\napp\n\n\nYou just learned how to: * Get an element from a list or string * Get multiple elements from a list or string\nNow it’s time to practice what you learned!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson10_Loops1.html",
    "href": "Lessons/_Keys/KEY_Lesson10_Loops1.html",
    "title": "Loops",
    "section": "",
    "text": "Earlier, we learned about lists, and how they are super useful ways to store a lot of information in one variable. In this lesson we will learn about the for loop, a powerful tool to perform commands on items in a list.\nSuppose you had a list of animals and you wanted to print your list so that each item was on its own line.\n\n# create a list of animals\nanimals = ['turtle', 'penguin', 'platypus', 'zebra', 'giraffe']\n\n\n# print animals\nprint(animals)\n\n['turtle', 'penguin', 'platypus', 'zebra', 'giraffe']\n\n\nWe see that using the print function on our list prints all the values in brackets and separated by commas on the same line. This isn’t quite what we want. But, Python has a useful tool we can use for this problem called the for loop.\nA for loop has three key parts:\nfor [item] in [list of items]:\n  [command]\nA for loop will look at each individual item in the list it is given, then run the given command on each item.\nLet’s take a look at how we might use a for loop to solve our problem\n\n# create a for loop to print each item in our animals list\nfor animal in animals:\n    print(animal)\n\nturtle\npenguin\nplatypus\nzebra\ngiraffe\n\n\nA Python function that is really useful when writing loops is the range function. range creates a list of numbers between the two numbers given to the function.\nIf we use the output of the range function in a for loop, then whatever code we write in our for loop will execute on each number between the two parameters of range.\n\n# use a for loop to print each number in range(0,5)\nfor value in range(0,5):\n    print(value)\n\n0\n1\n2\n3\n4\n\n\nThe range function can be useful when working with lists. To iterate over a whole list, we can use the range function with 0 as the start and the list length as the end. Let’s test this out with our animals list!\n\n# use a for loop and the range function to print every animal in the list animals\nfor index in range(0,len(animals)):\n    print(animals[index])\n\nturtle\npenguin\nplatypus\nzebra\ngiraffe\n\n\nWe don’t just have to use range, though. Let’s say we only wanted to print out some of the animals in our list. We could give our for loop a list of indices in our list we wanted to print\n\n# create a list called indices containing indices of the list animals to print\nindices = [0,1,4]\n\n# use a for loop to only print animals at the above indices\nfor index in indices:\n    print(animals[index])\n\nturtle\npenguin\ngiraffe\n\n\nWe can also put loops inside of each other. These are called nested for loops. Let’s see what this might look like:\nfor [item1] in [list1]:\n  for [item2] in [list2]:\n    [command using item1 and item2]\nIt is very important to remember that item1 and item2 have different names. Otherwise, Python might not know which list you want to iterate through, and your code will not run quite how you expected!\nNested for loops are useful in a lot of contexts, but they are especially useful when we have a list inside of a list. This is often referred to as a 2D list.\n\n# create a list of names for our animals (remember, we have 5 animals!)\nnames = ['Shelly', 'Tuxedo', 'Perry', 'Stripes', 'Bob']\n\n# create a 2D list combining animals and names\nzoo = [animals, names]\n\n# print zoo so we can look at its structure\nprint(zoo)\n\n[['turtle', 'penguin', 'platypus', 'zebra', 'giraffe'], ['Shelly', 'Tuxedo', 'Perry', 'Stripes', 'Bob']]\n\n\nNow we have a list of lists! What do you think it would look like if we pulled out the first element of zoo?\n\n# command python to get the first element in the list called zoo\nzoo[0]\n\n['turtle', 'penguin', 'platypus', 'zebra', 'giraffe']\n\n\nWe can see that using index zero to subset zoo gets the first list. What if we wanted to get the second element from zoo[0]?\n\n# command python to get the second element of the first element of zoo\nzoo[0][1]\n\n'penguin'\n\n\nSay we want to print our whole list so that each animal has its name printed next to it. Something like this:\nturtle Shelly \npenguin Tuxedo \nplatypus Perry \nzebra Stripes \ngiraffe Bob \nThis can be done using nested for loops!\n\n# use a nested for loop to print each animal and its name\nfor row in range(0,5):\n    \n    species_and_name = \"\"\n    \n    for column in range(0,2):\n        species_and_name = species_and_name + zoo[column][row] + \" \"\n        \n    print(species_and_name)\n\nturtle Shelly \npenguin Tuxedo \nplatypus Perry \nzebra Stripes \ngiraffe Bob \n\n\nExcellent work! You just learned about for loops. You learned: - How to write a for loop to iterate over all items in a list - How to use the range function - How to create a list of lists, or 2D list - How to write nested for loops"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson04_Lists_Intro.html",
    "href": "Lessons/_Keys/KEY_Lesson04_Lists_Intro.html",
    "title": "Lists",
    "section": "",
    "text": "Lists can be used to group different values together - it’s just a collection of things.\nYou can make a list in Python by putting different things in a box of brackets [] separated by commas:\n\n# command Python to make a list and store it in my_list\nmy_list = ['pizza', 'fries', 3, -2.5, 'donuts']\n\n# command Python to print my_list\nprint(my_list)\n\n['pizza', 'fries', 3, -2.5, 'donuts']\n\n\nNow let’s make a list of fruit and save it to the variable fruit. Have your list include apple, banana, grape, and any other fruit you want!\n\n# command Python to make a list of fruit including apple, banana, and grape\nfruit = ['apple','banana','grape']\n# command Python to print the list of fruit\nprint(fruit)\n\n['apple', 'banana', 'grape']\n\n\nYou can also see how many things there are in your list using len:\n\n# command Python to find the length of my_list\nlen(my_list)\n\n5\n\n\nLet’s find the length of the fruit list:\n\n# command Python to find the length of your fruit list\nlen(fruit)\n\n3\n\n\nTo add lists together, all you have to do is use the + operator.\n\n# command python to add my_list and fruit\nmy_list + fruit\n\n['pizza', 'fries', 3, -2.5, 'donuts', 'apple', 'banana', 'grape']\n\n\nYou can also make a list that includes variables:\n\n# assign the value 1 to the variable a\na = 1\n# assign the value 2 to the variable b\nb = 2\n# make a list including values and variables and save it to the variable numbers\nnumbers = [0, a, b, a+b]\n# print the numbers list\nprint(numbers)\n\n[0, 1, 2, 3]\n\n\nTo add a value to a list, you can use .append():\n\n# append 4 to the list numbers\nnumbers.append(4)\n# print numbers\nprint(numbers)\n\n[0, 1, 2, 3, 4]\n\n\nLet’s add mango to our fruit list:\n\n# add mango to fruit list\nfruit.append('mango')\n# print fruit\nprint(fruit)\n\n['apple', 'banana', 'grape', 'mango']\n\n\nYou just learned how to: * Make a list * Find the length of a list * Add lists together * Add things to a list\nNow it’s time to practice what you learned!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson11_Loops2.html",
    "href": "Lessons/_Keys/KEY_Lesson11_Loops2.html",
    "title": "Loops 2",
    "section": "",
    "text": "As we saw in our last lesson, loops can be helpful in performing actions on every item in a list. But what if we don’t want to iterate over every item in a list? Or what if we want to do something different, or something additional, to list items that meet certain requirements?\nThat’s where conditionals, which we learned about not too long ago, become useful. In this lesson, we will learn how to combine loops with conditionals.\n\n# create a list and store it in animals\nanimals = ['turtle', 'penguin', 'platypus', 'zebra', 'giraffe']\n\nSuppose we wanted to make a list of all the animals that aren’t turtles. Within our for loop, we can write an if statement that checks if each object is not a turtle.\n\n# create a for loop that only prints the animal if it isn't a turtle\nfor animal in animals:\n    if animal is not \"turtle\":\n        print(animal)\n\npenguin\nplatypus\nzebra\ngiraffe\n\n\nWe can see we printed all the animals except the turtle.\nWhat if we wanted to do something else when we came across the turtle item in our list?\n\n# edit the above for loop to print \"aardvark\" when the item says \"turtle\"\nfor animal in animals:\n    if animal is not \"turtle\":\n        print(animal)\n    else:\n        print(\"aardvark\")\n\naardvark\npenguin\nplatypus\nzebra\ngiraffe\n\n\nInstead of printing out the word turtle, we printed out the word aardvark!\nWe also can write our loops so that some code is in a conditional, and some is not. Let’s say we want to print something before every entry that is not a turtle.\n\n# use an if statement inside a for statement to print \"the following animal is not a turtle\"\n# before every animal that is not a turtle\nfor animal in animals:\n    if animal is not \"turtle\":\n        print(\"The following animal is not a turtle\")\n    print(animal)\n\nturtle\nThe following animal is not a turtle\npenguin\nThe following animal is not a turtle\nplatypus\nThe following animal is not a turtle\nzebra\nThe following animal is not a turtle\ngiraffe\n\n\nMaybe there are some animals we don’t want to print out. We learned in the previous lesson that we can create a list of the indices we want to print out. But what if we don’t know what indices correspond to the items we do and don’t want to print? We could use an if/else statement, or we could use something called continue.\nThe continue keyword skips to the following item in a list. Wherever you put continue in your for loop, any code within the loop that follows the continue statement won’t execute for that item.\n\n# use continue to print out all animals that aren't a penguin or a turtle\nfor animal in animals:\n    if animal is 'penguin' or animal is 'turtle':\n        continue\n    print(animal)\n\nplatypus\nzebra\ngiraffe\n\n\nAnother keyword that is useful for controlling your for loop is break. If you want your for loop to stop running after a certain condition is true, you can use break. Once break is called, the foor loop stops—no other code runs for the current item, and the for loop won’t continue to the rest of the items in the list.\n\n# use break to only print animals until we get to the zebra\nfor animal in animals:\n    print(animal)\n    if animal is 'zebra':\n        break\n\nturtle\npenguin\nplatypus\nzebra\n\n\nWe see that “giraffe” wasn’t printed. That’s because our for loop was broken after we got to the zebra.``\nGreat job! You just learned even more about loops. You learned: - How to use if statements within a for loop - How to use continue to skip certain items in a list - How to use break to stop running code in a for loop after a condition has been met"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson03_Variables_Types.html",
    "href": "Lessons/_Keys/KEY_Lesson03_Variables_Types.html",
    "title": "Variables",
    "section": "",
    "text": "In the last lesson we learned that we can use variables to store values in Python, similar to how we use variables in algebra. Each variable is assigned a value, and then we can use the variable name to reference the value it represents.\nVariables are very helpful in coding. Not only do they prevent us from having to remember and type the values over and over again, it allows us to update certain values when we have new information. For example, let’s say we have a variable apples that stores the number of apples we have in our refrigerator.\n\napples = 2\n\nNow let’s say I went to the store and bought half a dozen apples. Now I want to update the value of apples without having to remember how many we started with. How should I do this?\n\n# add 6 to apples and print apples\napples + 6\nprint(apples)\n\n2\n\n\n\n# add 6 to apples and update apples\n# print apples\napples += 6\nprint(apples)\n\n8\n\n\nNotice that we can’t just add 6 to apples and have Python know we mean for it to save that result, we need to explicitly tell Python to update the value of apples. To do this we use the += operator. This adds 6 to the previous value of apples (2) and updates the variable apples to store this new value. This is called incrementing.\nLet’s say I had some friends coming over for dinner and I wanted to make an apple pie for dessert. This used up 4 apples. How do you think we should update the variable apples to reflect the number of apples that remain in the reifrigerator?\n\n# subtract 4 from apples and update it\n# print apples\napples -= 4\nprint(apples)\n\n4\n\n\nThis is an example of decrementing.\n\nTypes\nSo far we have only used variables to represent numbers. In fact, Python allows us to store several different kinds of data and assign their values to variables. These basic kinds of data come in pre-defined flavors, called types. Each type has certain key ways to identify it and certain rules that it has to follow. All variables fall into some type, and you can use the type() function to determine the type of any variable. Let’s test this with our apples variable from above.\n\ntype(apples)\n\nint\n\n\n\nNumeric Types\nint stands for integer, which means a whole number or a number that does not have any decimal value. You may have heard this word before in your math classes. Integers follow basic mathematical rules and can be manipulated with standard mathematical operators, like we saw in the previous lesson.\nAnother numerical type is called a float, which stands for floating point number. This type represents numbers with decimal values. Let’s see an example.\n\n# create float variable oranges, print type\noranges = 3.5\ntype(oranges)\n\nfloat\n\n\nfloat variables are very similar to int variables, since they are both numeric types and abide by the same basic mathematical rules. We can even convert between one type to another.\n\n# int to float\napples = float(apples)\nprint(apples)\ntype(apples)\n\n4.0\n\n\nfloat\n\n\n\n# float to int\noranges = int(oranges)\nprint(oranges)\ntype(oranges)\n\n3\n\n\nint\n\n\nNotice that here Python rounded down. When you use int in Python, the decimal place is just cut off so the number is always rounded down.\n\n# add float to int\noranges += 0.3\nprint(oranges)\ntype(oranges)\n\n3.3\n\n\nfloat\n\n\n\n# add int to float\noranges += 4\nprint(oranges)\ntype(oranges)\n\n7.3\n\n\nfloat\n\n\n\n\nStrings\nWhen you think of data science, you may think mainly of numbers and statistics, but sometimes we need to analyze data in other forms as well. Often we need to work with text data, which are called strings in Python and designated using str. Strings are comprised of characters, like letters or symbols, or a bunch of characters put together, like words. Strings are defined using single quotations ' ' or double quotations \" \". You can use either as long as they match at the start and end of the string. This is what separates strings from variable or function names and tells Python to view it as a string value. Remember that everything in programming is extremely literal, so we have to be very explicit about what we mean when writing code.\nWe used a string in our very first line of code from the last lesson - can anyone remember what it was?\n\n# create string variable name, print type\nname = \"Marlena\"\ntype(name)\n\nstr\n\n\nLike the numeric types, strings have to follow some basic rules for how they can behave in Python. While we can’t perform mathematical addition with strings, we can combine strings together using the + operator. This is called concatenating.\n\n# print first name + last name\nprint(\"Marlena\" + \"Duda\")\n\n# add space in between\nprint(\"Marlena\" + \" \" + \"Duda\")\n\nMarlenaDuda\nMarlena Duda\n\n\nWe can also use the multiplication operator on strings. Can anyone guess what that might do?\n\n# use multiplication operator on string\n\"Hello World \" * 10\n\n'Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World '\n\n\nHowever, not all the operators we learned in the last lesson work with strings. We can’t subtract or divide strings, and we also can’t add numeric values to strings or multiply strings with other strings. Let’s see what kinds of errors arise when we try to break these string rules.\n\n# uncomment these lines one by one to see the resulting error messages\n\n#\"Hello World\" - \"Hello\"\n\n#\"Marlena\"/\"Duda\"\n\n#\"Marlena\" * \"GWC\"\n\n#\"GWC\" + 2019\n\nThough there is a clear distinction between numeric and string variables, string variables can contain numbers, which are seen as numeric characters in this context.\n\n# create string variable date with today's date\ndate = \"7/15/2019\"\n\n\n\nBooleans\nOne last basic data type in Python is called the boolean, or bool, which is a special type of variable that can take only on the value of True or False. Since it only has two possible values, a boolean is referred to as a binary variable.\n\n# create boolean variable and print type\napproved = True\ntype(approved)\n\nbool\n\n\nBoolean variables can be assigned directly using the special reserved words of True or False like we saw above, but they can also be generated as the result of comparison operators:\n&lt; less than\n&gt; greater than\n&lt;= less than or equal to\n&gt;= greater than or equal to\n== equal to\n!= not equal to\nPay special attention to the == operator - this tests whether or not two values are exactly equal to each other, and is an important distinction from the = operator, which assigns a value to a variable.\n\n# generate boolean variables using comparison operators\ncheck_equal = apples == 7\nprint(check_equal)\ntype(check_equal)\n\nFalse\n\n\nbool\n\n\nWhile we’ve seen that booleans take on the values of True or False, they also have a numeric representation: True = 1 and False = 0. As such, boolean variables follow mathematical rules and can be manipulated using mathematical operators. This can be useful when you want to quickly count up the number of True values in a list, for example. Let’s play with this below.\n\nyes = True\nno = False\n\n# add, substract, multiply boolean variables\nprint(no - yes)\nprint(yes + no)\nprint(yes * no)\n\n# add, subtract, multiple boolean and int variables\nprint(no - 10)\nprint(yes + 10)\nprint(yes * 10)\n\n-1\n1\n0\n-10\n11\n10\n\n\nNow you’re an expert in the basic Python data types: * int: integer * float: decimal number * string: text * bool: True/False"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson06_2D_Lists_Intro.html",
    "href": "Lessons/_Keys/KEY_Lesson06_2D_Lists_Intro.html",
    "title": "2D Lists",
    "section": "",
    "text": "Remember: - Lists can be used to group different values together - it’s just a collection of things. - You can make a list in Python by putting different things in a box of brackets [] separated by commas:\nGuess what? You can also make lists of lists!! These are called 2D lists in Python.\nYou can make a 2D list like this:\n\n# list number 1\nfruit = ['apple', 'banana', 'grape', 'mango']\n\n# list number 2\nveggies = ['lettuce','carrot','cucumber','beet']\n\n# create 2D list\nfood = [fruit, veggies]\n\n# print 2D list\nprint(food)\n\n[['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet']]\n\n\nWhat data type is food?\n\nprint(type(food))\n\n&lt;class 'list'&gt;\n\n\nWhat is the length of your list?\n\n# print length of food\nprint(len(food))\n\n2\n\n\nIs this what you expected? Since food is a list that contains two list objects, the length of food is 2.\n\n# make a list of meats and save it to the variable meat\nmeat = ['chicken','beef','fish','pork']\n# add another list to food with meat\nfood.append(meat)\n\n# print food\nprint(food)\n\n[['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet'], ['chicken', 'beef', 'fish', 'pork']]\n\n\nWhat is the length of food now?\n\nprint(len(food))\n\n3\n\n\nMake a variable called double_food that contains the food list twice. Print out double_food.\n\n# create double_food that contains food twice\ndouble_food = food + food\n\n# print double_food\nprint(double_food)\n\n[['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet'], ['chicken', 'beef', 'fish', 'pork'], ['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet'], ['chicken', 'beef', 'fish', 'pork']]\n\n\nWhat is the length of double_food? Is this what you expected?\n\nprint(len(double_food))\n\n6\n\n\nYou can also make 2D lists without assigning variables first:\n\n# create a 2D list of numbers\nnumbers = [[1,2,3,4],[1,2,3],[1,2]]\n\n# print 2D list of numbers\nprint(numbers)\n\n[[1, 2, 3, 4], [1, 2, 3], [1, 2]]\n\n\nWhat is the length of numbers?\n\n# print length of numbers\nprint(len(numbers))\n\n3\n\n\nWhat happens if you add the food and numbers together?\n\nprint(food + numbers)\n\n[['apple', 'banana', 'grape', 'mango'], ['lettuce', 'carrot', 'cucumber', 'beet'], ['chicken', 'beef', 'fish', 'pork'], [1, 2, 3, 4], [1, 2, 3], [1, 2]]\n\n\nNice job! You just learned how to make 2D lists in Python!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson13_Packages.html",
    "href": "Lessons/_Keys/KEY_Lesson13_Packages.html",
    "title": "Packages",
    "section": "",
    "text": "Remember: - Functions and methods are things that take an input, do something with that input, and then spit out an output. You’ve already been using functions and methods! - Functions can take lots of different object types as input. For example, print can take a variety of inputs including a variable, a string, a list, or numbers. - Methods can only be used on one specific type of object. For example, append can only be used on lists (and not strings or numbers). - The input to functions goes between parentheses after the name of function - Example: print(print_input) At least part of the input to methods comes before the name of the method and is followed by a period (.) - Example: mylist.append(what_to_append)\nPython comes with certain built-in functions and methods like the ones we used in the previous section (such as print and append). But sometimes you might want to do things that are a bit more complicated. For this, you can import packages.\nWe’re going to use our numbers list to play around with functions in the numpy package.\n\n# list of numbers\nnumbers = [10,2.3,-4,20,14,1,2,0,-3,1,-2,2,2,65.4,3,-23,123,43.1,32,57,32]\n\n# print numbers\nprint(numbers)\n\n[10, 2.3, -4, 20, 14, 1, 2, 0, -3, 1, -2, 2, 2, 65.4, 3, -23, 123, 43.1, 32, 57, 32]\n\n\nPackages are groups of functions and methods that you can import and then use just like built-in functions and packages.\nOne example of a very powerful packages is numpy. To import numpy and load all of the functions in that packages into your environment (in this Jupyter Notebook), you do this:\n\n# import numpy package\nimport numpy\n\nThen you can use the functions that are defined in this package. One function is the mean function to find the mean of a list of numbers. To do this, you have to use the prefix numpy so Python knows that the function comes from the numpy package:\n\n# get the mean of numbers using the numpy mean function\nnumpy.mean(numbers)\n\n17.99047619047619\n\n\nNice, it’s the same as we got before when we calculated the mean ourselves!\nTyping out numpy every time is a lot of work, so a lot of people like to shorten the prefix you have to use by giving the package a nickname. If you want the prefix to be np instead of numpy, you can import the package as follows:\n\n# import numpy package as np\nimport numpy as np\n\nNow, if you want to find the mean of numbers using the numpy mean function, you just have to use the prefix np:\n\n# print the mean of numbers\nnp.mean(numbers)\n\n17.99047619047619\n\n\nLet’s explore some other functions in the numpy package.\nBefore, we learned how to find the absolute value of a number using the abs function. If we want to get the absolute value of everything in a list, we can use the numpy absolute value function by calling np.abs:\n\n# get absolute value of all numbers in numbers and save it to the variable abs_nums\nabs_nums = np.abs(numbers)\n\n# print abs_nums\nabs_nums\n\narray([ 10. ,   2.3,   4. ,  20. ,  14. ,   1. ,   2. ,   0. ,   3. ,\n         1. ,   2. ,   2. ,   2. ,  65.4,   3. ,  23. , 123. ,  43.1,\n        32. ,  57. ,  32. ])\n\n\nDid you notice that this looks different than a list? Let’s look at the type of abs_nums:\n\n# get the type of abs_nums\nprint(type(abs_nums))\n\n&lt;class 'numpy.ndarray'&gt;\n\n\nIt’s a numpy.ndarray. You’ll learn more about what that means in a future lesson!\nnumpy also has a similar function for round.\nOkay, we’re going to play around with methods a bit more. One method that is useful is sort. You can use this to sort a list or a numpy array. It won’t print anything out because it sorts the actual numbers list. Let’s try this on the numbers list:\n\n# print numbers\nprint(numbers)\n# sort numbers\nnumbers.sort()\n# print numbers\nprint(numbers)\n\n[10, 2.3, -4, 20, 14, 1, 2, 0, -3, 1, -2, 2, 2, 65.4, 3, -23, 123, 43.1, 32, 57, 32]\n[-23, -4, -3, -2, 0, 1, 1, 2, 2, 2, 2.3, 3, 10, 14, 20, 32, 32, 43.1, 57, 65.4, 123]\n\n\nAs you can see, the sort method operated on the numbers list variable and changed the actual list to be sorted from the lowest value (-23) to the highest value (123). It even worked with our list of mixed float and integer values.\nNow let’s try it on the abs_nums list:\n\n# print abs_nums\nprint(abs_nums)\n# sort abs_nums\nabs_nums.sort()\n# print abs_nums\nprint(abs_nums)\n\n[ 10.    2.3   4.   20.   14.    1.    2.    0.    3.    1.    2.    2.\n   2.   65.4   3.   23.  123.   43.1  32.   57.   32. ]\n[  0.    1.    1.    2.    2.    2.    2.    2.3   3.    3.    4.   10.\n  14.   20.   23.   32.   32.   43.1  57.   65.4 123. ]\n\n\nNice job! You just learned about packages in Python! You learned: - How to import new functions in packages in Python - More functions and methods\nYou’ll learn more about numpy in a future lesson. There are also tons of other packages out there for different purposes. We’ll learn about the pandas package in the next lesson, and the matplotlib package in a few days!"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson21_Basic_Stats_I_Averages.html",
    "href": "Lessons/_Keys/KEY_Lesson21_Basic_Stats_I_Averages.html",
    "title": "Basic Statistics I: Averages",
    "section": "",
    "text": "An average is the central value of a set of numbers.\nThe arithmetic mean is the sum of the elements along the axis divided by the number of elements.\n\nimport numpy as np\n\n\n# Make an array of rank 1\narr = np.array([1, 2, 3, 4, 5])\n\nLet’s manually calculate the average of array arr.\n\n# Manually calculate the average\naverage_manual = np.sum(arr)/len(arr)\nprint(average_manual)\n\n3.0\n\n\nNow, to make our life easier, let’s use the built-in method mean to calculate the average.\n\n# Calculate the average using the built-in method mean\naverage_numpy = np.mean(arr)\nprint(average_numpy)\n\n3.0\n\n\nWe can also calculate averages on arrays of rank 2.\n\n# Make an array of rank 2\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n\n\n# Determine the mean of the array of rank 2\nprint(np.mean(a))\n\n6.5\n\n\n\n# Determine the mean of each column\naverages_columnwise = np.mean(a, axis = 0)\nprint(averages_columnwise)\n\n[ 5.5  6.5  7.5]\n\n\n\n# Determine the mean of each row\naverages_rowwise = np.mean(a, axis = 1)\nprint(averages_rowwise)\n\n[  2.   5.   8.  11.]\n\n\nWe have been practicing on simulated data, so let’s now world with a real-world dataset by using the iris dataset.\n\n# Import the load_iris method \nfrom sklearn.datasets import load_iris\n\n\n# Import pandas, so that we can work with the data frame version of the iris data\nimport pandas as pd\n\n\n# Load the iris data\niris = load_iris()\n\n\n# Convert the iris data to a data frame format, so that it's easier to view\n# and process\niris_df = pd.DataFrame(iris['data'], columns = iris['feature_names'])\niris_df\n\n\n# Determine the mean of each feature\naverages_column = np.mean(iris_df, axis = 0)\nprint(averages_column)\n\nsepal length (cm)    5.843333\nsepal width (cm)     3.054000\npetal length (cm)    3.758667\npetal width (cm)     1.198667\ndtype: float64\n\n\nSo we can determine the averages by row, but should we do this? Why or why not?\n\n# Determine the mean of each row\naverages_row = np.mean(iris_df, axis = 1)\nprint(averages_row)\n\nHow should we interpret a value of averages_row? It’s hard to interpret these values, since taking an average across different features does not make sense.\nEven though we can calculate any statistics that we want, some statistics may not be interpretable. So be careful on your calculations!\nGreat work! You just learned about how to take averages in Python! You learned:\n\nTo manually and automatically calculate averages\nTo calculate averages by row and by columns.\nTo calculate averages on a real dataset.\nTo know when it is appropriate to calculate row-wise or column-wise averages."
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson08_Logic.html",
    "href": "Lessons/_Keys/KEY_Lesson08_Logic.html",
    "title": "Logic",
    "section": "",
    "text": "Previously, we learned about Booleans. Booleans are variables that can take two values: True or False.\nWe can make a variable a Boolean by setting it equal to True or False, but as we discussed earlier we can also use comparison operators to generate\n&lt; less than\n&gt; greater than\n&lt;= less than/equal to\n&gt;= greater than or equal to\n== equal to\n!= not equal to\nLet’s create a basic list to get started\n\n# create a list called my_list with numbers 1,2,3 inside\nmy_list = [1, 2, 3]\n\nLet’s say a list with more than 2 items is considered long. Using the len function, we can create a Boolean value that tells us if our list is long or short.\n\n# create a boolean called long_list that is True if our list has more than 2 items\nlong_list = len(my_list) &gt; 2\n\n# print the value of long_list\nprint(long_list)\n\nTrue\n\n\nWhat if we wanted to create a Boolean that had the opposite value?\nCertain pairs of operators are opposites of one another.\n&gt; and &lt;= are opposites\n&lt; and &gt;= are opposites\n== and != are opposites\nSo, since we used &gt; to figure out if our list was long, we can use &lt;= to figure out if our list is short.\n\n# create a boolean called short_list that is False if our list doesn't have more than 2 items\nshort_list = len(my_list) &lt;= 2\n\n# print the value of short_list\nprint(short_list)\n\nFalse\n\n\nOne cool thing about Python is that we can use words in place of some of the operators we talked about earlier. The operator == is used to test whether two things are equal.\nFirst, let’s use the == operator to test if the first item of our list is equal to 1.\n\n# use == to see if the first item of my_list equals 1\nmy_list[0] == 1\n\nTrue\n\n\nNow, let’s do the same thing using the is operator\n\n# use is to see if the first item of my_list equals 1\nmy_list[0] is 1\n\nTrue\n\n\nIn most cases, it doesn’t matter whether you use is or ==. Using is might help you avoid accidentally using = instead of ==, which is a common mistake.\nAnother useful python keyword is not. Putting not in front of a boolean will flip the value to its oposite—remember that True and False are opposites.\n\n# use the \"not\" keyword to calculate the opposite of True\nnot True\n\nFalse\n\n\nThe not keyword can be used with logical operators. Recall that the operator != determines if two things are not equal to each other. We learned above that is can be used to compare two objects, too. Then, we can use is and not together to see if two values are different.\n\n# use != to see if the first item of my_list is not equal to 5\nmy_list[0] != 5\n\nTrue\n\n\n\n# use \"is not\" to see if the first item of my_list is not equal to 5\nmy_list[0] is not 5\n\nTrue\n\n\nJust like comparison operators such as &gt; and &lt;= can work on things like strings and integers (and booleans, too!), there are operators just for booleans.\nFirst, we’ll look at or.\nor looks at the two booleans and returns True if at least one is True, and otherwise returns False.\n\n# print the value of True or True\nprint(True or True)\n\n# print the value of True or False\nprint(True or False)\n\n# print the value of False or False\nprint(False or False)\n\nTrue\nTrue\nFalse\n\n\nAnother really useful boolean operator is and.\nand works similarly to or, except it only returns True if both of the booleans are True.\n\n# print the value of True and True\nprint(True and True)\n\n# print the value of True and False\nprint(True and False)\n\n# print the value of False and False\nprint(False and False)\n\nTrue\nFalse\nFalse\n\n\nOne kind of problem that or and and can be useful for solving is testing if a value is inside a certain range.\nSay we wanted to see if the length of our list was greater than 5 or less than 4—so any length except 4 or 5.\n\n# use \"or\" to see if my_list has less than 4 or more than 5 items\nlen(my_list) &gt; 5 or len(my_list) &lt; 4\n\nTrue\n\n\nSay we wanted to solve the opposite problem—we want to see if the length of our list is exactly 4 or 5.\n\n# use \"and\" to see if my_list has 4 or 5 items\nlen(my_list) &gt;=4 and len(my_list) &lt;= 5\n\nFalse\n\n\nWe see that the length of our list is less than or equal to 5, but it isn’t greater than or equal to 4, so the value is False.\nThis is a bit of a tricky example, so it may take a minute or two for it to sink in. If it is confusing, try making a list with two columns - one representing &gt;= 4 and one representing &lt;= 5. For different example values, place a check in each column if that condition is true, and an X if it is false - only values where all columns have checks will result in True using the and operator.\nChallenge: What about when we use the or operator?\nGreat job! You just learned about logic in Python! You learned: - How to create a boolean using operators - That some operators (for example, &gt; and &lt;=) are “opposites” - That keywords like is and not can be used in place of symbol-based operators - How to use or and and to combine booleans"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson18_Dictionaries.html",
    "href": "Lessons/_Keys/KEY_Lesson18_Dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "Today we’re going to learn about a super useful Python data type called dictionaries. Dictionaries have key-value pairs where you can look up a value using a key. Let’s jump in with an example.\nHere, we’re going to make a dictionary of foods where:\n\nThe keys are the category\nThe values are the foods in each category\n\n\n# create dictionary\nfoods = {'vegetable': ['carrot', 'eggplant'], 'fruit': 'cherry'}\n# print type of foods\nprint(type(foods))\n# print dictionary\nprint(foods)\n\n&lt;class 'dict'&gt;\n{'vegetable': ['carrot', 'eggplant'], 'fruit': 'cherry'}\n\n\nSay we want to add an entry to our dictionary. We can do it like this:\n\n# add entry to dictionary\nfoods['snack'] = 'chips'\n# print dictionary\nprint(foods)\n\n{'vegetable': ['carrot', 'eggplant'], 'fruit': 'cherry', 'snack': 'chips'}\n\n\nWhat if we want to try to get the first element in our foods dictionary?\n\n# access first element of dictionary\nfoods[0]\n\nKeyError: 0\n\n\nWhoops! This didn’t work. That’s because dictionaries are unordered. That means that there’s no first, second, third etc. element. This is not like Python lists, which are ordered. Because of this, we always have to access dictionaries using their keys.\nLet’s try accessing something in our dictionary using our new knowledge. Let’s look up the food(s) from a category (the value) using the category (the key):\n\n# get value in dictionary using key\nfoods['vegetable']\n\n['carrot', 'eggplant']\n\n\nCool! As long as we know the category, we can look up the foods that belong to them in our dictionary.\nWhat if we want to print out all the keys or all the values? We can do that like this:\n\n# get all the keys:\nprint(foods.keys())\n# get all the values:\nprint(foods.values())\n\ndict_keys(['vegetable', 'fruit', 'snack'])\ndict_values([['carrot', 'eggplant'], 'cherry', 'chips'])\n\n\nNow let’s get a little fancier. Let’s try to loop through our dictionary! We’re going to use the method .items() to access key-value pairs in our dictionary:\n\n# print items in dictionary\nprint(foods.items())\n\ndict_items([('vegetable', ['carrot', 'eggplant']), ('fruit', 'cherry'), ('snack', 'chips')])\n\n\n\n# loop over dictionary items\nfor category, food in foods.items():\n    print(category)\n    print(food)\n    print('\\n')\n\nvegetable\n['carrot', 'eggplant']\n\n\nfruit\ncherry\n\n\nsnack\nchips\n\n\n\n\nSay we decide that we actually want to take ‘snack’ out of our dictionary for some reason. We can do that using the del function:\n\n# delete entry in dictionary and save it to variable\ndel foods['snack']\n# print dictionary\nprint(foods)\n\n{'vegetable': ['carrot', 'eggplant'], 'fruit': 'cherry'}\n\n\nAlternatively, if you want to save the values to a variable and remove it from the dictionary at the same time, you can use the .pop method:\n\n# delete entry in dictionary and save it to variable\nfr = foods.pop('fruit')\n# print fr\nprint(fr)\n# print dictionary\nprint(foods)\n\ncherry\n{'vegetable': ['carrot', 'eggplant']}\n\n\nNice job! You just learned:\n\nHow to create a dictionary in Python\nHow to access keys, values, and key-value pairs in a dictionary\nHow to loop over elemets in a dictionary\nHow to delete elements from a dictionary"
  },
  {
    "objectID": "Lessons/_Keys/KEY_Lesson14_Pandas-Intro.html",
    "href": "Lessons/_Keys/KEY_Lesson14_Pandas-Intro.html",
    "title": "Introduction to Pandas",
    "section": "",
    "text": "You may have used a program like Microsoft Excel or Google Sheets to record data or perform calculations for school. Datasets are often organized in rows and columns. Here’s an example of a table:\n\n\n\nProduct\nPrice\nQuantity Sold\n\n\n\n\nApples\n$ 1.50\n26\n\n\nBananas\n$ 0.50\n32\n\n\nLemons\n$ 1.99\n17\n\n\n\nIn this case, we have prices of fruit from a grocery store. Each row in this dataset corresponds to a type of fruit, and each column is an observation or measurement about that fruit. What measurements do we have here?\nMeasurements: Price, Quantity Sold\nTo handle table data in Python, we use a package called called pandas. (Despite the name, it actually doesn’t have anything to do with panda bears - disappointing, we know.)\nBefore we can use the package, we need to import it. Try writing a line of code to import the pandas package:\n\n# write the code to import the package\nimport pandas\n\nWe’re going to be using pandas a lot. To save us some time typing, let’s tell Python to rename the package for us to something a little shorter:\n\nimport pandas as pd\n\nAdding “as pd” to our import statement tells Python that every time we use pd, we actually mean pandas. It’s like giving the package a nickname! Most people use this same nickname for pandas, so if you see other people’s code, you’ll know that pd means pandas.\nNow that we’ve imported pandas, we’re ready to use it. Datasets are stored in pandas in a special container called a DataFrame. DataFrames help us handle data that are organized in rows and columns, just like the grocery store dataset above. We can create that DataFrame by calling the DataFrame function:\n\npd.DataFrame({'Product': ['Apples', 'Bananas', 'Lemons'],\n              'Price': [1.50, 0.50, 1.99],\n              'QuantitySold': [26, 32, 17]})\n\n\n\n\n\n\n\n\nProduct\nPrice\nQuantitySold\n\n\n\n\n0\nApples\n1.50\n26\n\n\n1\nBananas\n0.50\n32\n\n\n2\nLemons\n1.99\n17\n\n\n\n\n\n\n\nThere are a few things to notice:\n\nPython helpfully showed us what our DataFrame looks like with rows and columns.\nPython gave each row in the DataFrame a number, starting from zero. Does that remind you of something about lists?\n\nWhen we ran that cell, Python showed us what the DataFrame looks like, but it didn’t save the DataFrame anywhere. If we want to do more things with it, we’ll need to save it to a variable - the same way we learned to save integers or strings to variables. In the below cell, save the same DataFrame to a variable called fruit_data:\n\n# save the DataFrame to a variable called fruit_data\nfruit_data = pd.DataFrame({'Product': ['Apples', 'Bananas', 'Lemons'],\n                           'Price': [1.50, 0.50, 1.99],\n                           'QuantitySold': [26, 32, 17]})\n\nWhen we run the above cell, does anything happen?\nSince we saved the DataFrame to a variable, Python assumed that we don’t want to take a peek at it. If we do want to see what our DataFrame looks like, we can write the variable on a line by itself like this:\n\n# print out fruit_data\nfruit_data\n\n\n\n\n\n\n\n\nProduct\nPrice\nQuantitySold\n\n\n\n\n0\nApples\n1.50\n26\n\n\n1\nBananas\n0.50\n32\n\n\n2\nLemons\n1.99\n17\n\n\n\n\n\n\n\nSometimes we don’t want to see all of the data at once. To view just the first few rows of a DataFrame, we use a method called head.\nRecall: methods are special functions that belong to certain types of variables. They only work with the type of variable that they belong to, so running head on a variable that isn’t a DataFrame will not work.\nLet’s use the head method to view only the first two rows of our fruit data:\n\nfruit_data.head(2)\n\n\n\n\n\n\n\n\nProduct\nPrice\nQuantitySold\n\n\n\n\n0\nApples\n1.5\n26\n\n\n1\nBananas\n0.5\n32\n\n\n\n\n\n\n\nAfter typing head, the name of the method, we wrote the number 2 between the parentheses. This told head that we wanted to see only the first two lines of our DataFrame. What would you do if you only wanted to see the first line of fruit_data?\n\n# write the code to see only the first line of the DataFrame\nfruit_data.head(1)\n\n\n\n\n\n\n\n\nProduct\nPrice\nQuantitySold\n\n\n\n\n0\nApples\n1.5\n26\n\n\n\n\n\n\n\nGreat! What if instead of viewing the first few lines, we wanted to see the last few lines? For that we will use another method called tail. It is very similar to head, except it will show us the last few lines instead of the first few. Try writing a line of code to view the very last line of fruit_data:\n\n# write the code to see only the last line of the DataFrame\nfruit_data.tail(1)\n\n\n\n\n\n\n\n\nProduct\nPrice\nQuantitySold\n\n\n\n\n2\nLemons\n1.99\n17\n\n\n\n\n\n\n\nhead and tail are especially useful for big datasets with many rows so you can get a sense for what the DataFrame looks like without flooding your notebook with too much information. They will come in handy later!\nNow let’s talk about the types of variables we have in the fruit_data DataFrame. What are some of the types of variables we’ve learned about in Python?\nTypes: string, int, float, list\nBased on what you know about these types of variables, what type do you think the values in each of the columns belong to in fruit_data?\nType of the Product column: string (explanation: the names of the fruit are words)\nType of the Price column: float (explanation: the prices have decimal points)\nType of the QuantitySold column: int (explanation: quantity sold is a count. stores won’t sell only half a banana.)\nNotice how each of the columns in fruit_data have different types. That’s one of the many cool things about pandas – it let’s us store many different types of data in DataFrames."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice05_Indexing.html",
    "href": "Practices/_Keys/KEY_Practice05_Indexing.html",
    "title": "Practice with indexing!",
    "section": "",
    "text": "Remember: * Use square brackets to index ([]) * You can index lists and strings * Python starts counting at zero!\nLet’s start with our list of pets:\n\n# command Python to make a list of pets. Store it in pets\npets = ['dog','cat','turtle','hamster','goldfish','snake','rabbit']\n\n# command Python to print pets\nprint(pets)\n\n['dog', 'cat', 'turtle', 'hamster', 'goldfish', 'snake', 'rabbit']\n\n\nUse indexing to print out cat:\n\n# command Python to print cat by indexing the pets list\nprint(pets[1])\n\ncat\n\n\nPrint the 5th element in your list. What is it? Be sure to check your answer!\n\n# command Python to print the 5th element in pets\npets[4]\n\n'goldfish'\n\n\nGet turtle, hamster, and goldfish from pets using indexing and store it as pets_subset:\n\n# command Python to store turtle, hamster, and goldfish from pets into pets_subset\npets_subset = pets[2:5]\n# command Python to print pets_subset\nprint(pets_subset)\n\n['turtle', 'hamster', 'goldfish']\n\n\nHow can you make a list of the first and third elements of pets?\n\n# make a list of the first and third elements of pets\n[pets[0], pets[2]]\n\n['dog', 'turtle']\n\n\nLet’s get the last element of pets (rabbit) and store it as my_pet. Then print it out to make sure you did it correctly!\n\n# command Python to store the last element of pets in my_pet\nmy_pet = pets[-1]\n# command Python to print my_pet\nprint(my_pet)\n\nrabbit\n\n\nPrint the first three letters of my_pet:\n\n# command Python to print the first three letters of my_pet\nprint(my_pet[0:3])\n\nrab\n\n\nChallenge:  1. Create a list called family and populate it with names of your family 2. Create a list called friends and populate it with names of your friends 3. Add your friends list and your family list together and store it in the variable people_i_know 4. Find the length of people_i_know 5. Print out the first and last element of people_i_know 6. Pick one person from your list who is your hero. Get that person’s name from the list using indexing and store it as my_hero 7. Find the length of my_hero 8. Get the first 2 letters of my_hero 9. Get the last 2 letters of my_hero"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice25_LineGraphs.html",
    "href": "Practices/_Keys/KEY_Practice25_LineGraphs.html",
    "title": "Line Graphs",
    "section": "",
    "text": "Let’s start out by loading the seaborn package\n\n# load seaborn pakcage\nimport seaborn as sns\n# set up for inline plotting\n%matplotlib inline\n\nIn this practice we will be using the dots dataset from the seaborn package. This is also a dataset that contains information about brain activations over time. Let’s load and preview the data.\n\n# load data\ndots = sns.load_dataset(\"dots\")\n# preview data\ndots.head()\n\n\n\n\n\n\n\n\nalign\nchoice\ntime\ncoherence\nfiring_rate\n\n\n\n\n0\ndots\nT1\n-80\n0.0\n33.189967\n\n\n1\ndots\nT1\n-80\n3.2\n31.691726\n\n\n2\ndots\nT1\n-80\n6.4\n34.279840\n\n\n3\ndots\nT1\n-80\n12.8\n32.631874\n\n\n4\ndots\nT1\n-80\n25.6\n35.060487\n\n\n\n\n\n\n\nThis dataset is a little more complicated, and to be honest I am not even sure what each column means exactly. But, this is not important for using this data to practice plotting line graphs. All we need to know is that the align column contains two values: dots and sacc, and the choice column also contains two values: T1 and T2.\nFirst, let’s just get a sense of our base data using a line plot of firing_rate vs. time. Think hard about which variable should go on which axis!\n\n# plot time vs firing_rate\nsns.lineplot(x='time', y='firing_rate', data=dots)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x110baa2b0&gt;\n\n\n\n\n\nNow, separate your plot by the choice column using color.\n\n# plot time vs firing_rate separated by choice\nsns.lineplot(x='time', y='firing_rate', hue = \"choice\", data=dots)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x105af7e10&gt;\n\n\n\n\n\nNext, separate your plot by the align column using line style.\n\n# plot time vs firing_rate separated by align\nsns.lineplot(x='time', y='firing_rate', style = \"align\" ,data=dots)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x110f54f28&gt;\n\n\n\n\n\nLastly, combine these two factors to get a plot separated by both choice (color) and align (style). How many lines do you expect in the resulting graph?\n\n# plot time vs firing_rate separated by choice and align\nsns.lineplot(x='time', y='firing_rate', hue = \"choice\", style = \"align\" ,data=dots)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x110f60fd0&gt;"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice10_Loops1.html",
    "href": "Practices/_Keys/KEY_Practice10_Loops1.html",
    "title": "Practice with loops",
    "section": "",
    "text": "In this practice, we will review: - how to iterate through a list with a loop - how to use the range function with loops - how to create a nested loop\nAs you have seen, loops give us the ability to loop through, or iterate through, a list of items and perform the same action with each item in the list. A for loop follows this pattern:\nfor [item] in [list]\n  [do something with item]\nSome other things to remember before practicing: - The range function gives you a list of numbers between two parameters. For example, range(0,3) would give you the list [0,1,2]. It is inclusive of the first parameter, but exclusive of the second parameter. - You can put for loops inside each other, but it is very important to make sure both loops have different variable names. For example, this is okay:\nfor num1 in list_1:\n  for num2 in list_2:\n    print(num1 + num2)\nbut this is not:\nfor num in list_1:\n  for num in list_2:\n    print(num + num)\nThe above code will probably run, but it won’t give you the output you expect!\nIn this lesson, we are going to work with information about the planets!\n\n# create a list of planets\nplanets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto']\n\nFirst, let’s create a string containing the names of all the planets. We want something that looks like this:\n“mercury venus earth mars jupiter saturn uranus neptune pluto”\nThis can be done by creating an empty string, then adding the name of each planet using a for loop!\n\n# create an empty string called planet_string (hint: an empty string is just opening & closing quotation marks)\nplanet_string = ''\n\n# use a for loop to add each planet's name to the string\n# remember that each time we add a planet we also want to add a space\nfor planet in planets:\n    planet_string += planet + ' '\n\n# print the value of planet_string  \nprint(planet_string)\n\nmercury venus earth mars jupiter saturn uranus neptune pluto \n\n\nWhat if we wanted to create a string that only contained the planets further from the sun than Earth (these are the planets that come after Earth in our list).\n\n# create an empty string called after_earth\nafter_earth = ''\n\n# create a for loop similar to above, but only iterating over the planets after earth in the list\nfor index in range(3, len(planets)):\n    after_earth += planets[index] + ' '\n\n# print the value of after_earth\nprint(after_earth)\n\nmars jupiter saturn uranus neptune pluto \n\n\nWhat if we also wanted to look at more data about the planets? We can create a 2D list that contains more information about each planet.\n\n# the number of moons each planet has\nmoons = [0,0,1,2,67,62,27,14,5]\n\n# the distance of each planet from the sun (in millions of miles)\ndistances = [35.98,67.24,92.96,141.6,483.8,890.8,1784,2793,3670]\n\n# create a 2D list (list of lists) made up of the planets, moons,\n# and distances lists & assign it to the variable 'space'\nspace = [planets, moons, distances]\n\nWe can visualize our 2D list as looking something kind of like this:\nmercury | 0 | 35.98\nvenus   | 0 | 67.24\nearth   | 1 | 92.96\nmars    | 2 | 141.6\n  ...   |...|  ...\nBut when we print our 2D list, that isn’t what it looks like\n\n# print the 2D list space\nprint(space)\n\n[['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'], [0, 0, 1, 2, 67, 62, 27, 14, 5], [35.98, 67.24, 92.96, 141.6, 483.8, 890.8, 1784, 2793, 3670]]\n\n\nFortunately, we now know how to use nested for loops! Using one for loop to iterate over the “columns” of the 2D list and another to iterate over the “rows” of the 2D list, we can print out our 2D list so that it looks like a table.\nFirst we will loop through the planets and make an empty string that will become each row in the table. Then for each empty string/row, we will add the name of the planet, number of moons, and distance from the sun.\n\n# first loop through the planets\nfor planet_index in range(0, len(planets)):\n    # make an empty string to construct each row\n    row_string = ''\n    # make another loop here to get the right entries from the planets, moons, and distances list\n    # (hint: loop through \"space\" as we did with \"planets\" above)\n    # (hint 2: add str(space[your_loop_index][planet_index]) plus the tab character \"\\t\" to row_string)\n    for column_index in range(0, len(space)):\n        row_string += str(space[column_index][planet_index]) + '\\t'\n    print(row_string)\n    \n    \n\nmercury 0   35.98   \nvenus   0   67.24   \nearth   1   92.96   \nmars    2   141.6   \njupiter 67  483.8   \nsaturn  62  890.8   \nuranus  27  1784    \nneptune 14  2793    \npluto   5   3670"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice17_Pandas-Subsetting-II.html",
    "href": "Practices/_Keys/KEY_Practice17_Pandas-Subsetting-II.html",
    "title": "Practice: Subsetting Pandas DataFrames II",
    "section": "",
    "text": "For this practice, let’s use the iris dataset:\n\n# import the pandas package\nimport pandas as pd\n# set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# this is where the file is located\nfilename = path + 'SampleData/iris.csv'\n# load the iris dataset into a DataFrame\niris = pd.read_csv(filename)\n\nTake a look at the dataset:\n\n# take a look at the beginning\n\niris.head()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n# subset the first 5 rows from iris\n# save it to a variable called subset1\nsubset1 = iris.iloc[:5]\n\n\n# subset a few columns from the subset1 dataframe\n# save it to a variable called subset 2\ncolumns = ['sepal_length', 'sepal_width']\nsubset2 = subset1[columns]\n\nLet’s try subsetting both rows and columns at the same time!\n\n# create a new subset from iris that's identical to subset2\n# but write only one line of code\n# save it to a variable called subset3\nsubset3 = iris.iloc[:5][['sepal_length', 'sepal_width']]\n\n\n# check your work -- how does subset2 compare to subset3?\nsubset2 == subset3\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\n\n\n\n\n0\nTrue\nTrue\n\n\n1\nTrue\nTrue\n\n\n2\nTrue\nTrue\n\n\n3\nTrue\nTrue\n\n\n4\nTrue\nTrue\n\n\n\n\n\n\n\n\n# subset rows 20 through 30 and columns petal_length & petal width\n# write only one line of code\niris.iloc[20:31][['petal_length', 'petal_width']]\n\n\n\n\n\n\n\n\npetal_length\npetal_width\n\n\n\n\n20\n1.7\n0.2\n\n\n21\n1.5\n0.4\n\n\n22\n1.0\n0.2\n\n\n23\n1.7\n0.5\n\n\n24\n1.9\n0.2\n\n\n25\n1.6\n0.2\n\n\n26\n1.6\n0.4\n\n\n27\n1.5\n0.2\n\n\n28\n1.4\n0.2\n\n\n29\n1.6\n0.2\n\n\n30\n1.6\n0.2\n\n\n\n\n\n\n\nNow let’s subset using query:\n\n# subset rows where the species is not setosa\n\niris.query('species != \"setosa\"')\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n50\n7.0\n3.2\n4.7\n1.4\nversicolor\n\n\n51\n6.4\n3.2\n4.5\n1.5\nversicolor\n\n\n52\n6.9\n3.1\n4.9\n1.5\nversicolor\n\n\n53\n5.5\n2.3\n4.0\n1.3\nversicolor\n\n\n54\n6.5\n2.8\n4.6\n1.5\nversicolor\n\n\n55\n5.7\n2.8\n4.5\n1.3\nversicolor\n\n\n56\n6.3\n3.3\n4.7\n1.6\nversicolor\n\n\n57\n4.9\n2.4\n3.3\n1.0\nversicolor\n\n\n58\n6.6\n2.9\n4.6\n1.3\nversicolor\n\n\n59\n5.2\n2.7\n3.9\n1.4\nversicolor\n\n\n60\n5.0\n2.0\n3.5\n1.0\nversicolor\n\n\n61\n5.9\n3.0\n4.2\n1.5\nversicolor\n\n\n62\n6.0\n2.2\n4.0\n1.0\nversicolor\n\n\n63\n6.1\n2.9\n4.7\n1.4\nversicolor\n\n\n64\n5.6\n2.9\n3.6\n1.3\nversicolor\n\n\n65\n6.7\n3.1\n4.4\n1.4\nversicolor\n\n\n66\n5.6\n3.0\n4.5\n1.5\nversicolor\n\n\n67\n5.8\n2.7\n4.1\n1.0\nversicolor\n\n\n68\n6.2\n2.2\n4.5\n1.5\nversicolor\n\n\n69\n5.6\n2.5\n3.9\n1.1\nversicolor\n\n\n70\n5.9\n3.2\n4.8\n1.8\nversicolor\n\n\n71\n6.1\n2.8\n4.0\n1.3\nversicolor\n\n\n72\n6.3\n2.5\n4.9\n1.5\nversicolor\n\n\n73\n6.1\n2.8\n4.7\n1.2\nversicolor\n\n\n74\n6.4\n2.9\n4.3\n1.3\nversicolor\n\n\n75\n6.6\n3.0\n4.4\n1.4\nversicolor\n\n\n76\n6.8\n2.8\n4.8\n1.4\nversicolor\n\n\n77\n6.7\n3.0\n5.0\n1.7\nversicolor\n\n\n78\n6.0\n2.9\n4.5\n1.5\nversicolor\n\n\n79\n5.7\n2.6\n3.5\n1.0\nversicolor\n\n\n...\n...\n...\n...\n...\n...\n\n\n120\n6.9\n3.2\n5.7\n2.3\nvirginica\n\n\n121\n5.6\n2.8\n4.9\n2.0\nvirginica\n\n\n122\n7.7\n2.8\n6.7\n2.0\nvirginica\n\n\n123\n6.3\n2.7\n4.9\n1.8\nvirginica\n\n\n124\n6.7\n3.3\n5.7\n2.1\nvirginica\n\n\n125\n7.2\n3.2\n6.0\n1.8\nvirginica\n\n\n126\n6.2\n2.8\n4.8\n1.8\nvirginica\n\n\n127\n6.1\n3.0\n4.9\n1.8\nvirginica\n\n\n128\n6.4\n2.8\n5.6\n2.1\nvirginica\n\n\n129\n7.2\n3.0\n5.8\n1.6\nvirginica\n\n\n130\n7.4\n2.8\n6.1\n1.9\nvirginica\n\n\n131\n7.9\n3.8\n6.4\n2.0\nvirginica\n\n\n132\n6.4\n2.8\n5.6\n2.2\nvirginica\n\n\n133\n6.3\n2.8\n5.1\n1.5\nvirginica\n\n\n134\n6.1\n2.6\n5.6\n1.4\nvirginica\n\n\n135\n7.7\n3.0\n6.1\n2.3\nvirginica\n\n\n136\n6.3\n3.4\n5.6\n2.4\nvirginica\n\n\n137\n6.4\n3.1\n5.5\n1.8\nvirginica\n\n\n138\n6.0\n3.0\n4.8\n1.8\nvirginica\n\n\n139\n6.9\n3.1\n5.4\n2.1\nvirginica\n\n\n140\n6.7\n3.1\n5.6\n2.4\nvirginica\n\n\n141\n6.9\n3.1\n5.1\n2.3\nvirginica\n\n\n142\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n143\n6.8\n3.2\n5.9\n2.3\nvirginica\n\n\n144\n6.7\n3.3\n5.7\n2.5\nvirginica\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n100 rows × 5 columns\n\n\n\n\n# subset rows where sepal_width is greater than 4\n\niris.query('sepal_width &gt; 4')\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n15\n5.7\n4.4\n1.5\n0.4\nsetosa\n\n\n32\n5.2\n4.1\n1.5\n0.1\nsetosa\n\n\n33\n5.5\n4.2\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n# subset rows where sepal_width is between 2 and 3\n\niris.query('2 &lt; sepal_width &lt; 3')\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n8\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n41\n4.5\n2.3\n1.3\n0.3\nsetosa\n\n\n53\n5.5\n2.3\n4.0\n1.3\nversicolor\n\n\n54\n6.5\n2.8\n4.6\n1.5\nversicolor\n\n\n55\n5.7\n2.8\n4.5\n1.3\nversicolor\n\n\n57\n4.9\n2.4\n3.3\n1.0\nversicolor\n\n\n58\n6.6\n2.9\n4.6\n1.3\nversicolor\n\n\n59\n5.2\n2.7\n3.9\n1.4\nversicolor\n\n\n62\n6.0\n2.2\n4.0\n1.0\nversicolor\n\n\n63\n6.1\n2.9\n4.7\n1.4\nversicolor\n\n\n64\n5.6\n2.9\n3.6\n1.3\nversicolor\n\n\n67\n5.8\n2.7\n4.1\n1.0\nversicolor\n\n\n68\n6.2\n2.2\n4.5\n1.5\nversicolor\n\n\n69\n5.6\n2.5\n3.9\n1.1\nversicolor\n\n\n71\n6.1\n2.8\n4.0\n1.3\nversicolor\n\n\n72\n6.3\n2.5\n4.9\n1.5\nversicolor\n\n\n73\n6.1\n2.8\n4.7\n1.2\nversicolor\n\n\n74\n6.4\n2.9\n4.3\n1.3\nversicolor\n\n\n76\n6.8\n2.8\n4.8\n1.4\nversicolor\n\n\n78\n6.0\n2.9\n4.5\n1.5\nversicolor\n\n\n79\n5.7\n2.6\n3.5\n1.0\nversicolor\n\n\n80\n5.5\n2.4\n3.8\n1.1\nversicolor\n\n\n81\n5.5\n2.4\n3.7\n1.0\nversicolor\n\n\n82\n5.8\n2.7\n3.9\n1.2\nversicolor\n\n\n83\n6.0\n2.7\n5.1\n1.6\nversicolor\n\n\n87\n6.3\n2.3\n4.4\n1.3\nversicolor\n\n\n89\n5.5\n2.5\n4.0\n1.3\nversicolor\n\n\n90\n5.5\n2.6\n4.4\n1.2\nversicolor\n\n\n92\n5.8\n2.6\n4.0\n1.2\nversicolor\n\n\n93\n5.0\n2.3\n3.3\n1.0\nversicolor\n\n\n94\n5.6\n2.7\n4.2\n1.3\nversicolor\n\n\n96\n5.7\n2.9\n4.2\n1.3\nversicolor\n\n\n97\n6.2\n2.9\n4.3\n1.3\nversicolor\n\n\n98\n5.1\n2.5\n3.0\n1.1\nversicolor\n\n\n99\n5.7\n2.8\n4.1\n1.3\nversicolor\n\n\n101\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n103\n6.3\n2.9\n5.6\n1.8\nvirginica\n\n\n106\n4.9\n2.5\n4.5\n1.7\nvirginica\n\n\n107\n7.3\n2.9\n6.3\n1.8\nvirginica\n\n\n108\n6.7\n2.5\n5.8\n1.8\nvirginica\n\n\n111\n6.4\n2.7\n5.3\n1.9\nvirginica\n\n\n113\n5.7\n2.5\n5.0\n2.0\nvirginica\n\n\n114\n5.8\n2.8\n5.1\n2.4\nvirginica\n\n\n118\n7.7\n2.6\n6.9\n2.3\nvirginica\n\n\n119\n6.0\n2.2\n5.0\n1.5\nvirginica\n\n\n121\n5.6\n2.8\n4.9\n2.0\nvirginica\n\n\n122\n7.7\n2.8\n6.7\n2.0\nvirginica\n\n\n123\n6.3\n2.7\n4.9\n1.8\nvirginica\n\n\n126\n6.2\n2.8\n4.8\n1.8\nvirginica\n\n\n128\n6.4\n2.8\n5.6\n2.1\nvirginica\n\n\n130\n7.4\n2.8\n6.1\n1.9\nvirginica\n\n\n132\n6.4\n2.8\n5.6\n2.2\nvirginica\n\n\n133\n6.3\n2.8\n5.1\n1.5\nvirginica\n\n\n134\n6.1\n2.6\n5.6\n1.4\nvirginica\n\n\n142\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n\n\n\n\n\n\n# subset rows where sepal_width is less than 3.5 and the species is virginica\n\niris.query('sepal_width &lt; 3.5 and species == \"virginica\"')\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n100\n6.3\n3.3\n6.0\n2.5\nvirginica\n\n\n101\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n102\n7.1\n3.0\n5.9\n2.1\nvirginica\n\n\n103\n6.3\n2.9\n5.6\n1.8\nvirginica\n\n\n104\n6.5\n3.0\n5.8\n2.2\nvirginica\n\n\n105\n7.6\n3.0\n6.6\n2.1\nvirginica\n\n\n106\n4.9\n2.5\n4.5\n1.7\nvirginica\n\n\n107\n7.3\n2.9\n6.3\n1.8\nvirginica\n\n\n108\n6.7\n2.5\n5.8\n1.8\nvirginica\n\n\n110\n6.5\n3.2\n5.1\n2.0\nvirginica\n\n\n111\n6.4\n2.7\n5.3\n1.9\nvirginica\n\n\n112\n6.8\n3.0\n5.5\n2.1\nvirginica\n\n\n113\n5.7\n2.5\n5.0\n2.0\nvirginica\n\n\n114\n5.8\n2.8\n5.1\n2.4\nvirginica\n\n\n115\n6.4\n3.2\n5.3\n2.3\nvirginica\n\n\n116\n6.5\n3.0\n5.5\n1.8\nvirginica\n\n\n118\n7.7\n2.6\n6.9\n2.3\nvirginica\n\n\n119\n6.0\n2.2\n5.0\n1.5\nvirginica\n\n\n120\n6.9\n3.2\n5.7\n2.3\nvirginica\n\n\n121\n5.6\n2.8\n4.9\n2.0\nvirginica\n\n\n122\n7.7\n2.8\n6.7\n2.0\nvirginica\n\n\n123\n6.3\n2.7\n4.9\n1.8\nvirginica\n\n\n124\n6.7\n3.3\n5.7\n2.1\nvirginica\n\n\n125\n7.2\n3.2\n6.0\n1.8\nvirginica\n\n\n126\n6.2\n2.8\n4.8\n1.8\nvirginica\n\n\n127\n6.1\n3.0\n4.9\n1.8\nvirginica\n\n\n128\n6.4\n2.8\n5.6\n2.1\nvirginica\n\n\n129\n7.2\n3.0\n5.8\n1.6\nvirginica\n\n\n130\n7.4\n2.8\n6.1\n1.9\nvirginica\n\n\n132\n6.4\n2.8\n5.6\n2.2\nvirginica\n\n\n133\n6.3\n2.8\n5.1\n1.5\nvirginica\n\n\n134\n6.1\n2.6\n5.6\n1.4\nvirginica\n\n\n135\n7.7\n3.0\n6.1\n2.3\nvirginica\n\n\n136\n6.3\n3.4\n5.6\n2.4\nvirginica\n\n\n137\n6.4\n3.1\n5.5\n1.8\nvirginica\n\n\n138\n6.0\n3.0\n4.8\n1.8\nvirginica\n\n\n139\n6.9\n3.1\n5.4\n2.1\nvirginica\n\n\n140\n6.7\n3.1\n5.6\n2.4\nvirginica\n\n\n141\n6.9\n3.1\n5.1\n2.3\nvirginica\n\n\n142\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n143\n6.8\n3.2\n5.9\n2.3\nvirginica\n\n\n144\n6.7\n3.3\n5.7\n2.5\nvirginica\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\n\n# subset rows where the pedal width is 0.3 or the species is versicolor\n\niris.query('petal_width == 0.3 or species == \"versicolor\"')\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n6\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n17\n5.1\n3.5\n1.4\n0.3\nsetosa\n\n\n18\n5.7\n3.8\n1.7\n0.3\nsetosa\n\n\n19\n5.1\n3.8\n1.5\n0.3\nsetosa\n\n\n40\n5.0\n3.5\n1.3\n0.3\nsetosa\n\n\n41\n4.5\n2.3\n1.3\n0.3\nsetosa\n\n\n45\n4.8\n3.0\n1.4\n0.3\nsetosa\n\n\n50\n7.0\n3.2\n4.7\n1.4\nversicolor\n\n\n51\n6.4\n3.2\n4.5\n1.5\nversicolor\n\n\n52\n6.9\n3.1\n4.9\n1.5\nversicolor\n\n\n53\n5.5\n2.3\n4.0\n1.3\nversicolor\n\n\n54\n6.5\n2.8\n4.6\n1.5\nversicolor\n\n\n55\n5.7\n2.8\n4.5\n1.3\nversicolor\n\n\n56\n6.3\n3.3\n4.7\n1.6\nversicolor\n\n\n57\n4.9\n2.4\n3.3\n1.0\nversicolor\n\n\n58\n6.6\n2.9\n4.6\n1.3\nversicolor\n\n\n59\n5.2\n2.7\n3.9\n1.4\nversicolor\n\n\n60\n5.0\n2.0\n3.5\n1.0\nversicolor\n\n\n61\n5.9\n3.0\n4.2\n1.5\nversicolor\n\n\n62\n6.0\n2.2\n4.0\n1.0\nversicolor\n\n\n63\n6.1\n2.9\n4.7\n1.4\nversicolor\n\n\n64\n5.6\n2.9\n3.6\n1.3\nversicolor\n\n\n65\n6.7\n3.1\n4.4\n1.4\nversicolor\n\n\n66\n5.6\n3.0\n4.5\n1.5\nversicolor\n\n\n67\n5.8\n2.7\n4.1\n1.0\nversicolor\n\n\n68\n6.2\n2.2\n4.5\n1.5\nversicolor\n\n\n69\n5.6\n2.5\n3.9\n1.1\nversicolor\n\n\n70\n5.9\n3.2\n4.8\n1.8\nversicolor\n\n\n71\n6.1\n2.8\n4.0\n1.3\nversicolor\n\n\n72\n6.3\n2.5\n4.9\n1.5\nversicolor\n\n\n73\n6.1\n2.8\n4.7\n1.2\nversicolor\n\n\n74\n6.4\n2.9\n4.3\n1.3\nversicolor\n\n\n75\n6.6\n3.0\n4.4\n1.4\nversicolor\n\n\n76\n6.8\n2.8\n4.8\n1.4\nversicolor\n\n\n77\n6.7\n3.0\n5.0\n1.7\nversicolor\n\n\n78\n6.0\n2.9\n4.5\n1.5\nversicolor\n\n\n79\n5.7\n2.6\n3.5\n1.0\nversicolor\n\n\n80\n5.5\n2.4\n3.8\n1.1\nversicolor\n\n\n81\n5.5\n2.4\n3.7\n1.0\nversicolor\n\n\n82\n5.8\n2.7\n3.9\n1.2\nversicolor\n\n\n83\n6.0\n2.7\n5.1\n1.6\nversicolor\n\n\n84\n5.4\n3.0\n4.5\n1.5\nversicolor\n\n\n85\n6.0\n3.4\n4.5\n1.6\nversicolor\n\n\n86\n6.7\n3.1\n4.7\n1.5\nversicolor\n\n\n87\n6.3\n2.3\n4.4\n1.3\nversicolor\n\n\n88\n5.6\n3.0\n4.1\n1.3\nversicolor\n\n\n89\n5.5\n2.5\n4.0\n1.3\nversicolor\n\n\n90\n5.5\n2.6\n4.4\n1.2\nversicolor\n\n\n91\n6.1\n3.0\n4.6\n1.4\nversicolor\n\n\n92\n5.8\n2.6\n4.0\n1.2\nversicolor\n\n\n93\n5.0\n2.3\n3.3\n1.0\nversicolor\n\n\n94\n5.6\n2.7\n4.2\n1.3\nversicolor\n\n\n95\n5.7\n3.0\n4.2\n1.2\nversicolor\n\n\n96\n5.7\n2.9\n4.2\n1.3\nversicolor\n\n\n97\n6.2\n2.9\n4.3\n1.3\nversicolor\n\n\n98\n5.1\n2.5\n3.0\n1.1\nversicolor\n\n\n99\n5.7\n2.8\n4.1\n1.3\nversicolor\n\n\n\n\n\n\n\nBonus: Try to subset with both query and square brackets [] on the same line:\n\n# pick any query and any columns to subset with\n\niris.query('species != \"setosa\"')[['sepal_length', 'species']]  # answers may vary\n\n\n\n\n\n\n\n\nsepal_length\nspecies\n\n\n\n\n50\n7.0\nversicolor\n\n\n51\n6.4\nversicolor\n\n\n52\n6.9\nversicolor\n\n\n53\n5.5\nversicolor\n\n\n54\n6.5\nversicolor\n\n\n55\n5.7\nversicolor\n\n\n56\n6.3\nversicolor\n\n\n57\n4.9\nversicolor\n\n\n58\n6.6\nversicolor\n\n\n59\n5.2\nversicolor\n\n\n60\n5.0\nversicolor\n\n\n61\n5.9\nversicolor\n\n\n62\n6.0\nversicolor\n\n\n63\n6.1\nversicolor\n\n\n64\n5.6\nversicolor\n\n\n65\n6.7\nversicolor\n\n\n66\n5.6\nversicolor\n\n\n67\n5.8\nversicolor\n\n\n68\n6.2\nversicolor\n\n\n69\n5.6\nversicolor\n\n\n70\n5.9\nversicolor\n\n\n71\n6.1\nversicolor\n\n\n72\n6.3\nversicolor\n\n\n73\n6.1\nversicolor\n\n\n74\n6.4\nversicolor\n\n\n75\n6.6\nversicolor\n\n\n76\n6.8\nversicolor\n\n\n77\n6.7\nversicolor\n\n\n78\n6.0\nversicolor\n\n\n79\n5.7\nversicolor\n\n\n...\n...\n...\n\n\n120\n6.9\nvirginica\n\n\n121\n5.6\nvirginica\n\n\n122\n7.7\nvirginica\n\n\n123\n6.3\nvirginica\n\n\n124\n6.7\nvirginica\n\n\n125\n7.2\nvirginica\n\n\n126\n6.2\nvirginica\n\n\n127\n6.1\nvirginica\n\n\n128\n6.4\nvirginica\n\n\n129\n7.2\nvirginica\n\n\n130\n7.4\nvirginica\n\n\n131\n7.9\nvirginica\n\n\n132\n6.4\nvirginica\n\n\n133\n6.3\nvirginica\n\n\n134\n6.1\nvirginica\n\n\n135\n7.7\nvirginica\n\n\n136\n6.3\nvirginica\n\n\n137\n6.4\nvirginica\n\n\n138\n6.0\nvirginica\n\n\n139\n6.9\nvirginica\n\n\n140\n6.7\nvirginica\n\n\n141\n6.9\nvirginica\n\n\n142\n5.8\nvirginica\n\n\n143\n6.8\nvirginica\n\n\n144\n6.7\nvirginica\n\n\n145\n6.7\nvirginica\n\n\n146\n6.3\nvirginica\n\n\n147\n6.5\nvirginica\n\n\n148\n6.2\nvirginica\n\n\n149\n5.9\nvirginica\n\n\n\n\n100 rows × 2 columns"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice11_Loops2.html",
    "href": "Practices/_Keys/KEY_Practice11_Loops2.html",
    "title": "Practice with loops",
    "section": "",
    "text": "In today’s lesson, we learned about a few ways to change the way our for loops work. As a reminder:\n\nWe can use if/elif/else statements in loops to specify what code runs for certain items in the list\nWe can use continue to skip to the next item\nWe can use break to stop iterating through items in our list\n\nToday, we will be working with a 2D list called college_info, which has information about different colleges in the country. Each list in the 2D list has the name, city, and state of a certain college\n\n# college info:\ncollege_info = [[\"University of Michigan\", \"Ann Arbor\", \"Michigan\"], \n                [\"New York University\", \"New York\", \"New York\"], \n                [\"Grand Valley State University\", \"Allendale\", \"Michigan\"],\n                [\"Western Michigan University\",\"Kalamazoo\", \"Michigan\"],\n                [\"University of Alaska\", \"Fairbanks\", \"Alaska\"],\n                [\"University of Washington\", \"Seattle\", \"Washington\"],\n                [\"Stanford University\", \"Stanford\", \"California\"]]\n\nFirst, let’s get familiar with our dataset. Write a for loop that iterates through the list of colleges and prints out all the info for each college\n\n# iterate through the list of colleges and print out the info for each college\nfor college in college_info:\n    print(college)\n\n['University of Michigan', 'Ann Arbor', 'Michigan']\n['New York University', 'New York', 'New York']\n['Grand Valley State University', 'Allendale', 'Michigan']\n['Western Michigan University', 'Kalamazoo', 'Michigan']\n['University of Alaska', 'Fairbanks', 'Alaska']\n['University of Washington', 'Seattle', 'Washington']\n['Stanford University', 'Stanford', 'California']\n\n\nNext, let’s print out just the names of each college. Remember, each item in our for loop is a list, and the name of the college is the first item in the list.\n\n# iterate through the list of colleges and print out each college's name\nfor college in college_info:\n    print(college[0])\n\nUniversity of Michigan\nNew York University\nGrand Valley State University\nWestern Michigan University\nUniversity of Alaska\nUniversity of Washington\nStanford University\n\n\nWe can see that some of the schools in our list are in Michigan, and some are not. Let’s write a loop that prints “X is an in-state school” if a college is in the state of Michigan, and “X is not an in-state school” if a college is not in the state of Michigan.\n\n# use if/else to do something different for schools in michigan vs. not in michigan\nfor college in college_info:\n    if college[2] is 'Michigan':\n        print(college[0] + \" is an in-state school\")\n    else:\n        print(college[0] + \" is not an in-state school\")\n\nUniversity of Michigan is an in-state school\nNew York University is not an in-state school\nGrand Valley State University is an in-state school\nWestern Michigan University is an in-state school\nUniversity of Alaska is not an in-state school\nUniversity of Washington is not an in-state school\nStanford University is not an in-state school\n\n\nRemember that we can use continue to skip over certain items in our list. Write a for loop that uses continue to only print info about schools that are in Michigan.\nNote: this can also be done without using continue!\n\n# use continue to only print in-state schools\nfor college in college_info:\n    if college[2] is not 'Michigan':\n        continue\n    print(college)\n\n['University of Michigan', 'Ann Arbor', 'Michigan']\n['Grand Valley State University', 'Allendale', 'Michigan']\n['Western Michigan University', 'Kalamazoo', 'Michigan']\n\n\nThe keyword break can be used to stop iterating through our list once a certain condition is met. Use break to only print out information about schools that are before University of Alaska in the list.\n\n# use break to print info only about schools that are before U of A in the list\nfor college in college_info:\n    if college[0] == \"University of Alaska\":\n        break\n    print(college)\n\n['University of Michigan', 'Ann Arbor', 'Michigan']\n['New York University', 'New York', 'New York']\n['Grand Valley State University', 'Allendale', 'Michigan']\n['Western Michigan University', 'Kalamazoo', 'Michigan']"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice02_HelloWorld_Variables.html",
    "href": "Practices/_Keys/KEY_Practice02_HelloWorld_Variables.html",
    "title": "Hello World … Again",
    "section": "",
    "text": "Now it’s time for you to practice writing some of your very own Python code!\nOur goals for this GWC Club are for you to learn lots of new programming skills, but also to meet some new friends who will turn into your future data science colleagues. Write some Python code to teach your programming partner a little bit about yourself - share what Python prints with the programmer sitting next to you!\n\n# command python to print a string with some information about yourself. \n# include your name, your grade level and a fun fact about yourself\n\nprint(\"I'm Marlena, I'm in 20th grade and I've run four half marathons!\")\n\n\n# HINT: if you are getting an error message look back to the lesson. \n# What did we need to put around Hello World to make it print?\n\nI'm Marlena, I'm in 20th grade and I've run four half marathons!\n\n\nNow let’s use our coding skills to do some data science!\nIn a 2012 study conducted at MIT, researchers analyzed the differences between males and females applying to jobs at a mid-size high technology company. Out of the total 10,102 applicants, only 3,785 were female. Furthermore, only 177 females, compared to 626 males, applied for executive level positions. In the following exercises, you’ll use your new coding skills to summarize this data with some statistics.\n\n# assign total number of applicants and total number of female applicants to \n# the variables total_applicants and total_female_applicants, respectively\n# print your variables\ntotal_applicants = 10102\ntotal_female_applicants = 3785\nprint(total_applicants, total_female_applicants)\n# HINT: the function print can take more than one variable as an input by \n# placing \",\" between them.\n\n10102 3785\n\n\n\n# using these variable names, calculate the total number of male applicants using subtraction\n# assign this value to the variable total_male_applicants\n# print this variable\ntotal_male_applicants = total_applicants - total_female_applicants\nprint(total_male_applicants)\n\n6317\n\n\n\n# calculate the percentage of total applicants that are male using division\n# assign this value to the variable percent_male_applicants\n# print this variable\npercent_male_applicants = (total_male_applicants/total_applicants)*100\nprint(percent_male_applicants)\n\n62.53217184715898\n\n\n\n# calculate the percentage of total applicants that were female using division\n# assign this value to the variable percent_female_applicants\n# print this variable\npercent_female_applicants = (total_female_applicants/total_applicants)*100\nprint(percent_female_applicants)\n\n37.46782815284102\n\n\n\n# assign total number of male executive applicants and total number of female executive applicants\n# to the variables male_exec_applicants and female_exec_applicants, respectively\n# print your variables\nmale_exec_applicants = 626\nfemale_exec_applicants = 177\nprint(male_exec_applicants, female_exec_applicants)\n\n626 177\n\n\n\n# using these variable names, calculate the total number of executive applicants using addition\n# assign this value to the variable total_exec_applicants\n# print this variable\ntotal_exec_applicants = male_exec_applicants + female_exec_applicants\nprint(total_exec_applicants)\n\n803\n\n\n\n# calculate the percentage of total applicants that applied for executive positions using division\n# assign this value to the variable percent_total_applicants_exec\n# print this variable\npercent_total_applicants_exec = (total_exec_applicants/total_applicants)*100\nprint(percent_total_applicants_exec)\n\n7.948921005741437\n\n\n\n# calculate the percentage of female applicants that applied for executive positions using division\n# assign this value to the variable percent_female_applicants_exec\n# print this variable\npercent_female_applicants_exec = (female_exec_applicants/total_female_applicants)*100\nprint(percent_female_applicants_exec)\n\n4.676354029062088\n\n\n\n# calculate the percentage of male applicants that applied for executive positions using division\n# assign this value to the variable percent_male_applicants_exec\n# print this variable\npercent_male_applicants_exec = (male_exec_applicants/total_male_applicants)*100\nprint(percent_male_applicants_exec)\n\n9.909767294601867\n\n\nCongratulations! You just used Python code to perform data analysis for the first time!\nWhat do you think of your results? In 2016, the National Center for Women & Information Technology (NCWIT) found that women held only 25% of all positions in computing, and this number has been declining since reaching its peak of 36% in 1991. Though these numbers may seem discouraging, there have never been more resources dedicated to closing the gender gap in tech. Your participation in this GWC club is a great first step to prepare you for being a future leader in the tech industry!"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice08_Logic.html",
    "href": "Practices/_Keys/KEY_Practice08_Logic.html",
    "title": "Practice with logic",
    "section": "",
    "text": "We will practice: - using conditional operators to create booleans - identifying conditional operators that are opposite - using keywords like not, is, and, or\nPretend we are having a Girls Who Code party! We want to order cupcakes and brownies for the party so that we can enjoy some sweet treats together.\nAt the start of our planning, we have 25 guests attending. We have already baked 10 cupcakes and 10 brownies.\n\ncupcakes = 10\nbrownies = 10\n\nguests = 25\n\nEveryone coming to the party wants at least one cupcake and at least one brownie. Therefore, to have enough cupcakes and brownies, we want the number of each to be at least the number of guests.\n\n# create a boolean that tells us if we have enough cupcakes; save in enough_cupcakes\nenough_cupcakes = cupcakes &gt;= guests\n# print enough_cupcakes\nprint(enough_cupcakes)\n\n# create a boolean that tells us if we have enough brownies; save in enough_brownies\nenough_brownies = brownies &gt;= guests\n# print enough_brownies\nprint(enough_brownies)\n\nFalse\nFalse\n\n\nWe have enough food if we have enough cupcakes and we have enough brownies. Do we have enough food for the party?\n\n# create a boolean called enough_food that says if we are ready for the party\nenough_food = enough_cupcakes and enough_brownies\n\n# print enough_food\nprint(enough_food)\n\nFalse\n\n\nThe night before the party, we get busy baking, and we make 20 more cupcakes. Are we ready now?\n\n# add 20 to cupcakes\ncupcakes = cupcakes + 20\n\n# re-calculate enough_cupcakes\nenough_cupcakes = cupcakes &gt;= guests\n\n# re-calculate enough_food\nenough_food = enough_cupcakes and enough_brownies\n\n# print enough_food\nprint(enough_food)\n\nFalse\n\n\nWe also want to order party hats for the party. Hats can be expensive, so we don’t want to order more than we need, but we also want everyone to have one.\n\n# create a variable called hats and set it equal to 25\nhats = 25\n\n# create a boolean that determines if hats equals guests, and store it in enough_hats\nenough_hats = hats == guests\n\n# print enough_hats\nprint(enough_hats)\n\nTrue\n\n\nWe are ready for the party when we have enough food and when we have enough hats. Are we ready for the party?\n\n# create a variable called ready that says if we have enough food and enough hats\nready = enough_food and enough_hats\n\n# print ready\nprint(ready)\n\nFalse\n\n\n\n# add 30 to brownies\nbrownies = brownies + 30\n\n# re-calculate enough_brownies, enough_food and ready\nenough_brownies = brownies &gt;= guests\nenough_food = enough_brownies and enough_cupcakes\nready = enough_food and enough_hats\n\n# print ready\nprint(ready)\n\nTrue"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice26_Scatterplots.html",
    "href": "Practices/_Keys/KEY_Practice26_Scatterplots.html",
    "title": "Scatterplots",
    "section": "",
    "text": "Let’s start by importing seaborn and loading/previewing our iris data\n\n# import seaborn\nimport seaborn as sns\n# set up for inline plotting\n%matplotlib inline\n\n\n# load iris and preview the data\niris = sns.load_dataset(\"iris\")\niris.head(10)\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n6\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n7\n5.0\n3.4\n1.5\n0.2\nsetosa\n\n\n8\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n9\n4.9\n3.1\n1.5\n0.1\nsetosa\n\n\n\n\n\n\n\nIn the last lesson we examined the relationship between sepal_length and sepal_width. Now let’s look at this relationship for petal_length and petal_width using a scatterplot.\n\n# plot petal_length vs petal_width\nsns.scatterplot('petal_length', 'petal_width', data=iris)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x10e16e0f0&gt;\n\n\n\n\n\nThis relationship is definitely more clear without any stratification than our last example in the lesson. Let’s create this plot with a correlation trendline to visualize the trend even better.\n\n# plot petal_length vs petal_width with trendline\nsns.lmplot('petal_length', 'petal_width', data=iris)\n\n\n\n\nNow let’s stratify the plot by the species variable, using both color and marker shape.\n\n# plot petal_length vs petal_width\nsns.scatterplot('petal_length', 'petal_width', hue='species', style = 'species',data=iris)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x111594cf8&gt;\n\n\n\n\n\nWe can very clearly see the separation of our three species across these two variables.\nNow, let’s color our graph using the sepal_length variable (no marker shape). What do you notice about the way the graph is colored now?\n\n# plot petal_length vs petal_width\nsns.scatterplot('petal_length', 'petal_width', hue='sepal_length', data=iris)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11181b588&gt;\n\n\n\n\n\nNotice that sepal_length is a continuous variable, compared to the categorical variable species we originally used to color our plot. Seaborn can tell the difference by examining the type of the stratifying variable - int and float variables are continuous and string and boolean variables are seen as categorical.\nIt is important to consider variable type when choosing the color palette to use in our plots. Continuous variables require sequential color palettes (that go from light to dark shades, for example) and categorical variables require qualitative color palettes. You can find built-in seaborn color palettes here: https://seaborn.pydata.org/tutorial/color_palettes.html\nAfter looking through the link above, choose a new appropriate color palette for the plot above.\n\n# plot petal_length vs petal_width\nsns.scatterplot('petal_length', 'petal_width', hue='sepal_length', palette=\"BuGn\" ,data=iris)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x111860b70&gt;\n\n\n\n\n\nBased on this plot, what can you tell about the relationship of sepal_length compared to petal_length, petal_width?"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html",
    "href": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html",
    "title": "Jupyter Setup",
    "section": "",
    "text": "Hello! You’ve successfully opened this Jupyter Notebook in Google Colab. Congrats!\nThroughout the club, we will use pink & green sticky notes to keep tabs on how everyone is doing. If at any time you want help from a facilitator, put your pink sticky note on your laptop like this:\nDon’t hesitate to ask for help if you get stuck, have a question, or something just doesn’t make sense. We’re here to help you!\nWhen you reach the end of this practice notebook, put up your green sticky note so the facilitators know you’ve finished. A green sticky means “Everything is working great!”"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-code",
    "href": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-code",
    "title": "Jupyter Setup",
    "section": "Writing code",
    "text": "Writing code\nA Jupyter Notebook is a file that lets us run code and see the output right below it. Every chunk of code is called a cell. You can run a code cell by pressing the play button next to it. Hover your mouse over the brackets in cell below (or click on the cell) and press the play button to the left to see what happens!\n\n2 + 3\n\n5\n\n\nIsn’t that cool? Python did the math for us and showed us the answer. Like many programming languages, you can use Python just like a calculator.\nYou can create new code cells by pressing the button + Code in the upper left corner of the toolbar. (Hint: first select the cell you want the new one to appear beneath.)\nTry it here! Create a new code cell and add two numbers together.\n\n# any two numbers with an addition sign between them\n5 + 4\n\n9"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-comments",
    "href": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-comments",
    "title": "Jupyter Setup",
    "section": "Writing comments",
    "text": "Writing comments\nSometimes we want to write a comment inside a code cell as a note to our future selves or other coders, but we don’t want Python to interpret the comment as code. Code is meant to be read by computers and humans, while comments are meant to be read by humans only. You can begin a line with the hash symbol (#) so Python will know it’s a comment, like this:\n\n# this line is a comment. It doesn't get run as code\n11 + 23 # the first part of this line is code, but everything after # is a comment\n\n34\n\n\nThroughout the Lessons and Practices you will see code cells that begin with a comment that instructs you to do something, and a blank line below it where you should write code – like this:\n\n# add together the number of letters in your first & last name\n\nBesides addition with the plus symbol (+), Python can do lots of other operations including subtraction (-), multiplication (*), and division (/).\nPractice using them below!\n\n# subtract the year you were born from the current year\n\n\n# multiply the number of days in a week with the number of weeks in a year\n\n\n# divide the number of facilitators in the room by the total number of people\n\nNext week, we’ll continue to practice using Python as a calculator and learn how to reuse the results."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-text",
    "href": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#writing-text",
    "title": "Jupyter Setup",
    "section": "Writing Text",
    "text": "Writing Text\nWe can use text cells (this is one!) to write descriptions of what our code does, why we wrote it, and ideas for future work. We can use underscores (_) to make text italicized and double asterisks (**) to make text bold. We can also make a bulleted list using dashes - with on item on each line: - item 1 - item 2 - item 3\nPress the button + Text in the toolbar to create a new text cell below this one. Then, write a list of 3 things you’re looking forward to about this club. Make the one you’re most excited about bold. Share your answer with your neighbor!\nHere, students should have written what they’re looking forward to in the GWC club."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#moving-cells",
    "href": "Practices/_Keys/KEY_Practice01_Jupyter-Setup.html#moving-cells",
    "title": "Jupyter Setup",
    "section": "Moving cells",
    "text": "Moving cells\nYou can move cells around to change the order in the notebook by pressing the arrow buttons in the upper right corner of the cell. Try moving the cells below so that they’re in ascending order.\nThis is cell 1 (it should be first)\nThis is cell 2 (it should be second)\nThis is cell 3 (it should be third)"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice23_Basic_Stats_III_Correlations.html",
    "href": "Practices/_Keys/KEY_Practice23_Basic_Stats_III_Correlations.html",
    "title": "Practice 23: Correlations",
    "section": "",
    "text": "Remember: * A correlation is a measure of the statistical relationship between two variables * Correlations can be positive or negative, and strong or weak * The output of the corrcoef function is a correlation matrix\nFirst, import numpy and pandas:\n\n# load numpy and pandas and scipy.stats\n\nimport numpy as np\nimport pandas as pd\n\n\n#read in tips data\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\ntips = pd.read_csv(path + 'SampleData/tips.csv')\n\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\nWe want to calculate the correlations of total_bill, tip and size. Since we are getting the correlations for three variables, what size do we expect the resulting correlation matrix to be? How will the correlations be organized?\nANSWER: 3 x 3 matrix\n\n\n\n_\ntotal_bill\ntip\nsize\n\n\n\n\ntotal_bill\n_\n_\n_\n\n\ntip\n_\n_\n_\n\n\nsize\n_\n_\n_\n\n\n\n\n# create correlation matrix for total_bill, tip and size\n# HINT: what parameter do we need to use when our observations are along the rows?\ncorrs = np.corrcoef(tips[['total_bill', 'tip','size']], rowvar=False)\nprint(corrs)\n\n[[1.         0.67573411 0.59831513]\n [0.67573411 1.         0.48929878]\n [0.59831513 0.48929878 1.        ]]\n\n\nWhich two variables have the strongest correlation?\nANSWER: total_bill and tip\nWhich two variables have the weakest correlation?\nANSWER: tip and size\nCHALLENGE: What if these relationships are different between lunch and dinner? Create two subsets of tips for the lunch and dinner times and repeat the correlation analysis.\n\n# create two subsets of tips, one for lunch and one for dinner\nlunch = tips.query('time == \"Lunch\"')\ndinner = tips.query('time == \"Dinner\"')\n\n# compute the correlation matrix for each of the data subsets you created\nlunch_corrs = np.corrcoef(lunch[['total_bill', 'tip','size']], rowvar=False)\ndin_corrs = np.corrcoef(dinner[['total_bill', 'tip','size']], rowvar=False)\n\n#print the correlations\nprint(lunch_corrs)\nprint(din_corrs)\n\n[[1.         0.80542384 0.708662  ]\n [0.80542384 1.         0.64785392]\n [0.708662   0.64785392 1.        ]]\n[[1.         0.63287125 0.55701503]\n [0.63287125 1.         0.42850163]\n [0.55701503 0.42850163 1.        ]]\n\n\nWhat do you notice when you compare the results between the different times of day?\nAnswer: correlations are much stronger during the lunch shift than the dinner shift\nDo you have a hypothesis for why this might be? HINT: Does it have to do with a difference in the amount people generally spend for those meals? Or maybe the number of samples we have for each condition (i.e. meal time)?\n\n# find the average meal price for each meal time\nprint(np.mean(lunch['total_bill']))\nprint(np.mean(dinner['total_bill']))\n\n# find the number of samples we have for each meal time\n# HINT: use len()\nprint(len(lunch))\nprint(len(dinner))\n\n17.16867647058823\n20.7971590909091\n68\n176\n\n\nWhat do you notice here? When we look at the sample size, we find that we have a lot fewer samples from the lunch shift compared to the dinner shift. When our sample size is smaller, this means that each individual sample contributes more to our final statistic, here correlation. Also, we see that the average meal price is lower for lunch as well. Both of these differences are things we must consider when comparing the correlations of these two sets.\nNice job! You just practiced:\n\nUsing statistical tests to determine if two groups are significantly different\nUsing correlations to determine the relationships between variables"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice06_2D_Lists_Intro.html",
    "href": "Practices/_Keys/KEY_Practice06_2D_Lists_Intro.html",
    "title": "Practice with 2D lists!",
    "section": "",
    "text": "Remember: * Lists can be used to group different values together - it’s just a collection of things. * You can make a list in Python by putting different things in a box of brackets [] separated by commas. * 2D lists are lists of lists\nFirst, make a list of land animals including cat, dog, elephant, and any other land animals you want to include. Store it in the variable land:\n\n# command Python to make a list of land animals including dog, cat, and elephant. Store it in land\nland = ['cat','dog','elephant']\n\n# command Python to print land\nprint(land)\n\n['cat', 'dog', 'elephant']\n\n\nSecond, make a list of aquatic animals including fish, seahorse, and whale. Store it in the variable aquatic:\n\n# command Python to make a list of aquatic animals including fish, seahorse, and whale. Store it in aquatic\naquatic = ['fish','seahorse','whale']\n\n# command Python to print aquatic\nprint(aquatic)\n\n['fish', 'seahorse', 'whale']\n\n\nHow many things are in your land list? How about your aquatic list?\n\n# command Python to print the length of land\nprint(len(land))\n\n# command Python to print the length of aquatic\nprint(len(aquatic))\n\n3\n3\n\n\nOkay, time to make a 2D list! Combine land and aquatic into a 2D list called animals:\n\n# command Python to make a 2D list of animals that contains land and aquatic\nanimals = [land, aquatic]\n\n# commadn Python to print animals\nprint(animals)\n\n[['cat', 'dog', 'elephant'], ['fish', 'seahorse', 'whale']]\n\n\nNow, create another list called air and include robin, cardinal, and bat.\n\n# command Python to make a list called air\nair = ['robin','cardinal','bat']\n\nAdd air to your 2D animals list.\n\n# command Python to add air to your animals list \nanimals.append(air)\n\n# command Python to print animals\nprint(animals)\n\n# command Python to find the length of animals\nlen(animals)\n\n[['cat', 'dog', 'elephant'], ['fish', 'seahorse', 'whale'], ['robin', 'cardinal', 'bat']]\n\n\n3\n\n\nChallenge: Make a 2D list of numbers from 1 to 20 where the odd numbers are in the first list and the even numbers are in the second list\n\n# make 2D list of numbers\nodd = [1,3,5,7,9,11,13,15,17,19]\neven = [2,4,6,8,10,12,14,16,18,20]\nall_nums = [odd,even]\n# print out 2D list of numbers to see if you did it right!\nprint(all_nums)\n\n[[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]\n\n\nNow add your animals list and your numbers list together, print it out, and find the length!\n\n# add your animals list and your numbers list together\nboth_lists = animals + all_nums\n# print new list\nprint(both_lists)\n# find length of new list\nlen(both_lists)\n\n[['cat', 'dog', 'elephant'], ['fish', 'seahorse', 'whale'], ['robin', 'cardinal', 'bat'], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]\n\n\n5\n\n\nNice job! You just practiced: * Making a 2D list (a list of lists) * Finding the length of a 2D list (len) * Adding 2D lists together (+) * Adding things to a 2D list (.append)"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice13_Packages.html",
    "href": "Practices/_Keys/KEY_Practice13_Packages.html",
    "title": "Practice with packages!",
    "section": "",
    "text": "Remember: * Functions and methods take an input, do something with the input, and return an output * Functions can take arguments that modify the output of the function * Methods are specific to ceratin object types * Packages are collections of functions\nFirst, we have to import numpy:\n\n# command Python to import numpy\nimport numpy as np\n\nNow, let’s use a numpy function to get random numbers from a normal distribution (the bell curve):\n\n# use np.random.normal to get random numbers from a normal distribution\n# the 0 is the mean of the distribution and the 1 is the standard deviation. the 100 is the number of samples\nnumbers = np.random.normal(0, 1, 100)\n\n# print numbers\nprint(numbers)\n\n[-0.44473611  1.61091167 -0.16780124 -0.47166392  0.39801569  0.39936037\n  0.5244496  -0.12340431  2.29607915 -0.51371196 -1.48457599  0.86933537\n  0.56874893 -1.06748701  0.00504559  1.36121032  1.64686597  0.10499249\n  0.71157553 -0.05306914 -0.37685488  0.84424591  0.07702687  0.8531459\n  2.30776079  1.14143095 -1.12383005 -1.40714838  0.90471179 -1.37816972\n  0.86805295 -0.3597459   1.28197886  0.29987337 -0.06244328 -0.90876881\n -0.04653701  1.52861847 -1.02595625  0.30632531 -0.20932315  0.79326536\n  0.98951154 -1.92011606 -0.32316081  0.92385941 -0.68853578 -0.64836638\n  0.63010454 -0.53508069 -1.11531105 -0.75528584 -0.70519801  0.49354908\n  2.95703976 -1.4463473  -0.95519385  0.31500731  1.21343131 -0.62975996\n -0.71247028 -1.571144   -1.1532393   0.49965326 -0.23942728 -1.02602508\n -2.12747518  0.00648779  0.15805142 -0.1499272  -0.56387856  0.93090121\n -0.46651753 -0.0314912   0.69173354  1.05465131  0.57612046  0.23339215\n  0.77566339 -0.49910077 -0.21789798 -0.85653028  1.43829777 -0.10406763\n  1.32947621  0.143696   -1.22118852 -1.32901149  1.53361447 -0.77893451\n  0.78930636  0.17041165  0.20766317  0.34997351 -1.59560997  1.56551189\n -1.01570403  0.4881667  -0.57867737 -1.28920633]\n\n\nHow many elements are in numbers?\n\n# get the number of elements in numbers\nprint(len(numbers))\n\n100\n\n\nWhat is the mean of numbers?\n\n# command Python to get the mean of numbers\nnp.mean(numbers)\n\n0.036931950637023495\n\n\nGet the absolute value of numbers and save it to abs_num:\n\n# command Python to get the absolute value of numbers\nabs_num = np.abs(numbers)\n# print abs_num\nprint(abs_num)\n\n[0.44473611 1.61091167 0.16780124 0.47166392 0.39801569 0.39936037\n 0.5244496  0.12340431 2.29607915 0.51371196 1.48457599 0.86933537\n 0.56874893 1.06748701 0.00504559 1.36121032 1.64686597 0.10499249\n 0.71157553 0.05306914 0.37685488 0.84424591 0.07702687 0.8531459\n 2.30776079 1.14143095 1.12383005 1.40714838 0.90471179 1.37816972\n 0.86805295 0.3597459  1.28197886 0.29987337 0.06244328 0.90876881\n 0.04653701 1.52861847 1.02595625 0.30632531 0.20932315 0.79326536\n 0.98951154 1.92011606 0.32316081 0.92385941 0.68853578 0.64836638\n 0.63010454 0.53508069 1.11531105 0.75528584 0.70519801 0.49354908\n 2.95703976 1.4463473  0.95519385 0.31500731 1.21343131 0.62975996\n 0.71247028 1.571144   1.1532393  0.49965326 0.23942728 1.02602508\n 2.12747518 0.00648779 0.15805142 0.1499272  0.56387856 0.93090121\n 0.46651753 0.0314912  0.69173354 1.05465131 0.57612046 0.23339215\n 0.77566339 0.49910077 0.21789798 0.85653028 1.43829777 0.10406763\n 1.32947621 0.143696   1.22118852 1.32901149 1.53361447 0.77893451\n 0.78930636 0.17041165 0.20766317 0.34997351 1.59560997 1.56551189\n 1.01570403 0.4881667  0.57867737 1.28920633]\n\n\nWhat is the mean of abs_num?\n\n# command Python to print the mean of abs_num\nprint(np.mean(abs_num))\n\n0.806434097506584\n\n\nNow, let’s sort numbers:\n\n# sort numbers\nnumbers.sort()\n# print numbers\nprint(numbers)\n\n[-2.12747518 -1.92011606 -1.59560997 -1.571144   -1.48457599 -1.4463473\n -1.40714838 -1.37816972 -1.32901149 -1.28920633 -1.22118852 -1.1532393\n -1.12383005 -1.11531105 -1.06748701 -1.02602508 -1.02595625 -1.01570403\n -0.95519385 -0.90876881 -0.85653028 -0.77893451 -0.75528584 -0.71247028\n -0.70519801 -0.68853578 -0.64836638 -0.62975996 -0.57867737 -0.56387856\n -0.53508069 -0.51371196 -0.49910077 -0.47166392 -0.46651753 -0.44473611\n -0.37685488 -0.3597459  -0.32316081 -0.23942728 -0.21789798 -0.20932315\n -0.16780124 -0.1499272  -0.12340431 -0.10406763 -0.06244328 -0.05306914\n -0.04653701 -0.0314912   0.00504559  0.00648779  0.07702687  0.10499249\n  0.143696    0.15805142  0.17041165  0.20766317  0.23339215  0.29987337\n  0.30632531  0.31500731  0.34997351  0.39801569  0.39936037  0.4881667\n  0.49354908  0.49965326  0.5244496   0.56874893  0.57612046  0.63010454\n  0.69173354  0.71157553  0.77566339  0.78930636  0.79326536  0.84424591\n  0.8531459   0.86805295  0.86933537  0.90471179  0.92385941  0.93090121\n  0.98951154  1.05465131  1.14143095  1.21343131  1.28197886  1.32947621\n  1.36121032  1.43829777  1.52861847  1.53361447  1.56551189  1.61091167\n  1.64686597  2.29607915  2.30776079  2.95703976]\n\n\nNow let’s round numbers so each element has 2 decimal places:\n\n# command Python to round all elements in numbers to 2 decimal places\nnp.round(numbers,2)\n\narray([-2.13, -1.92, -1.6 , -1.57, -1.48, -1.45, -1.41, -1.38, -1.33,\n       -1.29, -1.22, -1.15, -1.12, -1.12, -1.07, -1.03, -1.03, -1.02,\n       -0.96, -0.91, -0.86, -0.78, -0.76, -0.71, -0.71, -0.69, -0.65,\n       -0.63, -0.58, -0.56, -0.54, -0.51, -0.5 , -0.47, -0.47, -0.44,\n       -0.38, -0.36, -0.32, -0.24, -0.22, -0.21, -0.17, -0.15, -0.12,\n       -0.1 , -0.06, -0.05, -0.05, -0.03,  0.01,  0.01,  0.08,  0.1 ,\n        0.14,  0.16,  0.17,  0.21,  0.23,  0.3 ,  0.31,  0.32,  0.35,\n        0.4 ,  0.4 ,  0.49,  0.49,  0.5 ,  0.52,  0.57,  0.58,  0.63,\n        0.69,  0.71,  0.78,  0.79,  0.79,  0.84,  0.85,  0.87,  0.87,\n        0.9 ,  0.92,  0.93,  0.99,  1.05,  1.14,  1.21,  1.28,  1.33,\n        1.36,  1.44,  1.53,  1.53,  1.57,  1.61,  1.65,  2.3 ,  2.31,\n        2.96])\n\n\nChallenge: Get the square root of the abs_num function. Save this to sqrt_abs_num. Hint: Use the function sqrt in the numpy package.\n\n# command Python to get the square root of the numbers in abs_num\nsqrt_abs_num = np.sqrt(abs_num)\n# print sqrt_abs_num\nprint(sqrt_abs_num)\n\n[0.66688538 1.26921695 0.4096355  0.68677793 0.63088485 0.63194966\n 0.72418893 0.3512895  1.51528187 0.71673702 1.21843178 0.93238156\n 0.75415445 1.03319263 0.07103229 1.16670918 1.28330276 0.32402545\n 0.84354936 0.23036741 0.61388507 0.91882855 0.27753715 0.92365897\n 1.51913159 1.06837772 1.06010851 1.18623285 0.95116339 1.17395473\n 0.93169359 0.59978822 1.13224505 0.54760695 0.24988653 0.95329367\n 0.21572438 1.23637311 1.01289498 0.55346663 0.45751847 0.89065446\n 0.99474194 1.38568253 0.56847235 0.96117606 0.82978056 0.80521201\n 0.79379124 0.7314921  1.05608288 0.86907183 0.83976068 0.70253049\n 1.71960454 1.2026418  0.97734019 0.56125512 1.10155858 0.79357417\n 0.84407955 1.25345283 1.0738898  0.70686156 0.48931307 1.01292896\n 1.4585867  0.08054681 0.39755681 0.38720434 0.75091848 0.96483222\n 0.68302089 0.17745761 0.8317052  1.02696218 0.759026   0.48310677\n 0.88071754 0.70647064 0.46679544 0.92548921 1.19929053 0.32259515\n 1.15302915 0.37907256 1.10507399 1.15282761 1.23839189 0.88257266\n 0.88842915 0.41280946 0.45570074 0.59158559 1.26317456 1.25120418\n 1.00782143 0.69868927 0.76070847 1.13543222]\n\n\nWhat is the max of the square roots? The min?\n\n# print the max of the square roots\nprint(max(sqrt_abs_num))\n# print the min of the square roots\nprint(min(sqrt_abs_num))\n\n1.7196045362429888\n0.07103229246818811\n\n\nNice job! You just practiced: * Importing packages in Python * Using functions in packages * Saving things to variables * Doing math with numpy"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice07_2D_Lists_Indexing.html",
    "href": "Practices/_Keys/KEY_Practice07_2D_Lists_Indexing.html",
    "title": "Practice with 2D list indexing!",
    "section": "",
    "text": "Remember: * Lists can be used to group different values together - it’s just a collection of things. * You can make a list in Python by putting different things in a box of brackets [] separated by commas. * 2D lists are lists of lists * You can double-index 2D lists to get an element from the sub-list\nLet’s use our list of animals:\n\n# command Python to make a list of animals\nanimals = [['cat','dog','elephant'],\n           ['fish','seahorse','whale'],\n           ['robin', 'cardinal', 'bat']]\n\n# command Python to print animals\nprint(animals)\n\n[['cat', 'dog', 'elephant'], ['fish', 'seahorse', 'whale'], ['robin', 'cardinal', 'bat']]\n\n\nGet the aquatic animals from your list:\n\n# command Python to get aquatic animals from your list\nanimals[1]\n\n['fish', 'seahorse', 'whale']\n\n\nWhat if you want to get seahorse from animals?\n\n# command Python to get seahorse from animals\nanimals[1][1]\n\n'seahorse'\n\n\nHow about getting elephant from the animals list?\n\n# command Python to get elephant from animals\nanimals[0][2]\n\n'elephant'\n\n\nNow create a list of your favorite land, aquatic, and air animals by subsetting the animals list. Call this list favorites and print it out to see if you indexed corretcly:\n\n# command Python to make a list called favorites with your favorite of each animal\nfavorites = [animals[0][2],animals[1][2],animals[2][2]]\n# command Python to print favorites\nprint(favorites)\n\n['elephant', 'whale', 'bat']\n\n\nChallenge: Using your 2D list of numbers from 1 to 20 get the even numbers from the list:\n\n# make 2D list of numbers\nnumbers = [[1,3,5,7,9,11,13,15,17,19],\n           [2,4,6,8,10,12,14,16,18,20]]\n# get the even numbers from numbers\nprint(numbers[1])\n\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n\nNow get your age from the list of numbers:\n\n# get your age from numbers and save it to age\nage = numbers[0][7]\n# print age to see if you did it correctly\nprint(age)\n\n15\n\n\nAdd 5 to your age and save it to age_plus_5. What do you think you’ll be doing in 5 years?\n\n# add 5 to your age\nage_plus_5 = age + 5\n# print age_plus_5\nprint(age_plus_5)\n\n20\n\n\nNow add 5 to age_plus_5 and save it to the variable age_plus_10. What do you think you’ll be doing in 10 years?\n\n# add 5 to age_plus_10\nage_plus_10 = age_plus_5 + 5\n# print age_plus_10\nprint(age_plus_10)\n\n25\n\n\nNice job! You just practiced: * Indexing a 2D list (a list of lists) * Making a new list from a subset of a 2D list * Saving things to variables * Adding variables and numbers"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice12_Functions_and_Methods.html",
    "href": "Practices/_Keys/KEY_Practice12_Functions_and_Methods.html",
    "title": "Practice with functions and methods!",
    "section": "",
    "text": "Remember: * Functions and methods take an input, do something with the input, and return an output * Functions can take arguments that modify the output of the function * Methods are specific to ceratin object types\nLet’s use the functions we learned on a new list of numbers:\n\n# make list of numbers\nnumbers = [-1.98109433,  0.4853873,  -0.36403664, -0.59780583,  0.11605985, -0.03363619,\n  0.07866253, -0.91272715, -0.17107551, -0.18762688,  1.72405448,  1.45011427,\n  1.78252183,  0.33430701, -0.65456432, -0.75685282,  0.6597416,   0.31665978,\n -0.89478975,  0.32167438,  1.04937506, -1.22575797, -0.53536782, -0.95484705,\n -1.18471148,  0.39326952, -1.46043887, -0.6158524,  -1.38622398, -0.08476239]\n\n# print numbers\nprint(numbers)\n\n[-1.98109433, 0.4853873, -0.36403664, -0.59780583, 0.11605985, -0.03363619, 0.07866253, -0.91272715, -0.17107551, -0.18762688, 1.72405448, 1.45011427, 1.78252183, 0.33430701, -0.65456432, -0.75685282, 0.6597416, 0.31665978, -0.89478975, 0.32167438, 1.04937506, -1.22575797, -0.53536782, -0.95484705, -1.18471148, 0.39326952, -1.46043887, -0.6158524, -1.38622398, -0.08476239]\n\n\nHow many elements are in numbers?\n\n# print length of numbers\nlen(numbers)\n\n30\n\n\nWhat is the sum of numbers?\n\n# get the number of elements in numbers\nsum(numbers)\n\n-5.29034377\n\n\nWhat about the minimum and maximum values in numbers?\n\n# command Python to print the minimum of numbers\nprint(min(numbers))\n# command Python to print the maximum of numbers\nprint(max(numbers))\n\n-1.98109433\n1.78252183\n\n\nGet the absolute value the first element in numbers.\n\n# get the absolute value\nabs(numbers[0])\n\n1.98109433\n\n\nFind the mean of numbers and save it to avg.\n\n# get mean of numbers and save to avg\navg = sum(numbers)/len(numbers)\n\n# print avg\nprint(avg)\n\n-0.17634479233333333\n\n\nRound avg to 2 decimal places:\n\n# command Python to round the first element in numbers\nround(avg,2)\n\n-0.18\n\n\nChallenge: Let’s work with our animals list:\n\n# command Python to make a list of animals\nanimals = [['cat','dog','elephant'],\n           ['fish','seahorse','whale'],\n           ['robin', 'cardinal', 'bat']]\n\n# command Python to print animals\nprint(animals)\n\n[['cat', 'dog', 'elephant'], ['fish', 'seahorse', 'whale'], ['robin', 'cardinal', 'bat']]\n\n\nWhat is the max of animals? Does this make sense?\n\n# command Python to get the max of animals\nprint(max(animals))\n\n['robin', 'cardinal', 'bat']\n\n\nWhat is the maximum of the land animals?\n\n# command Python to get the maximum of the land animals\nmax(animals[0])\n\n'elephant'\n\n\nWhat is the maximum of cat in the animals list? Use indexing to get cat.\n\n# print the max of cat\nmax(animals[0][0])\n\n't'\n\n\nNice job! You just practiced: * Using functions * Indexing lists * Saving things to variables"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice04_Lists_Intro.html",
    "href": "Practices/_Keys/KEY_Practice04_Lists_Intro.html",
    "title": "Practice with lists!",
    "section": "",
    "text": "Remember: * Lists can be used to group different values together - it’s just a collection of things. * You can make a list in Python by putting different things in a box of brackets [] separated by commas.\nFirst, make a list of pets including cat, dog, turtle, and any other pets you want to include. Store it in the variable pets:\n\n# command Python to make a list of pets including dog, cat, and turtle. Store it in pets\npets = ['dog','cat','turtle']\n# command Python to print pets\nprint(pets)\n\n['dog', 'cat', 'turtle']\n\n\nHow many things are in your pets list?\n\n# command Python to print the length of pets\nprint(len(pets))\n\n3\n\n\nAdd another pet (snake) to your pets list. (Note that you know 2 ways to do this! As a challenge, try to remember both ways!) Print out the list and find the length of the list.\n\n# command Python to add 'snake' to your pets list \n# (challenge:  find 2 ways to do this)\npets.append('snake')\n# command Python to print pets\nprint(pets)\n# command Python to find the length of pets\nprint(len(pets))\n\n['dog', 'cat', 'turtle', 'snake']\n4\n\n\nNow let’s make a list of numbers. Make a list of at least 5 numbers:\n\n# command Python to make a list of at least 5 numbers\nnumbers = [0,1,2,3,4]\n# command Python to print the list of numbers\nprint(numbers)\n# command Python to print the length of numbers\nprint(len(numbers))\n\n[0, 1, 2, 3, 4]\n5\n\n\nAdd your two lists (pets and numbers) together:\n\n# command python to add pets and numbers\npets + numbers\n\n['dog', 'cat', 'turtle', 'snake', 0, 1, 2, 3, 4]\n\n\nAssign the value 3.14 to the variable pi:\n\n# assign the value 3.14 to the variable pi\npi = 3.14\n\nAdd the variable pi to the list numbers:\n\n# add pi to numbers\nnumbers.append(pi)\n# print numbers\nprint(numbers)\n# print the length of numbers\nprint(len(numbers))\n\n[0, 1, 2, 3, 4, 3.14]\n6\n\n\nWhat happens if you add pi to numbers again?\n\n# add pi to numbers again\nnumbers.append(pi)\n# print numbers\nprint(numbers)\n# print the length of numbers\nprint(len(numbers))\n\n[0, 1, 2, 3, 4, 3.14, 3.14]\n7\n\n\nAdd two more numbers to your numbers list at the same time:\n\n# print your numbers list\nprint(numbers)\n# print the length of your numbers list\nprint(len(numbers))\n# add 2 numbers (your choice) to your numbers list\nnumbers = numbers + [1,2]\n# print your numbers list\nprint(numbers)\n# print the length of numbers\nprint(len(numbers))\n\n[0, 1, 2, 3, 4, 3.14, 3.14]\n7\n[0, 1, 2, 3, 4, 3.14, 3.14, 1, 2]\n9\n\n\nChallenge: Duplicate your list of pets so that it contains 2 of every pet in your list (ex. 2 dogs, 2 cats, etc.). Hint: use the * operator.\n\n# duplicate list of pets\npets*2\n\n['dog', 'cat', 'turtle', 'snake', 'dog', 'cat', 'turtle', 'snake']\n\n\nNice job! You just practiced: * Making a list ([]) * Finding the length of a list (len) * Adding lists together (+) * Adding things to a list (.append)"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html",
    "href": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html",
    "title": "Bar Charts and Histograms",
    "section": "",
    "text": "As always, let’s begin by importing our necessary packages and reading in/previewing our data. In this practice we will continue to explore the titanic dataset.\n# import seaborn\nimport seaborn as sns\n# set up for inline plotting\n%matplotlib inline\n# read in titanic data\ntitanic = sns.load_dataset(\"titanic\")\n# preview data\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nsex\nage\nsibsp\nparch\nfare\nembarked\nclass\nwho\nadult_male\ndeck\nembark_town\nalive\nalone\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\n7.2500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nFalse\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\n71.2833\nC\nFirst\nwoman\nFalse\nC\nCherbourg\nyes\nFalse\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\n7.9250\nS\nThird\nwoman\nFalse\nNaN\nSouthampton\nyes\nTrue\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n53.1000\nS\nFirst\nwoman\nFalse\nC\nSouthampton\nyes\nFalse\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n8.0500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nTrue"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#bar-charts",
    "href": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#bar-charts",
    "title": "Bar Charts and Histograms",
    "section": "Bar Charts",
    "text": "Bar Charts\nGenerate a barplot of survived (y-axis) across sex (x-axis).\n\n# barplot of sex vs survived \nsns.barplot(x=\"sex\", y = 'survived', data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x118fea588&gt;\n\n\n\n\n\nNow, generate a barplot of survived (y-axis) across sex (x-axis), stratified by class. Choose your favorite color palette.\n\n# barplot of sex vs survived stratified by class\nsns.barplot(x=\"sex\", y = 'survived', hue = \"class\", palette = \"Set3\",data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c5e1be0&gt;"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#histograms",
    "href": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#histograms",
    "title": "Bar Charts and Histograms",
    "section": "Histograms",
    "text": "Histograms\nGenerate a histogram of fare\n\n#histogram of fare\nsns.distplot(titanic['fare'], kde=False)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c606fd0&gt;\n\n\n\n\n\nNow let’s play with the bins parameter. First let’s try a small number of bins, like 10:\n\n#histogram of fare with 10 bins\nsns.distplot(titanic['fare'], kde=False, bins=10)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c723d30&gt;\n\n\n\n\n\nNow, let’s try a larger number of bins, say 100.\n\n#histogram of fare with 100 bins\nsns.distplot(titanic['fare'], kde=False, bins=100)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c843ac8&gt;\n\n\n\n\n\nAs you can see, most of the values are pretty small (&lt; 100 dollars), and there are only a few really large values. This is called a long-tailed distribution. Can you plot a histogram of just the fares that are less than 100 dollars?\n\n#histogram of fare\nsns.distplot(titanic.query('fare &lt; 100')['fare'], kde=False)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11cb77630&gt;"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#count-plots",
    "href": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#count-plots",
    "title": "Bar Charts and Histograms",
    "section": "Count Plots",
    "text": "Count Plots\nGenerate a count plot to visualize the distribution the deck variable across all passengers in our data set. Choose a sequential color palette.\n\n# count plot of deck\nsns.countplot(x=\"deck\", palette = \"Purples\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c87b668&gt;\n\n\n\n\n\nNow stratify your plot using the class variable. What kind of color palette is appropriate now?\n\n# count plot of deck stratified by class\nsns.countplot(x=\"deck\", hue = \"class\", palette = \"Set2\", data=titanic)\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x11ccf8198&gt;"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#congratulations",
    "href": "Practices/_Keys/KEY_Practice27_BarCharts_Histograms.html#congratulations",
    "title": "Bar Charts and Histograms",
    "section": "Congratulations!",
    "text": "Congratulations!\nYou just completed all of the core lessons in the GWC Club! Now it’s time to keep putting your data science skills to the test in your projects."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice24_Basic_Stats_IV_Significance.html",
    "href": "Practices/_Keys/KEY_Practice24_Basic_Stats_IV_Significance.html",
    "title": "Practice: Statistical Significance",
    "section": "",
    "text": "Let’s continue to work with the diabetes dataset to apply a t-test to real world data.\n\n# Import pandas, so that we can import the diabetes dataset and work with the data frame version of this data\nimport pandas as pd\n\n\n# Set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# This is where the file is located\nfilename = path + 'SampleData/diabetes.csv'\n\n\n# Load the diabetes dataset into a DataFrame\ndiabetes_df = pd.read_csv(filename)\ndiabetes_df\n\n\n\n\n\n\n\n\nAGE\nSEX\nBMI\nMAP\nTC\nLDL\nHDL\nTCH\nLTG\nGLU\nY\n\n\n\n\n0\n59\n2\n32.1\n101.00\n157\n93.2\n38.0\n4.00\n4.8598\n87\n151\n\n\n1\n48\n1\n21.6\n87.00\n183\n103.2\n70.0\n3.00\n3.8918\n69\n75\n\n\n2\n72\n2\n30.5\n93.00\n156\n93.6\n41.0\n4.00\n4.6728\n85\n141\n\n\n3\n24\n1\n25.3\n84.00\n198\n131.4\n40.0\n5.00\n4.8903\n89\n206\n\n\n4\n50\n1\n23.0\n101.00\n192\n125.4\n52.0\n4.00\n4.2905\n80\n135\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n437\n60\n2\n28.2\n112.00\n185\n113.8\n42.0\n4.00\n4.9836\n93\n178\n\n\n438\n47\n2\n24.9\n75.00\n225\n166.0\n42.0\n5.00\n4.4427\n102\n104\n\n\n439\n60\n2\n24.9\n99.67\n162\n106.6\n43.0\n3.77\n4.1271\n95\n132\n\n\n440\n36\n1\n30.0\n95.00\n201\n125.2\n42.0\n4.79\n5.1299\n85\n220\n\n\n441\n36\n1\n19.6\n71.00\n250\n133.2\n97.0\n3.00\n4.5951\n92\n57\n\n\n\n\n442 rows × 11 columns\n\n\n\nWe are interested in understanding whether there are differences in LDL levels (the “bad” cholesterol) by sex, i.e. are LDL levels different for males vs. females?\n1. Formulate the null hypothesis and the alternative hypothesis. - Null hypothesis: There is NO difference in LDL levels between male and female. - Alternative hypothesis: There is a difference in LDL levels by sex.\n\n# Import numpy \nimport numpy as np\n\nMales are indicated by “1” for the variable “SEX”, while females are indicated by “2”.\n\n# Define a vector of the LDL levels for males and name it ldl_male\ndiabetes_male = diabetes_df.query('SEX == 1')\nldl_male = diabetes_male['LDL']\n\n# Define a vector of the LDL levels for females and name it ldl_female\ndiabetes_female = diabetes_df.query('SEX == 2')\nldl_female = diabetes_female['LDL']\n\n2. Identify and compute a test statistic that can be used to reject or fail to reject the null hypothesis. - As we are working with two independent samples, we will use the two-sample t-test and use the t-statistic.\n3. Compute the test statistic and p-value.\n\n# Import stats methods to help calculate the t-statistic and p-value\nfrom scipy import stats\n\n\n# Run a Student's t-test\nt_statistic, p_value = stats.ttest_ind(ldl_male, ldl_female)\n\n# Print out the test statistic and p-value\nprint(\"t-statistic = \" + str(t_statistic))\nprint(\"p-value = \" + str(p_value))\n\nt-statistic = -3.022893334345971\np-value = 0.0026499873735660695\n\n\n4. Compare the p-value to an acceptable significance value, \\(\\alpha\\) and compare the test statistic to acceptable critical value(s). If p-value \\(\\leq \\alpha\\) and the test-statistic \\(\\geq\\) +critical value or test-statistic \\(\\leq\\) -critical value, that the observed effect is statistically significant, the null hypothesis is rejected, and the alternative hypothesis is valid.** - p-value \\(= 0.0026 \\lt 0.05\\), so we reject the null hypothesis. - t-statistic \\(= -3.02 \\lt -1.96\\), so this reaffirms that we reject the null hypothesis. - Interpretation: There is a significant difference in LDL levels between males and females.\nCongratulations on completing the lesson and practice!\nIt’s a lot of information, but you learned powerful tools to be on your way to answer your own research questions by analyzing real world data!\nChallenge: Using the code you wrote above as a template, can you run a t-test comparing LDL Cholesterol for people 50 & older vs. people under 50?\n\n# Define a vector of the LDL levels for people 50 or older\ndiabetes_over50 = diabetes_df.query('AGE &gt;= 50')\nldl_over50 = diabetes_over50['LDL']\n\n# Define a vector of the LDL levels for females and name it ldl_female\ndiabetes_under50 = diabetes_df.query('AGE &lt; 50')\nldl_under50 = diabetes_under50['LDL']\n\n# Run a Student's t-test\nt_statistic, p_value = stats.ttest_ind(ldl_over50, ldl_under50)\n\n# Print out the test statistic and p-value\nprint(\"t-statistic = \" + str(t_statistic))\nprint(\"p-value = \" + str(p_value))\n\nt-statistic = 3.185760417933572\np-value = 0.001546465356577734"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice22_Basic_Stats_II_Percents.html",
    "href": "Practices/_Keys/KEY_Practice22_Basic_Stats_II_Percents.html",
    "title": "GWC-DCMB Curriculum",
    "section": "",
    "text": "For this practice, let’s use the California housing dataset.\n\n# Import the fetch_california_housing method & load the data\nfrom sklearn.datasets import fetch_california_housing\ncalifornia = fetch_california_housing()\n\n\n# Import pandas, so that we can work with the data frame version of the California housing dataset\nimport pandas as pd\n\n\n# Print the characteristics of the California housing dataset\nprint(california.DESCR)\n\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block\n        - HouseAge      median house age in block\n        - AveRooms      average number of rooms\n        - AveBedrms     average number of bedrooms\n        - Population    block population\n        - AveOccup      average house occupancy\n        - Latitude      house block latitude\n        - Longitude     house block longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttp://lib.stat.cmu.edu/datasets/\n\nThe target variable is the median house value for California districts.\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n\n\n\n# Convert the California housing data to a dataframe format so it's easier to view and process\ncalifornia_df = pd.DataFrame(california['data'], columns = california['feature_names'])\ncalifornia_df['HouseValue'] = california['target']\ncalifornia_df\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nHouseValue\n\n\n\n\n0\n8.3252\n41.0\n6.984127\n1.023810\n322.0\n2.555556\n37.88\n-122.23\n4.526\n\n\n1\n8.3014\n21.0\n6.238137\n0.971880\n2401.0\n2.109842\n37.86\n-122.22\n3.585\n\n\n2\n7.2574\n52.0\n8.288136\n1.073446\n496.0\n2.802260\n37.85\n-122.24\n3.521\n\n\n3\n5.6431\n52.0\n5.817352\n1.073059\n558.0\n2.547945\n37.85\n-122.25\n3.413\n\n\n4\n3.8462\n52.0\n6.281853\n1.081081\n565.0\n2.181467\n37.85\n-122.25\n3.422\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n20635\n1.5603\n25.0\n5.045455\n1.133333\n845.0\n2.560606\n39.48\n-121.09\n0.781\n\n\n20636\n2.5568\n18.0\n6.114035\n1.315789\n356.0\n3.122807\n39.49\n-121.21\n0.771\n\n\n20637\n1.7000\n17.0\n5.205543\n1.120092\n1007.0\n2.325635\n39.43\n-121.22\n0.923\n\n\n20638\n1.8672\n18.0\n5.329513\n1.171920\n741.0\n2.123209\n39.43\n-121.32\n0.847\n\n\n20639\n2.3886\n16.0\n5.254717\n1.162264\n1387.0\n2.616981\n39.37\n-121.24\n0.894\n\n\n\n\n20640 rows × 9 columns\n\n\n\nDetermine the percentage of recently built houses (i.e. houses with an age less than 10 years).\n\n# Using the boolean array method, \n# get the number of houses less than 10 years old \nnum_new_houses = sum(california_df['HouseAge'] &lt; 10)\n\n# Determine the total number of houses in the dataset\ntotal_num = len(california_df['HouseAge'])\n\n# Calculate the percentage of recently built houses.\nnum_new_houses/total_num*100\n\n6.3226744186046515\n\n\nWhat is the easiest way to calculate the percentage of houses that are 10 years or older? Try to do this in one line of code.\n\n100 - num_new_houses/total_num*100\n\n93.67732558139535\n\n\nThat’s right! Just take the difference from 100%.\nNow, let’s double check this by calculating the percentage using comparison operators (&lt;, &gt;, =&lt;, =&gt;, !=, ==).\n\n# Determine number of houses with an age of 10 years or greater. \nnum_old_houses = sum(california_df['HouseAge'] &gt;= 10)\n\n# Calculate the percentage of older houses.\nnum_old_houses/total_num*100\n\n93.67732558139535\n\n\nNicely done!\nLet’s do another problem. Determine the percentages of houses that are less than 20 years old AND have an average value of greater than or equal to $80,000 (which is 0.8 in this data, HouseValue is in units of $100,000).\nYou’ll be using logical operators (and, or) to solve this problem. The and operator signifies all conditions must be true, while or only requires one of the conditions to be true.\n\n# Determine number of houses with an age less than 20 years AND valued at $80,000 or more\nnum_both = sum((california_df['HouseAge'] &lt; 20) and (california_df['HouseValue'] &gt;= 0.8))\n\n# Calculate the percentage of these houses meeting both conditions from the total.\nnum_both/total_num*100\n\n26.148255813953487\n\n\nNow we’ll calculate the percentages of houses that are less than 20 years old OR have an average value of greater than or equal to 0.8.\n\n# Determine number of houses with an age less than 20 years OR cost $80,000 or more\nnum_either = sum((california_df['HouseAge'] &lt; 20) or (california_df['HouseValue'] &gt;= 0.8))\n\n# Calculate the percentage of these houses meeting either condition from the total.\nnum_either/total_num*100\n\n92.84399224806201\n\n\nWhy are these two results different?\nNice work learning how to calculate percentages!"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice20_Numpy_Intro.html",
    "href": "Practices/_Keys/KEY_Practice20_Numpy_Intro.html",
    "title": "Practice with numpy!",
    "section": "",
    "text": "Remember: * Numpy provides a bunch of useful tools for performing calculations * You access numpy functions by calling np.function_name\nFirst, import numpy. Remember to use the nickname!\n\n# load numpy\nimport numpy as np\n\nUse numpy to create a list of numbers from 0 through 99. We’ll use a function called arange.\n\n# Use np.arrange to generate an array of numbers and assign it to a variable called numbers\nnumbers = np.arange(100)\n# print the array to see what it looks like\nprint(numbers)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n 96 97 98 99]\n\n\nNow use numpy’s function called zeros to create another empty array of the same size:\n\n# Create an empty array with np.zeros and assign it to a variable\nzeros = np.zeros(100)\n# print it\nprint(zeros)\n\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0.]\n\n\nNow try manipulating the arrays using basic math:\n\n# Add the numbers array to itself\nnumbers + numbers \n\narray([  0,   2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,  24,\n        26,  28,  30,  32,  34,  36,  38,  40,  42,  44,  46,  48,  50,\n        52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,\n        78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98, 100, 102,\n       104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128,\n       130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154,\n       156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,\n       182, 184, 186, 188, 190, 192, 194, 196, 198])\n\n\n\n# Multiply the numbers array to itself\nnumbers * numbers\n\narray([   0,    1,    4,    9,   16,   25,   36,   49,   64,   81,  100,\n        121,  144,  169,  196,  225,  256,  289,  324,  361,  400,  441,\n        484,  529,  576,  625,  676,  729,  784,  841,  900,  961, 1024,\n       1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849,\n       1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916,\n       3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225,\n       4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776,\n       5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569,\n       7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604,\n       9801])\n\n\nNote that when you perform a math operation on an array, it will often perform that operation on each item in that array. It’s convenient that we don’t have to loop through all the values to apply the math operation to every item in the array.\nYou can find information about the size of an array by using .shape. Note that .shape is an attribute of array – a special variable that belongs to every array object. Try it out:\nHINT: Because .shape is not a function you don’t need to use parentheses.\n\n# Use shape to view the size of your array\nnumbers.shape\n\n(100,)\n\n\n.shape gave us just one number, because our array has only 1 dimension. Later we’ll see what it looks like for arrays with more than 1 dimension.\nNumpy also allows you to create 2D arrays, like with lists. We can use the method called reshape to change an 1-dimensional array into a 2-dimensional array. reshape takes two arguments: the number of rows and the number of columns. Try turning one of your arrays into a 2D array using reshape.\n\n# Reshape one of your arrays into a 2D array\nnumbers_2d = numbers.reshape( 10, 10 )\nnumbers_2d\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])\n\n\nNow the .shape of your array should be changed, try printing it out below:\n\n# Print the shape of your new array\nnumbers_2d.shape\n\n(10, 10)\n\n\nNow we will try a couple of numpy’s math functions!\n\n# try using np.sum to add the items in a list together\nprint(np.sum(numbers))\n\n4950\n\n\n\n# try squaring the value of each item in your array\nprint(numbers**2)\n\n[   0    1    4    9   16   25   36   49   64   81  100  121  144  169\n  196  225  256  289  324  361  400  441  484  529  576  625  676  729\n  784  841  900  961 1024 1089 1156 1225 1296 1369 1444 1521 1600 1681\n 1764 1849 1936 2025 2116 2209 2304 2401 2500 2601 2704 2809 2916 3025\n 3136 3249 3364 3481 3600 3721 3844 3969 4096 4225 4356 4489 4624 4761\n 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561 6724 6889\n 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409\n 9604 9801]\n\n\nTry converting the numbers array to an array of floats using the method called astype:\n\n# Convert the array into an array of floats\nprint(numbers.astype(float))\n\n[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17.\n 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35.\n 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53.\n 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. 64. 65. 66. 67. 68. 69. 70. 71.\n 72. 73. 74. 75. 76. 77. 78. 79. 80. 81. 82. 83. 84. 85. 86. 87. 88. 89.\n 90. 91. 92. 93. 94. 95. 96. 97. 98. 99.]\n\n\nNice job! You just practiced:\n\nUsing numpy to perform array operations.\nPerforming math with numpy."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice19_Functions.html",
    "href": "Practices/_Keys/KEY_Practice19_Functions.html",
    "title": "Practice with functions",
    "section": "",
    "text": "Remember: - Functions are used to make your code easier to read and reuse. - Functions take an input (arguments) and return an output. - Arguments are variables that only exist inside the function. - You can have default arguments for your function. - Document your function well so other people know how to use it!\nNow you get to try writing your own function!\nNow that we’ve gone over how to write a function, it’s time to try it out yourself! Write a function called average that takes a list of numbers and returns the mean of those numbers.\n\n# define a function called average to calculate mean\ndef average(number_list):\n    return sum(number_list)/len(number_list)\n\nCheck to see if your function works:\n\n# list of numbers\nn = [1,1,2,3,5,8,13]\n#n = [0,1,2,3,4,5]\n# get average\naverage(n)\n\n4.714285714285714\n\n\nNow, add second argument that is either True or False that will round the average to the nearest whole number. Hint: There is a built-in function to round numbers in Python.\n\n# define a function called average to calculate mean\ndef average(number_list,round_number):\n    avg = sum(number_list)/len(number_list)\n    if round_number:\n        return round(avg)\n    else:\n        return avg\n\n\n# test your function with rounding (print out the output)\nprint(average(n,True))\n\n# test your function without rounding (print out the output)\nprint(average(n,False))\n\n5\n4.714285714285714\n\n\nDid you notice if it rounds up or down when the decimal is .5? Is this what you expected?\nNow make the default be to not round to the nearest whole number.\n\n# define a function called average to calculate mean\ndef average(number_list,round_number=False):\n    avg = sum(number_list)/len(number_list)\n    if round_number:\n        return round(avg)\n    else:\n        return avg\n\n\n# test out your function\nprint(average(n))\n\n4.714285714285714\n\n\nNice job! You just practiced writing your own function, and using default arguments."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice14_Pandas-Intro.html",
    "href": "Practices/_Keys/KEY_Practice14_Pandas-Intro.html",
    "title": "Practice: Intro to Pandas",
    "section": "",
    "text": "First we need to import the pandas package. Let’s give it the same special nickname we used before—pd.\n\n# import the pandas package with the nickname pd\n\nimport pandas as pd\n\nNow we’ll create a DataFrame. Modify this cell to save it to a variable called car_data.\n\n# save the DataFrame to a variable\ncar_data = pd.DataFrame({'acceleration': [12.0,11.5,11.0,12.0,10.5,10.0,9.0,8.5,10.0,8.5,10.0,8.0,9.5,10.0,15.0,15.5,15.5,16.0,14.5,20.5],\n 'cylinders': [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 6, 6, 6, 4, 4],\n 'displacement': [307.0,350.0,318.0,304.0,302.0,429.0,454.0,440.0,455.0,390.0,383.0,340.0,400.0,455.0,113.0,198.0,199.0,200.0,97.0,97.0],\n 'horsepower': [130.0,165.0,150.0,150.0,140.0,198.0,220.0,215.0,225.0,190.0,170.0,160.0,150.0,225.0,95.0,95.0,97.0,85.0,88.0,46.0],\n 'model_year': [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70],\n 'mpg': [18.0,15.0,18.0,16.0,17.0,15.0,14.0,14.0,14.0,15.0,15.0,14.0,15.0,14.0,24.0,22.0,18.0,21.0,27.0,26.0],\n 'name': ['chevrolet chevelle malibu','buick skylark 320','plymouth satellite','amc rebel sst','ford torino','ford galaxie 500','chevrolet impala','plymouth fury iii','pontiac catalina','amc ambassador dpl','dodge challenger se',\"plymouth 'cuda 340\",'chevrolet monte carlo','buick estate wagon (sw)','toyota corona mark ii','plymouth duster','amc hornet','ford maverick','datsun pl510','volkswagen 1131 deluxe sedan'],\n 'origin': ['usa','usa','usa','usa','usa','usa','usa','usa','usa','usa','usa','usa','usa','usa','japan','usa','usa','usa','japan','europe'],\n 'weight': [3504,3693,3436,3433,3449,4341,4354,4312,4425,3850,3563,3609,3761,3086,2372,2833,2774,2587,2130,1835]})\n\nNow explore the car_data DataFrame. View the first few rows:\n\n# view the first 5 rows\n\ncar_data.head(5)\n\n\n\n\n\n\n\n\nacceleration\ncylinders\ndisplacement\nhorsepower\nmodel_year\nmpg\nname\norigin\nweight\n\n\n\n\n0\n12.0\n8\n307.0\n130.0\n70\n18.0\nchevrolet chevelle malibu\nusa\n3504\n\n\n1\n11.5\n8\n350.0\n165.0\n70\n15.0\nbuick skylark 320\nusa\n3693\n\n\n2\n11.0\n8\n318.0\n150.0\n70\n18.0\nplymouth satellite\nusa\n3436\n\n\n3\n12.0\n8\n304.0\n150.0\n70\n16.0\namc rebel sst\nusa\n3433\n\n\n4\n10.5\n8\n302.0\n140.0\n70\n17.0\nford torino\nusa\n3449\n\n\n\n\n\n\n\n\n# view the first 10 rows\n\ncar_data.head(10)\n\n\n\n\n\n\n\n\nacceleration\ncylinders\ndisplacement\nhorsepower\nmodel_year\nmpg\nname\norigin\nweight\n\n\n\n\n0\n12.0\n8\n307.0\n130.0\n70\n18.0\nchevrolet chevelle malibu\nusa\n3504\n\n\n1\n11.5\n8\n350.0\n165.0\n70\n15.0\nbuick skylark 320\nusa\n3693\n\n\n2\n11.0\n8\n318.0\n150.0\n70\n18.0\nplymouth satellite\nusa\n3436\n\n\n3\n12.0\n8\n304.0\n150.0\n70\n16.0\namc rebel sst\nusa\n3433\n\n\n4\n10.5\n8\n302.0\n140.0\n70\n17.0\nford torino\nusa\n3449\n\n\n5\n10.0\n8\n429.0\n198.0\n70\n15.0\nford galaxie 500\nusa\n4341\n\n\n6\n9.0\n8\n454.0\n220.0\n70\n14.0\nchevrolet impala\nusa\n4354\n\n\n7\n8.5\n8\n440.0\n215.0\n70\n14.0\nplymouth fury iii\nusa\n4312\n\n\n8\n10.0\n8\n455.0\n225.0\n70\n14.0\npontiac catalina\nusa\n4425\n\n\n9\n8.5\n8\n390.0\n190.0\n70\n15.0\namc ambassador dpl\nusa\n3850\n\n\n\n\n\n\n\nWhat does the end of the DataFrame look like? Try viewing the last few rows:\n\n# view the last 5 rows\n\ncar_data.tail(5)\n\n\n\n\n\n\n\n\nacceleration\ncylinders\ndisplacement\nhorsepower\nmodel_year\nmpg\nname\norigin\nweight\n\n\n\n\n15\n15.5\n6\n198.0\n95.0\n70\n22.0\nplymouth duster\nusa\n2833\n\n\n16\n15.5\n6\n199.0\n97.0\n70\n18.0\namc hornet\nusa\n2774\n\n\n17\n16.0\n6\n200.0\n85.0\n70\n21.0\nford maverick\nusa\n2587\n\n\n18\n14.5\n4\n97.0\n88.0\n70\n27.0\ndatsun pl510\njapan\n2130\n\n\n19\n20.5\n4\n97.0\n46.0\n70\n26.0\nvolkswagen 1131 deluxe sedan\neurope\n1835\n\n\n\n\n\n\n\nWhat happens when you call head or tail without putting a number between the parentheses?\n\n# try using head without a number\n\ncar_data.head()\n\n\n\n\n\n\n\n\nacceleration\ncylinders\ndisplacement\nhorsepower\nmodel_year\nmpg\nname\norigin\nweight\n\n\n\n\n0\n12.0\n8\n307.0\n130.0\n70\n18.0\nchevrolet chevelle malibu\nusa\n3504\n\n\n1\n11.5\n8\n350.0\n165.0\n70\n15.0\nbuick skylark 320\nusa\n3693\n\n\n2\n11.0\n8\n318.0\n150.0\n70\n18.0\nplymouth satellite\nusa\n3436\n\n\n3\n12.0\n8\n304.0\n150.0\n70\n16.0\namc rebel sst\nusa\n3433\n\n\n4\n10.5\n8\n302.0\n140.0\n70\n17.0\nford torino\nusa\n3449\n\n\n\n\n\n\n\n\n# try using tail without a number\n\ncar_data.tail()\n\n\n\n\n\n\n\n\nacceleration\ncylinders\ndisplacement\nhorsepower\nmodel_year\nmpg\nname\norigin\nweight\n\n\n\n\n15\n15.5\n6\n198.0\n95.0\n70\n22.0\nplymouth duster\nusa\n2833\n\n\n16\n15.5\n6\n199.0\n97.0\n70\n18.0\namc hornet\nusa\n2774\n\n\n17\n16.0\n6\n200.0\n85.0\n70\n21.0\nford maverick\nusa\n2587\n\n\n18\n14.5\n4\n97.0\n88.0\n70\n27.0\ndatsun pl510\njapan\n2130\n\n\n19\n20.5\n4\n97.0\n46.0\n70\n26.0\nvolkswagen 1131 deluxe sedan\neurope\n1835\n\n\n\n\n\n\n\nWhat do the rows of the DataFrame represent?\nAnswers: Different types of cars\nWhat measurements or observations do we have about the data?\nAnswer: acceleration, cylinder count, engine displacement, horsepower, model year, mpg, name, country of origin, and weight\nWhat types of variables are in each of the columns?\n\nacceleration: float\ncylinders: int\ndisplacement: float\nhorsepower: float\nmodel_year: int\nmpg: float\nname: string\norigin: string\nweight: int"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice18_Dictionaries.html",
    "href": "Practices/_Keys/KEY_Practice18_Dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "Now it’s time to practice with dictionaries!\nLet’s start by making a dictionary of relatives in your family. Make a dictionary where the keys are a relation (ex. mom, dad, sister, brother, uncle, aunt, cousin, etc.), and the values are the people’s name(s) who are related to you in that way:\n\n# make dictionary of relations\nfamily = {'mom':'carmen',\n         'dad':'dan',\n         'sister':'maya',\n         'brother':'sam',\n         'uncle':['russell','david'],\n         'aunt':['helene','sharry','diana','debbie'],\n         'cousin':['zane','nico','hannah','alyssa','zach','kamilya','ismail','saidi']}\n\n# print out your dictionary\nprint(family)\n\n{'mom': 'carmen', 'dad': 'dan', 'sister': 'maya', 'brother': 'sam', 'uncle': ['russell', 'david'], 'aunt': ['helene', 'sharry', 'diana', 'debbie'], 'cousin': ['zane', 'nico', 'hannah', 'alyssa', 'zach', 'kamilya', 'ismail', 'saidi']}\n\n\nNow access all your aunts:\n\n# access all aunts in dictionary\nfamily['aunt']\n\n['helene', 'sharry', 'diana', 'debbie']\n\n\nWhat if you don’t remember all of the keys in your dictionary? How can you print them all out?\n\n# print all keys in dictionary\nfamily.keys()\n\ndict_keys(['mom', 'dad', 'sister', 'brother', 'uncle', 'aunt', 'cousin'])\n\n\nNow you’ve decided that you want to add some of your closest friends to the list too. Add a key-value pair to your dictionary with some of your closest friends:\n\n# add friends to dictionary\nfamily['friends'] = ['brooke','marlena','kelly']\n\n# print dictionary to see if it worked!\n\nfamily\n\n{'aunt': ['helene', 'sharry', 'diana', 'debbie'],\n 'brother': 'sam',\n 'cousin': ['zane',\n  'nico',\n  'hannah',\n  'alyssa',\n  'zach',\n  'kamilya',\n  'ismail',\n  'saidi'],\n 'dad': 'dan',\n 'friends': ['brooke', 'marlena', 'kelly'],\n 'mom': 'carmen',\n 'sister': 'maya',\n 'uncle': ['russell', 'david']}\n\n\nSee how friends isn’t at the end of the dictionary? That’s a friendly reminder that dictionaries are unordered.\nNow let’s loop through our dictionary and print out the name of the key and the length of the values (how many of that relation you have):\n\nfor k,v in family.items():\n    print(k)\n    print(len(v))\n\nmom\n6\ndad\n3\nsister\n4\nbrother\n3\nuncle\n2\naunt\n4\ncousin\n8\nfriends\n3\n\n\nChallenge: Let’s add in a friend to our dictionary. How can we do that? (Note: We didn’t learn this exact thing. Feel free to use Google if you need to!)\n\n# add friend to friends key-value pair\nfamily['friends'].append('stephanie')\n\n# print dictionary to see if it worked\nprint(family)\n\n{'mom': 'carmen', 'dad': 'dan', 'sister': 'maya', 'brother': 'sam', 'uncle': ['russell', 'david'], 'aunt': ['helene', 'sharry', 'diana', 'debbie'], 'cousin': ['zane', 'nico', 'hannah', 'alyssa', 'zach', 'kamilya', 'ismail', 'saidi'], 'friends': ['brooke', 'marlena', 'kelly', 'stephanie']}\n\n\nSay we changed our mind and now we actually want our friends to be in a separate list. How could we do that using one line of Python code?\n\n# get friends out of dictionary\nfriends = family.pop('friends')\n\n# print friends\nprint(friends)\n\n['brooke', 'marlena', 'kelly', 'stephanie']\n\n\nNice job! You’re becoming an expert at accessing and manipulating keys and values in dictionaries."
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice09_Conditionals.html",
    "href": "Practices/_Keys/KEY_Practice09_Conditionals.html",
    "title": "Practice with conditionals",
    "section": "",
    "text": "Before we practice conditionals, let’s review:\nTo execute a command when a condition is true, use if:\nif [condition]:\n  [command]\nTo execute a command when a condition is true, and execute something else otherwise, use if/else:\nif [condition]:\n  [command 1]\nelse:\n  [command 2]\nTo execute a command when one condition is true, a different command if a second condition is true, and execute something else otherwise, use if/elif/else:\nif [condition 1]:\n  [command 1]\nelif [condition 2]:\n  [command 2]\nelse:\n  [command 3]\nRemember that commands in an elif will only run if the first condition is false AND the second condition is true.\nLet’s say we are making a smoothie. In order to make a big enough smoothie, we want at least 4 cups of ingredients.\n\nstrawberries = 1\nbananas = 0.5\nmilk = 1\n\n# create a variable ingredients that equals the sum of all our ingredients\ningredients = strawberries + bananas + milk\n\n# write an if statement that prints out \"We have enough ingredients!\" if we have at least 4 cups of ingredients\nif ingredients &gt;= 4:\n    print(\"We have enough ingredients!\")\n\nThe code above will let us know if we have enough ingredients for our smoothie. But, if we don’t have enough ingredients, the code won’t print anything. Our code would be more informative if it also told us when we didn’t have enough ingredients. Next, let’s write code that also lets us know when we don’t have enough ingredients.\n\n# write code that prints \"We have enough ingredients\" if we have at least 4 cups of ingredients\n# and also prints \"We don't have enough ingredients\" if we have less than 4 cups of ingredients\nif ingredients &gt;=4:\n    print(\"We have enough ingredients!\")\nelse:\n    print(\"We do not have enough ingredients.\")\n\nWe do not have enough ingredients.\n\n\nIt might also be useful to know if we have exactly 4 cups of ingredients. Add to the code above so that it lets us know when we have more than enough ingredients, exactly enough ingredients, or not enough ingredients.\n\n# write code that prints informative messages when we have more than 4 cups of ingredients,\n# exactly 4 cups of ingredients, or less than 4 cups of ingredients\nif ingredients &gt; 4:\n    print(\"we have more than enough ingredients\")\nelif ingredients == 4:\n    print(\"we have exactly enough ingredients\")\nelse:\n    print(\"we do not have enough ingredients\")\n\nwe have exactly enough ingredients\n\n\nChallenge: Suppose our blender can only fit up to 6 cups inside. Add to the above code so that it also warns us when we have too many ingredients.\n\n# write an if/elif/else style statement that does the following:\n# prints a message when we have exactly 4 cups of ingredients saying we have exactly the right amount of ingredients\n# prints a message when we have less than 4 cups of ingredients say we do not have enough \n# prints a message when we have 4-6 cups of ingredients saying we have more than enough\n# prints a message otherwise that says we have too many ingredients \nif ingredients == 4:\n    print(\"we have exactly enough ingredients\")\nelif ingredients &lt; 4:\n    print(\"we do not have enough ingredients\")\nelif ingredients &gt; 4 and ingredients &lt; 6:\n    print(\"we have more than enough ingredients\")\nelse:\n    print(\"We have too many ingredients\")"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice15_Pandas-Reading.html",
    "href": "Practices/_Keys/KEY_Practice15_Pandas-Reading.html",
    "title": "Practice: Reading Data with Pandas",
    "section": "",
    "text": "Let’s start by importing pandas. Remember to give it its special nickname!\n\nimport pandas as pd\n\nWe have another dataset called iris located in the GWC GitHub. Let’s load it into a DataFrame called iris:\n\n# this is where the file is located\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\nfilename = path + 'SampleData/iris.csv'\n\n# load the iris dataset into a DataFrame\niris = pd.read_csv(filename)\n\nExplore the DataFrame; take a look at the beginning and end:\n\n# View the first few rows\n\niris.head()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n# View the last few rows\n\niris.tail()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nAfter taking a close look at the data, what do you think each row in the DataFrame represents?\nAnswer: Each row represents an individual flower.\nHow many rows are in the DataFrame? Use len to find out:\n\n# number of rows\n\nlen(iris)\n\n150\n\n\nHow many columns are in the DataFrame? Use columns and len to find out:\n\n# number of columns\n\nlen(iris.columns)\n\n5\n\n\nHow many data points are in the DataFrame?\n\n# calculate the number of data points\n\nlen(iris)*len(iris.columns)\n\n750"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice21_Basic_Stats_I_Averages.html",
    "href": "Practices/_Keys/KEY_Practice21_Basic_Stats_I_Averages.html",
    "title": "Practice: Basic Statistics I: Averages",
    "section": "",
    "text": "For this practice, let’s use the Boston dataset.\n\n# Import the numpy package so that we can use the method mean to calculate averages\nimport numpy as np\n\n\n# Import the load_boston method \nfrom sklearn.datasets import load_boston\n\n\n# Import pandas, so that we can work with the data frame version of the Boston data\nimport pandas as pd\n\n\n# Load the Boston data\nboston = load_boston()\n\n\n# This will provide the characteristics for the Boston dataset\nprint(boston.DESCR)\n\nBoston House Prices dataset\n===========================\n\nNotes\n------\nData Set Characteristics:  \n\n    :Number of Instances: 506 \n\n    :Number of Attributes: 13 numeric/categorical predictive\n    \n    :Median Value (attribute 14) is usually the target\n\n    :Attribute Information (in order):\n        - CRIM     per capita crime rate by town\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n        - INDUS    proportion of non-retail business acres per town\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n        - NOX      nitric oxides concentration (parts per 10 million)\n        - RM       average number of rooms per dwelling\n        - AGE      proportion of owner-occupied units built prior to 1940\n        - DIS      weighted distances to five Boston employment centres\n        - RAD      index of accessibility to radial highways\n        - TAX      full-value property-tax rate per $10,000\n        - PTRATIO  pupil-teacher ratio by town\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n        - LSTAT    % lower status of the population\n        - MEDV     Median value of owner-occupied homes in $1000's\n\n    :Missing Attribute Values: None\n\n    :Creator: Harrison, D. and Rubinfeld, D.L.\n\nThis is a copy of UCI ML housing dataset.\nhttp://archive.ics.uci.edu/ml/datasets/Housing\n\n\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\nprices and the demand for clean air', J. Environ. Economics & Management,\nvol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\npages 244-261 of the latter.\n\nThe Boston house-price data has been used in many machine learning papers that address regression\nproblems.   \n     \n**References**\n\n   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n   - many more! (see http://archive.ics.uci.edu/ml/datasets/Housing)\n\n\n\n\n# Here, I'm including the prices of Boston's houses, which is boston['target'], as a column with the other \n# features in the Boston dataset.\nboston_data = np.concatenate((boston['data'], pd.DataFrame(boston['target'])), axis = 1)\n\n\n# Convert the Boston data to a data frame format, so that it's easier to view and process\nboston_df = pd.DataFrame(boston_updated, columns = np.concatenate((boston['feature_names'], 'MEDV'), axis = None))\nboston_df\n\n\n\n\n\n\n\n\nCRIM\nZN\nINDUS\nCHAS\nNOX\nRM\nAGE\nDIS\nRAD\nTAX\nPTRATIO\nB\nLSTAT\nMEDV\n\n\n\n\n0\n0.00632\n18.0\n2.31\n0.0\n0.538\n6.575\n65.2\n4.0900\n1.0\n296.0\n15.3\n396.90\n4.98\n24.0\n\n\n1\n0.02731\n0.0\n7.07\n0.0\n0.469\n6.421\n78.9\n4.9671\n2.0\n242.0\n17.8\n396.90\n9.14\n21.6\n\n\n2\n0.02729\n0.0\n7.07\n0.0\n0.469\n7.185\n61.1\n4.9671\n2.0\n242.0\n17.8\n392.83\n4.03\n34.7\n\n\n3\n0.03237\n0.0\n2.18\n0.0\n0.458\n6.998\n45.8\n6.0622\n3.0\n222.0\n18.7\n394.63\n2.94\n33.4\n\n\n4\n0.06905\n0.0\n2.18\n0.0\n0.458\n7.147\n54.2\n6.0622\n3.0\n222.0\n18.7\n396.90\n5.33\n36.2\n\n\n5\n0.02985\n0.0\n2.18\n0.0\n0.458\n6.430\n58.7\n6.0622\n3.0\n222.0\n18.7\n394.12\n5.21\n28.7\n\n\n6\n0.08829\n12.5\n7.87\n0.0\n0.524\n6.012\n66.6\n5.5605\n5.0\n311.0\n15.2\n395.60\n12.43\n22.9\n\n\n7\n0.14455\n12.5\n7.87\n0.0\n0.524\n6.172\n96.1\n5.9505\n5.0\n311.0\n15.2\n396.90\n19.15\n27.1\n\n\n8\n0.21124\n12.5\n7.87\n0.0\n0.524\n5.631\n100.0\n6.0821\n5.0\n311.0\n15.2\n386.63\n29.93\n16.5\n\n\n9\n0.17004\n12.5\n7.87\n0.0\n0.524\n6.004\n85.9\n6.5921\n5.0\n311.0\n15.2\n386.71\n17.10\n18.9\n\n\n10\n0.22489\n12.5\n7.87\n0.0\n0.524\n6.377\n94.3\n6.3467\n5.0\n311.0\n15.2\n392.52\n20.45\n15.0\n\n\n11\n0.11747\n12.5\n7.87\n0.0\n0.524\n6.009\n82.9\n6.2267\n5.0\n311.0\n15.2\n396.90\n13.27\n18.9\n\n\n12\n0.09378\n12.5\n7.87\n0.0\n0.524\n5.889\n39.0\n5.4509\n5.0\n311.0\n15.2\n390.50\n15.71\n21.7\n\n\n13\n0.62976\n0.0\n8.14\n0.0\n0.538\n5.949\n61.8\n4.7075\n4.0\n307.0\n21.0\n396.90\n8.26\n20.4\n\n\n14\n0.63796\n0.0\n8.14\n0.0\n0.538\n6.096\n84.5\n4.4619\n4.0\n307.0\n21.0\n380.02\n10.26\n18.2\n\n\n15\n0.62739\n0.0\n8.14\n0.0\n0.538\n5.834\n56.5\n4.4986\n4.0\n307.0\n21.0\n395.62\n8.47\n19.9\n\n\n16\n1.05393\n0.0\n8.14\n0.0\n0.538\n5.935\n29.3\n4.4986\n4.0\n307.0\n21.0\n386.85\n6.58\n23.1\n\n\n17\n0.78420\n0.0\n8.14\n0.0\n0.538\n5.990\n81.7\n4.2579\n4.0\n307.0\n21.0\n386.75\n14.67\n17.5\n\n\n18\n0.80271\n0.0\n8.14\n0.0\n0.538\n5.456\n36.6\n3.7965\n4.0\n307.0\n21.0\n288.99\n11.69\n20.2\n\n\n19\n0.72580\n0.0\n8.14\n0.0\n0.538\n5.727\n69.5\n3.7965\n4.0\n307.0\n21.0\n390.95\n11.28\n18.2\n\n\n20\n1.25179\n0.0\n8.14\n0.0\n0.538\n5.570\n98.1\n3.7979\n4.0\n307.0\n21.0\n376.57\n21.02\n13.6\n\n\n21\n0.85204\n0.0\n8.14\n0.0\n0.538\n5.965\n89.2\n4.0123\n4.0\n307.0\n21.0\n392.53\n13.83\n19.6\n\n\n22\n1.23247\n0.0\n8.14\n0.0\n0.538\n6.142\n91.7\n3.9769\n4.0\n307.0\n21.0\n396.90\n18.72\n15.2\n\n\n23\n0.98843\n0.0\n8.14\n0.0\n0.538\n5.813\n100.0\n4.0952\n4.0\n307.0\n21.0\n394.54\n19.88\n14.5\n\n\n24\n0.75026\n0.0\n8.14\n0.0\n0.538\n5.924\n94.1\n4.3996\n4.0\n307.0\n21.0\n394.33\n16.30\n15.6\n\n\n25\n0.84054\n0.0\n8.14\n0.0\n0.538\n5.599\n85.7\n4.4546\n4.0\n307.0\n21.0\n303.42\n16.51\n13.9\n\n\n26\n0.67191\n0.0\n8.14\n0.0\n0.538\n5.813\n90.3\n4.6820\n4.0\n307.0\n21.0\n376.88\n14.81\n16.6\n\n\n27\n0.95577\n0.0\n8.14\n0.0\n0.538\n6.047\n88.8\n4.4534\n4.0\n307.0\n21.0\n306.38\n17.28\n14.8\n\n\n28\n0.77299\n0.0\n8.14\n0.0\n0.538\n6.495\n94.4\n4.4547\n4.0\n307.0\n21.0\n387.94\n12.80\n18.4\n\n\n29\n1.00245\n0.0\n8.14\n0.0\n0.538\n6.674\n87.3\n4.2390\n4.0\n307.0\n21.0\n380.23\n11.98\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n476\n4.87141\n0.0\n18.10\n0.0\n0.614\n6.484\n93.6\n2.3053\n24.0\n666.0\n20.2\n396.21\n18.68\n16.7\n\n\n477\n15.02340\n0.0\n18.10\n0.0\n0.614\n5.304\n97.3\n2.1007\n24.0\n666.0\n20.2\n349.48\n24.91\n12.0\n\n\n478\n10.23300\n0.0\n18.10\n0.0\n0.614\n6.185\n96.7\n2.1705\n24.0\n666.0\n20.2\n379.70\n18.03\n14.6\n\n\n479\n14.33370\n0.0\n18.10\n0.0\n0.614\n6.229\n88.0\n1.9512\n24.0\n666.0\n20.2\n383.32\n13.11\n21.4\n\n\n480\n5.82401\n0.0\n18.10\n0.0\n0.532\n6.242\n64.7\n3.4242\n24.0\n666.0\n20.2\n396.90\n10.74\n23.0\n\n\n481\n5.70818\n0.0\n18.10\n0.0\n0.532\n6.750\n74.9\n3.3317\n24.0\n666.0\n20.2\n393.07\n7.74\n23.7\n\n\n482\n5.73116\n0.0\n18.10\n0.0\n0.532\n7.061\n77.0\n3.4106\n24.0\n666.0\n20.2\n395.28\n7.01\n25.0\n\n\n483\n2.81838\n0.0\n18.10\n0.0\n0.532\n5.762\n40.3\n4.0983\n24.0\n666.0\n20.2\n392.92\n10.42\n21.8\n\n\n484\n2.37857\n0.0\n18.10\n0.0\n0.583\n5.871\n41.9\n3.7240\n24.0\n666.0\n20.2\n370.73\n13.34\n20.6\n\n\n485\n3.67367\n0.0\n18.10\n0.0\n0.583\n6.312\n51.9\n3.9917\n24.0\n666.0\n20.2\n388.62\n10.58\n21.2\n\n\n486\n5.69175\n0.0\n18.10\n0.0\n0.583\n6.114\n79.8\n3.5459\n24.0\n666.0\n20.2\n392.68\n14.98\n19.1\n\n\n487\n4.83567\n0.0\n18.10\n0.0\n0.583\n5.905\n53.2\n3.1523\n24.0\n666.0\n20.2\n388.22\n11.45\n20.6\n\n\n488\n0.15086\n0.0\n27.74\n0.0\n0.609\n5.454\n92.7\n1.8209\n4.0\n711.0\n20.1\n395.09\n18.06\n15.2\n\n\n489\n0.18337\n0.0\n27.74\n0.0\n0.609\n5.414\n98.3\n1.7554\n4.0\n711.0\n20.1\n344.05\n23.97\n7.0\n\n\n490\n0.20746\n0.0\n27.74\n0.0\n0.609\n5.093\n98.0\n1.8226\n4.0\n711.0\n20.1\n318.43\n29.68\n8.1\n\n\n491\n0.10574\n0.0\n27.74\n0.0\n0.609\n5.983\n98.8\n1.8681\n4.0\n711.0\n20.1\n390.11\n18.07\n13.6\n\n\n492\n0.11132\n0.0\n27.74\n0.0\n0.609\n5.983\n83.5\n2.1099\n4.0\n711.0\n20.1\n396.90\n13.35\n20.1\n\n\n493\n0.17331\n0.0\n9.69\n0.0\n0.585\n5.707\n54.0\n2.3817\n6.0\n391.0\n19.2\n396.90\n12.01\n21.8\n\n\n494\n0.27957\n0.0\n9.69\n0.0\n0.585\n5.926\n42.6\n2.3817\n6.0\n391.0\n19.2\n396.90\n13.59\n24.5\n\n\n495\n0.17899\n0.0\n9.69\n0.0\n0.585\n5.670\n28.8\n2.7986\n6.0\n391.0\n19.2\n393.29\n17.60\n23.1\n\n\n496\n0.28960\n0.0\n9.69\n0.0\n0.585\n5.390\n72.9\n2.7986\n6.0\n391.0\n19.2\n396.90\n21.14\n19.7\n\n\n497\n0.26838\n0.0\n9.69\n0.0\n0.585\n5.794\n70.6\n2.8927\n6.0\n391.0\n19.2\n396.90\n14.10\n18.3\n\n\n498\n0.23912\n0.0\n9.69\n0.0\n0.585\n6.019\n65.3\n2.4091\n6.0\n391.0\n19.2\n396.90\n12.92\n21.2\n\n\n499\n0.17783\n0.0\n9.69\n0.0\n0.585\n5.569\n73.5\n2.3999\n6.0\n391.0\n19.2\n395.77\n15.10\n17.5\n\n\n500\n0.22438\n0.0\n9.69\n0.0\n0.585\n6.027\n79.7\n2.4982\n6.0\n391.0\n19.2\n396.90\n14.33\n16.8\n\n\n501\n0.06263\n0.0\n11.93\n0.0\n0.573\n6.593\n69.1\n2.4786\n1.0\n273.0\n21.0\n391.99\n9.67\n22.4\n\n\n502\n0.04527\n0.0\n11.93\n0.0\n0.573\n6.120\n76.7\n2.2875\n1.0\n273.0\n21.0\n396.90\n9.08\n20.6\n\n\n503\n0.06076\n0.0\n11.93\n0.0\n0.573\n6.976\n91.0\n2.1675\n1.0\n273.0\n21.0\n396.90\n5.64\n23.9\n\n\n504\n0.10959\n0.0\n11.93\n0.0\n0.573\n6.794\n89.3\n2.3889\n1.0\n273.0\n21.0\n393.45\n6.48\n22.0\n\n\n505\n0.04741\n0.0\n11.93\n0.0\n0.573\n6.030\n80.8\n2.5050\n1.0\n273.0\n21.0\n396.90\n7.88\n11.9\n\n\n\n\n506 rows × 14 columns\n\n\n\n\n# Determine the mean of each feature\naverages_column = np.mean(boston_df, axis = 0)\nprint(averages_column)\n\nCRIM         3.593761\nZN          11.363636\nINDUS       11.136779\nCHAS         0.069170\nNOX          0.554695\nRM           6.284634\nAGE         68.574901\nDIS          3.795043\nRAD          9.549407\nTAX        408.237154\nPTRATIO     18.455534\nB          356.674032\nLSTAT       12.653063\nMEDV        22.532806\ndtype: float64\n\n\n\n# Determine the mean of each row\naverages_row = np.mean(boston_df, axis = 1)\nprint(averages_row)\n\n0      59.635666\n1      56.235315\n2      55.298456\n3      52.585755\n4      53.731875\n5      53.256432\n6      61.520342\n7      64.543646\n8      64.077024\n9      62.390724\n10     63.379471\n11     62.601226\n12     59.316977\n13     59.951733\n14     60.346704\n15     59.437714\n16     56.999681\n17     60.880721\n18     50.586658\n19     60.061236\n20     61.470549\n21     61.904810\n22     62.467812\n23     62.892474\n24     62.291561\n25     55.078724\n26     60.745351\n27     55.671012\n28     61.852906\n29     60.935961\n         ...    \n476    90.554622\n477    88.216579\n478    89.752321\n479    89.804136\n480    88.547301\n481    88.859420\n482    89.237483\n483    86.210763\n484    84.816184\n485    86.797169\n486    89.342475\n487    86.874712\n488    92.280340\n489    88.865841\n490    87.484433\n491    92.284703\n492    91.821659\n493    65.674786\n494    65.189448\n495    64.136614\n496    67.542371\n497    66.809291\n498    66.533016\n499    66.892266\n500    67.353899\n501    57.842659\n502    58.516841\n503    59.581947\n504    59.144678\n505    58.111815\nLength: 506, dtype: float64\n\n\nSo we can determine the averages by row, but should we do this? Why or why not?\nAnswer: It’s very hard to interpret a these values, because taking an average across different features does not make sense.\nLet’s put together what you have learned about averages and subsetting to do the next problems.\nWe will determine the average price for houses along the Charles River and that for houses NOT along the river.\n\n# Use the query method to define a subset of boston_df that only include houses are along the river (CHAS = 1). \nalong_river = boston_df.query('CHAS == 1')\nalong_river\n\n\n\n\n\n\n\n\nCRIM\nZN\nINDUS\nCHAS\nNOX\nRM\nAGE\nDIS\nRAD\nTAX\nPTRATIO\nB\nLSTAT\nMEDV\n\n\n\n\n142\n3.32105\n0.0\n19.58\n1.0\n0.8710\n5.403\n100.0\n1.3216\n5.0\n403.0\n14.7\n396.90\n26.82\n13.4\n\n\n152\n1.12658\n0.0\n19.58\n1.0\n0.8710\n5.012\n88.0\n1.6102\n5.0\n403.0\n14.7\n343.28\n12.12\n15.3\n\n\n154\n1.41385\n0.0\n19.58\n1.0\n0.8710\n6.129\n96.0\n1.7494\n5.0\n403.0\n14.7\n321.02\n15.12\n17.0\n\n\n155\n3.53501\n0.0\n19.58\n1.0\n0.8710\n6.152\n82.6\n1.7455\n5.0\n403.0\n14.7\n88.01\n15.02\n15.6\n\n\n160\n1.27346\n0.0\n19.58\n1.0\n0.6050\n6.250\n92.6\n1.7984\n5.0\n403.0\n14.7\n338.92\n5.50\n27.0\n\n\n162\n1.83377\n0.0\n19.58\n1.0\n0.6050\n7.802\n98.2\n2.0407\n5.0\n403.0\n14.7\n389.61\n1.92\n50.0\n\n\n163\n1.51902\n0.0\n19.58\n1.0\n0.6050\n8.375\n93.9\n2.1620\n5.0\n403.0\n14.7\n388.45\n3.32\n50.0\n\n\n208\n0.13587\n0.0\n10.59\n1.0\n0.4890\n6.064\n59.1\n4.2392\n4.0\n277.0\n18.6\n381.32\n14.66\n24.4\n\n\n209\n0.43571\n0.0\n10.59\n1.0\n0.4890\n5.344\n100.0\n3.8750\n4.0\n277.0\n18.6\n396.90\n23.09\n20.0\n\n\n210\n0.17446\n0.0\n10.59\n1.0\n0.4890\n5.960\n92.1\n3.8771\n4.0\n277.0\n18.6\n393.25\n17.27\n21.7\n\n\n211\n0.37578\n0.0\n10.59\n1.0\n0.4890\n5.404\n88.6\n3.6650\n4.0\n277.0\n18.6\n395.24\n23.98\n19.3\n\n\n212\n0.21719\n0.0\n10.59\n1.0\n0.4890\n5.807\n53.8\n3.6526\n4.0\n277.0\n18.6\n390.94\n16.03\n22.4\n\n\n216\n0.04560\n0.0\n13.89\n1.0\n0.5500\n5.888\n56.0\n3.1121\n5.0\n276.0\n16.4\n392.80\n13.51\n23.3\n\n\n218\n0.11069\n0.0\n13.89\n1.0\n0.5500\n5.951\n93.8\n2.8893\n5.0\n276.0\n16.4\n396.90\n17.92\n21.5\n\n\n219\n0.11425\n0.0\n13.89\n1.0\n0.5500\n6.373\n92.4\n3.3633\n5.0\n276.0\n16.4\n393.74\n10.50\n23.0\n\n\n220\n0.35809\n0.0\n6.20\n1.0\n0.5070\n6.951\n88.5\n2.8617\n8.0\n307.0\n17.4\n391.70\n9.71\n26.7\n\n\n221\n0.40771\n0.0\n6.20\n1.0\n0.5070\n6.164\n91.3\n3.0480\n8.0\n307.0\n17.4\n395.24\n21.46\n21.7\n\n\n222\n0.62356\n0.0\n6.20\n1.0\n0.5070\n6.879\n77.7\n3.2721\n8.0\n307.0\n17.4\n390.39\n9.93\n27.5\n\n\n234\n0.44791\n0.0\n6.20\n1.0\n0.5070\n6.726\n66.5\n3.6519\n8.0\n307.0\n17.4\n360.20\n8.05\n29.0\n\n\n236\n0.52058\n0.0\n6.20\n1.0\n0.5070\n6.631\n76.5\n4.1480\n8.0\n307.0\n17.4\n388.45\n9.54\n25.1\n\n\n269\n0.09065\n20.0\n6.96\n1.0\n0.4640\n5.920\n61.5\n3.9175\n3.0\n223.0\n18.6\n391.34\n13.65\n20.7\n\n\n273\n0.22188\n20.0\n6.96\n1.0\n0.4640\n7.691\n51.8\n4.3665\n3.0\n223.0\n18.6\n390.77\n6.58\n35.2\n\n\n274\n0.05644\n40.0\n6.41\n1.0\n0.4470\n6.758\n32.9\n4.0776\n4.0\n254.0\n17.6\n396.90\n3.53\n32.4\n\n\n276\n0.10469\n40.0\n6.41\n1.0\n0.4470\n7.267\n49.0\n4.7872\n4.0\n254.0\n17.6\n389.25\n6.05\n33.2\n\n\n277\n0.06127\n40.0\n6.41\n1.0\n0.4470\n6.826\n27.6\n4.8628\n4.0\n254.0\n17.6\n393.45\n4.16\n33.1\n\n\n282\n0.06129\n20.0\n3.33\n1.0\n0.4429\n7.645\n49.7\n5.2119\n5.0\n216.0\n14.9\n377.07\n3.01\n46.0\n\n\n283\n0.01501\n90.0\n1.21\n1.0\n0.4010\n7.923\n24.8\n5.8850\n1.0\n198.0\n13.6\n395.52\n3.16\n50.0\n\n\n356\n8.98296\n0.0\n18.10\n1.0\n0.7700\n6.212\n97.4\n2.1222\n24.0\n666.0\n20.2\n377.73\n17.60\n17.8\n\n\n357\n3.84970\n0.0\n18.10\n1.0\n0.7700\n6.395\n91.0\n2.5052\n24.0\n666.0\n20.2\n391.34\n13.27\n21.7\n\n\n358\n5.20177\n0.0\n18.10\n1.0\n0.7700\n6.127\n83.4\n2.7227\n24.0\n666.0\n20.2\n395.43\n11.48\n22.7\n\n\n363\n4.22239\n0.0\n18.10\n1.0\n0.7700\n5.803\n89.0\n1.9047\n24.0\n666.0\n20.2\n353.04\n14.64\n16.8\n\n\n364\n3.47428\n0.0\n18.10\n1.0\n0.7180\n8.780\n82.9\n1.9047\n24.0\n666.0\n20.2\n354.55\n5.29\n21.9\n\n\n369\n5.66998\n0.0\n18.10\n1.0\n0.6310\n6.683\n96.8\n1.3567\n24.0\n666.0\n20.2\n375.33\n3.73\n50.0\n\n\n370\n6.53876\n0.0\n18.10\n1.0\n0.6310\n7.016\n97.5\n1.2024\n24.0\n666.0\n20.2\n392.05\n2.96\n50.0\n\n\n372\n8.26725\n0.0\n18.10\n1.0\n0.6680\n5.875\n89.6\n1.1296\n24.0\n666.0\n20.2\n347.88\n8.88\n50.0\n\n\n\n\n\n\n\nWhat do you notice about the CHAS column?\nAnswer: It’s all 1.0! This means that we successfully subsetting all houses that are along the Charles River. Great work!\n\n# Now determine the average price for these houses. 'MEDV' is the column name for the prices. \naverages_price_along_river = np.mean(along_river['MEDV'])\naverages_price_along_river\n\n28.44\n\n\nNow try determining the average for houses NOT along the River.\n\n# Determine the average price for houses that are NOT along the Charles River (when CHAS = 0). \nnot_along_river = boston_df.query('CHAS == 0')\naverages_price_not_along_river = np.mean(not_along_river['MEDV'])\naverages_price_not_along_river\n\n22.093842887473482\n\n\nGood work! You’re becoming an expert in subsetting and determining averages on subsetted data. This will be integral for your capstone projects and future careers as data scientists!"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice16_Pandas-Subsetting-I.html",
    "href": "Practices/_Keys/KEY_Practice16_Pandas-Subsetting-I.html",
    "title": "Practice: Subsetting Pandas DataFrames I",
    "section": "",
    "text": "For this practice, let’s use the iris dataset:\n\n# import the pandas package\nimport pandas as pd\n# set the path\npath = 'https://raw.githubusercontent.com/GWC-DCMB/curriculum-notebooks/master/'\n# this is where the file is located\nfilename = path + 'SampleData/iris.csv'\n# load the iris dataset into a DataFrame\niris = pd.read_csv(filename)\n\nGet familiar with the dataset:\n\n# take a look at the beginning\n\niris.head()\n\nTry subsetting on columns:\n\n# subset the species column\n\niris['species']\n\n\n# subset the sepal_length and sepal_width columns\n\niris[['sepal_length','sepal_width']]\n\n\n# here's a list of columns we want to keep\ncolumns = ['species', 'petal_width']\n# now subset the iris dataframe using the list\niris[columns]\n\nTry subsetting on rows:\n\n# select the first 10 rows\niris.iloc[:10]\n# iris.head(10) # alternative method\n\n\n# think of another way to select the first 10 rows\niris.head(10)\n# iris.iloc[:11] # alternative method\n\n\n# select rows 15 through 20 (Hint: Don't forget that counting starts at 0 in Python!)\niris.iloc[14:20]\n\n\n# select row 30\niris.iloc[30]\n\nBonus: Do you think it’s possible to subset with both rows AND columns at the same time? Why or why not?\nFeel free to experiment in the space below:"
  },
  {
    "objectID": "Practices/_Keys/KEY_Practice03_Variables_Types.html",
    "href": "Practices/_Keys/KEY_Practice03_Variables_Types.html",
    "title": "Practice with Variables and Types",
    "section": "",
    "text": "As you’ve seen, one of the most basic ways to use Python is as a calculator. Let’s step up our calculation game by using Python to solve a math problem.\nLet’s say you opened up a savings account at your local bank and to start you deposited $100. While your money is in the bank it is accruing interest at a rate of 10 percent per year. Now, you want to know how much money you will have at the end of 7 years, assuming you never withdraw or deposit anything from your savings account. The formula for calculating this value is:\n\ntotal = start_balance * ( 1 + interest_rate )years\n\n\n# assign your deposit amount to the variable start_balance\nstart_balance = 100\n\n# assign your interest rate to the variable interest_rate (TIP: How do we represent percentages in math?)\ninterest_rate = 0.1\n\n# print the types of both start_balance and interest_rate. Make sure they match what you expect\nprint(type(start_balance))\nprint(type(interest_rate))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n\n\n\n# assign the number of savings years to the variable years\nyears = 7\n\n# calculate the result of your savings problem to the variable total.\n# HINT 1: Remember your order of operations!\n# HINT 2: Use Google for the Python exponent mathematical operator\n# Google is your best friend in coding - don't be afraid to use it!\ntotal = start_balance * (1+interest_rate) ** years\n\n# print the value of the total variable\nprint(total)\n\n# print the type of the total variable. Is this what we expect? Why?\nprint(type(total))\n\n194.87171000000012\n&lt;class 'float'&gt;\n\n\nNow that we’ve had some practice with numerical types, let’s get some practice with the other types we learned!\nFirst, let’s see if we were able to double our money with our 7 years of interest and patience.\n\n# determine if total is greater than or equal to double our start balance\n# assign this value to the variable doubled and print it\ndoubled = total &gt;= start_balance*2\nprint(doubled)\n\n# What type do we expect this to be? Let's print the type of the variable doubled\nprint(type(doubled))\n\nFalse\n&lt;class 'bool'&gt;\n\n\nNow, let’s play the name game.\n\n# create a variable called first_name and assign it to your first name as a string\nfirst_name = \"Marlena\"\n\n# create a variable called last_name and assign it to your last name as a string\nlast_name = \"Duda\"\n\n# Now, concatenate (i.e. add) first_name with last_name and assign it a variable called full_name\nfull_name = first_name + last_name\n\n# print full_name. Does this look like you expect? How can you fix the formatting so it makes sense?\nprint(full_name)\n\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n\n# now try to add full_name to the variable start_balance from above. Does this work?\n# read the error message you get carefully! \n# learning how to read error messages will give you the keys to fix mistakes (i.e. bugs) in your code\nfull_name + start_balance\n\nMarlenaDuda\nMarlena Duda\n\n\nTypeError: must be str, not int\n\n\nLastly, let’s use Python to create a personalized investment report.\nWe know that we cannot simply add integers, floats, or booleans to strings. But in terms of printing, there are a few ways we can handle the formatting to enable printing of mixed types in the same message.\n\nMethod 1 - type conversion\nNumeric types and booleans can be converted to strings using the str() function.\n\nprint('ABC' + str(123))\nprint('LMNOP' + str(8.910))\nprint('XYZ' + str(True))\n\nABC123\nLMNOP8.91\nXYZTrue\n\n\nSome strings can also be converted to other types (if they make sense) using the int(), float(), and bool() functions.\n\nprint(4 + int('5'))\nprint(1.2 + float(\"3.4\"))\nprint(False + bool('True'))\n\n9\n4.6\n1\n\n\n\n\nMethod 2 - multiple parameters in print function\nThe print function takes multiple parameters (i.e. inputs), which can be of mixed type and are separated by commas.\n\nprint(\"I have\", 1 , \"dog and\", 2, \"cats\")\nprint(\"I ate\", 2.5, \"ice cream sandwiches\")\nprint(\"Those statements are both\", True)\n\nI have 1 dog and 2 cats\nI ate 2.5 ice cream sandwiches\nThose statements are both True\n\n\nNotice that when using multiple parameters in the print functon, Python automatically puts spaces between the different inputs, but when using the type conversion method there are no automatic spaces added.\nNow, use either of the above methods to print a report that matches the following format:\nCustomer Name: Marlena Duda\nStarting Balance: $100\nYears Saved: 7 Ending Balance: $194.87 Doubled Starting: False\nRemember: Use the variable names we defined above whenever you can!\n\n# HINT: remember the spacing rules above!\nprint('Customer Name:', full_name)\nprint('Starting Balance: $' + str(start_balance))\nprint('Years Saved:', years)\nprint('Ending Balance: $' + str(total))\nprint('Doubled Starting:', doubled)\n\nCustomer Name: Marlena Duda\nStarting Balance: $100\nYears Saved: 7\nEnding Balance: $194.87171000000012\nDoubled Starting: False"
  }
]